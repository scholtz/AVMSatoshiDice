#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 32 1 8 1000000 321 322 320
    bytecblock 0x00 0x0000000000000000000000000000000000000000000000000000000000000000 0x0000000000000000 "g" "d" 0x640000000000000000 "p" 0x151f7c75 0x80 "user withdrawal" 0xda7025b9 "admin withdrawal" 0x0000000000000001 0x0f4240 0x0000000000000002 0x4a968f8f
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:140
    // export class AvmSatoshiDice extends Contract {
    txn NumAppArgs
    bz main_bare_routing@18
    pushbytess 0x70a65e89 0xc61d56f5 0x54cc696f 0x6b090bbe 0xe36e57bf 0x178c1f33 0xa2649a00 0xc4b5cfb1 0x6646eb4a 0x2553863f 0x751e0d47 0x2a236e18 0x76e03d94 // method "updateApplication(string)bool", method "sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]", method "withdraw(address,uint256,uint64,bool)void", method "CreateGameWithNativeToken(pay,uint64)void", method "OptInToASA(pay,uint64)void", method "CreateGameWithASAToken(axfer,uint64)void", method "CreateGameWithArc200Token(uint64,uint256,uint64)void", method "StartGameWithNativeToken(pay,(uint64,address),uint64)void", method "StartGameWithASAToken(axfer,(uint64,address),uint64)void", method "StartGameWithArc200Token(uint256,uint64,(uint64,address),uint64)void", method "Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint256,uint64,uint256,uint64,address)", method "MyGame()(uint64,uint64,uint64,uint256,uint64,address,address)", method "ClaimGame()void"
    txna ApplicationArgs 0
    match main_updateApplication_route@3 main_sendOnlineKeyRegistration_route@4 main_withdraw_route@5 main_CreateGameWithNativeToken_route@6 main_OptInToASA_route@7 main_CreateGameWithASAToken_route@8 main_CreateGameWithArc200Token_route@9 main_StartGameWithNativeToken_route@10 main_StartGameWithASAToken_route@11 main_StartGameWithArc200Token_route@12 main_Game_route@13 main_MyGame_route@14 main_ClaimGame_route@15

main_after_if_else@22:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:140
    // export class AvmSatoshiDice extends Contract {
    intc_0 // 0
    return

main_ClaimGame_route@15:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:756
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub ClaimGame
    intc_2 // 1
    return

main_MyGame_route@14:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:742
    // @arc4.abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub MyGame
    bytec 7 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    return

main_Game_route@13:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:728
    // @arc4.abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:140
    // export class AvmSatoshiDice extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:728
    // @arc4.abimethod({ readonly: true })
    callsub Game
    bytec 7 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    return

main_StartGameWithArc200Token_route@12:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:661
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:140
    // export class AvmSatoshiDice extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:661
    // @arc4.abimethod()
    callsub StartGameWithArc200Token
    intc_2 // 1
    return

main_StartGameWithASAToken_route@11:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:602
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:140
    // export class AvmSatoshiDice extends Contract {
    txn GroupIndex
    intc_2 // 1
    -
    dup
    gtxns TypeEnum
    pushint 4 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:602
    // @arc4.abimethod()
    callsub StartGameWithASAToken
    intc_2 // 1
    return

main_StartGameWithNativeToken_route@10:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:543
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:140
    // export class AvmSatoshiDice extends Contract {
    txn GroupIndex
    intc_2 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:543
    // @arc4.abimethod()
    callsub StartGameWithNativeToken
    intc_2 // 1
    return

main_CreateGameWithArc200Token_route@9:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:472
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:140
    // export class AvmSatoshiDice extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:472
    // @arc4.abimethod()
    callsub CreateGameWithArc200Token
    intc_2 // 1
    return

main_CreateGameWithASAToken_route@8:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:413
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:140
    // export class AvmSatoshiDice extends Contract {
    txn GroupIndex
    intc_2 // 1
    -
    dup
    gtxns TypeEnum
    pushint 4 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:413
    // @arc4.abimethod()
    callsub CreateGameWithASAToken
    intc_2 // 1
    return

main_OptInToASA_route@7:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:387
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:140
    // export class AvmSatoshiDice extends Contract {
    txn GroupIndex
    intc_2 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:387
    // @arc4.abimethod()
    callsub OptInToASA
    intc_2 // 1
    return

main_CreateGameWithNativeToken_route@6:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:330
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:140
    // export class AvmSatoshiDice extends Contract {
    txn GroupIndex
    intc_2 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:330
    // @arc4.abimethod()
    callsub CreateGameWithNativeToken
    intc_2 // 1
    return

main_withdraw_route@5:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:194
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:140
    // export class AvmSatoshiDice extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:194
    // @arc4.abimethod()
    callsub withdraw
    intc_2 // 1
    return

main_sendOnlineKeyRegistration_route@4:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:161
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:140
    // export class AvmSatoshiDice extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    extract 2 0
    txna ApplicationArgs 4
    btoi
    txna ApplicationArgs 5
    btoi
    txna ApplicationArgs 6
    btoi
    txna ApplicationArgs 7
    btoi
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:161
    // @arc4.abimethod()
    callsub sendOnlineKeyRegistration
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec 7 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    return

main_updateApplication_route@3:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:152
    // @arc4.abimethod({ allowActions: 'UpdateApplication' })
    txn OnCompletion
    pushint 4 // UpdateApplication
    ==
    assert // OnCompletion is not UpdateApplication
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:140
    // export class AvmSatoshiDice extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:152
    // @arc4.abimethod({ allowActions: 'UpdateApplication' })
    callsub updateApplication
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec 7 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    return

main_bare_routing@18:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:140
    // export class AvmSatoshiDice extends Contract {
    txn OnCompletion
    bnz main_after_if_else@22
    txn ApplicationID
    !
    assert // can only call when creating
    intc_2 // 1
    return


// smart_contracts/avm_satoshi_dice/contract.algo.ts::AvmSatoshiDice.updateApplication(newVersion: bytes) -> uint64:
updateApplication:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:152-153
    // @arc4.abimethod({ allowActions: 'UpdateApplication' })
    // updateApplication(newVersion: string): boolean {
    proto 1 1
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:154
    // assert(Global.creatorAddress === Txn.sender, 'Only creator can update application')
    global CreatorAddress
    txn Sender
    ==
    assert // Only creator can update application
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:148
    // version = GlobalState<string>({ key: 'scver' })
    pushbytes "scver"
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:155
    // this.version.value = newVersion
    frame_dig -1
    app_global_put
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:156
    // return true
    intc_2 // 1
    retsub


// smart_contracts/avm_satoshi_dice/contract.algo.ts::AvmSatoshiDice.sendOnlineKeyRegistration(voteKey: bytes, selectionKey: bytes, stateProofKey: bytes, voteFirst: uint64, voteLast: uint64, voteKeyDilution: uint64, fee: uint64) -> bytes:
sendOnlineKeyRegistration:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:161-170
    // @arc4.abimethod()
    // public sendOnlineKeyRegistration(
    //   voteKey: bytes,
    //   selectionKey: bytes,
    //   stateProofKey: bytes,
    //   voteFirst: uint64,
    //   voteLast: uint64,
    //   voteKeyDilution: uint64,
    //   fee: uint64,
    // ): bytes {
    proto 7 1
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:171
    // assert(Global.creatorAddress === Txn.sender, 'Only creator can use this method')
    global CreatorAddress
    txn Sender
    ==
    assert // Only creator can use this method
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:172-182
    // const itxnResult = itxn
    //   .keyRegistration({
    //     selectionKey: selectionKey,
    //     stateProofKey: stateProofKey,
    //     voteFirst: voteFirst,
    //     voteKeyDilution: voteKeyDilution,
    //     voteLast: voteLast,
    //     voteKey: voteKey,
    //     fee: fee,
    //   })
    //   .submit()
    itxn_begin
    frame_dig -7
    itxn_field VotePK
    frame_dig -3
    itxn_field VoteLast
    frame_dig -2
    itxn_field VoteKeyDilution
    frame_dig -4
    itxn_field VoteFirst
    frame_dig -5
    itxn_field StateProofPK
    frame_dig -6
    itxn_field SelectionPK
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:172-181
    // const itxnResult = itxn
    //   .keyRegistration({
    //     selectionKey: selectionKey,
    //     stateProofKey: stateProofKey,
    //     voteFirst: voteFirst,
    //     voteKeyDilution: voteKeyDilution,
    //     voteLast: voteLast,
    //     voteKey: voteKey,
    //     fee: fee,
    //   })
    pushint 2 // 2
    itxn_field TypeEnum
    frame_dig -1
    itxn_field Fee
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:172-182
    // const itxnResult = itxn
    //   .keyRegistration({
    //     selectionKey: selectionKey,
    //     stateProofKey: stateProofKey,
    //     voteFirst: voteFirst,
    //     voteKeyDilution: voteKeyDilution,
    //     voteLast: voteLast,
    //     voteKey: voteKey,
    //     fee: fee,
    //   })
    //   .submit()
    itxn_submit
    itxn TxID
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:183
    // return itxnResult.txnId
    retsub


// smart_contracts/avm_satoshi_dice/contract.algo.ts::AvmSatoshiDice.withdraw(receiver: bytes, amount: bytes, assetId: bytes, isArc200Token: bytes) -> void:
withdraw:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:194-195
    // @arc4.abimethod()
    // public withdraw(receiver: Address, amount: UintN256, assetId: UintN64, isArc200Token: Bool): void {
    proto 4 0
    intc_0 // 0
    dupn 3
    pushbytes ""
    dupn 4
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:196-199
    // const key = new AddressAssetStruct({
    //   assetId: assetId,
    //   owner: new Address(Txn.sender),
    // })
    frame_dig -2
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:198
    // owner: new Address(Txn.sender),
    txn Sender
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:196-199
    // const key = new AddressAssetStruct({
    //   assetId: assetId,
    //   owner: new Address(Txn.sender),
    // })
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:141
    // public games = BoxMap<AddressAssetStruct, GameStruct>({ keyPrefix: 'g' })
    bytec_3 // "g"
    swap
    concat
    dup
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:201
    // if (this.games(key).exists) {
    box_len
    bury 1
    bz withdraw_else_body@13
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:202
    // const game = this.games(key).value.copy()
    frame_dig 9
    box_get
    swap
    frame_bury 1
    assert // Box must have value
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:205
    // if (toWithdrawIncludingFee === BigUint(0)) {
    frame_dig -3
    pushbytes 0x
    b==
    frame_dig -3
    frame_bury 2
    bz withdraw_after_if_else@3
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:206
    // toWithdrawIncludingFee = game.balance.native
    frame_dig 1
    extract 0 32 // on error: Index access is out of bounds
    frame_bury 2

withdraw_after_if_else@3:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:208
    // const fee: biguint = toWithdrawIncludingFee / BigUint(40)
    frame_dig 2
    dup
    pushbytes 0x28
    b/
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:209
    // const toWithdrawNet: biguint = toWithdrawIncludingFee - fee
    dig 1
    swap
    b-
    dup
    cover 2
    frame_bury 3
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:212
    // game.balance.native >= toWithdrawIncludingFee,
    frame_dig 1
    dup
    cover 3
    extract 0 32 // on error: Index access is out of bounds
    dup
    dig 2
    b>=
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:211-214
    // assert(
    //   game.balance.native >= toWithdrawIncludingFee,
    //   'Game creator can withdraw from the game only the game deposit',
    // )
    assert // Game creator can withdraw from the game only the game deposit
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:216
    // this.games(key).value.balance = new UintN256(game.balance.native - toWithdrawIncludingFee)
    swap
    b-
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    intc_1 // 32
    bzero
    dup
    frame_bury 0
    swap
    dig 1
    b|
    frame_dig 9
    dup
    cover 2
    box_get
    assert // Box must have value
    swap
    replace2 0
    box_put
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:143
    // public allDeposits = BoxMap<UintN64, UintN256>({ keyPrefix: 'd' })
    bytec 4 // "d"
    frame_dig -2
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:217
    // this.allDeposits(assetId).value = new UintN256(this.allDeposits(assetId).value.native - toWithdrawNet)
    dup
    box_get
    assert // Box must have value
    uncover 3
    b-
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    uncover 2
    b|
    box_put
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:219
    // if (game.isNativeToken.native) {
    intc 7 // 320
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    bz withdraw_after_if_else@6
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:220-227
    // itxn
    //   .payment({
    //     amount: new UintN64(toWithdrawNet).native,
    //     receiver: receiver.native,
    //     note: 'user withdrawal',
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:222
    // amount: new UintN64(toWithdrawNet).native,
    frame_dig 3
    dup
    len
    intc_3 // 8
    <=
    assert // overflow
    intc_3 // 8
    bzero
    b|
    btoi
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:224
    // note: 'user withdrawal',
    bytec 9 // "user withdrawal"
    itxn_field Note
    frame_dig -4
    itxn_field Receiver
    itxn_field Amount
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:220-226
    // itxn
    //   .payment({
    //     amount: new UintN64(toWithdrawNet).native,
    //     receiver: receiver.native,
    //     note: 'user withdrawal',
    //     fee: 0,
    //   })
    intc_2 // 1
    itxn_field TypeEnum
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:225
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:220-227
    // itxn
    //   .payment({
    //     amount: new UintN64(toWithdrawNet).native,
    //     receiver: receiver.native,
    //     note: 'user withdrawal',
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit

withdraw_after_if_else@6:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:229
    // if (game.isASAToken.native) {
    frame_dig 1
    intc 5 // 321
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    bz withdraw_after_if_else@9
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:230-238
    // itxn
    //   .assetTransfer({
    //     xferAsset: game.assetId.native,
    //     assetAmount: new UintN64(toWithdrawNet).native,
    //     assetReceiver: receiver.native,
    //     note: 'user withdrawal',
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:232
    // xferAsset: game.assetId.native,
    frame_dig 1
    intc_1 // 32
    extract_uint64
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:233
    // assetAmount: new UintN64(toWithdrawNet).native,
    frame_dig 3
    dup
    len
    intc_3 // 8
    <=
    assert // overflow
    intc_3 // 8
    bzero
    b|
    btoi
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:235
    // note: 'user withdrawal',
    bytec 9 // "user withdrawal"
    itxn_field Note
    frame_dig -4
    itxn_field AssetReceiver
    itxn_field AssetAmount
    itxn_field XferAsset
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:230-237
    // itxn
    //   .assetTransfer({
    //     xferAsset: game.assetId.native,
    //     assetAmount: new UintN64(toWithdrawNet).native,
    //     assetReceiver: receiver.native,
    //     note: 'user withdrawal',
    //     fee: 0,
    //   })
    pushint 4 // 4
    itxn_field TypeEnum
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:236
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:230-238
    // itxn
    //   .assetTransfer({
    //     xferAsset: game.assetId.native,
    //     assetAmount: new UintN64(toWithdrawNet).native,
    //     assetReceiver: receiver.native,
    //     note: 'user withdrawal',
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit

withdraw_after_if_else@9:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:240
    // if (game.isArc200Token.native) {
    frame_dig 1
    intc 6 // 322
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    bz withdraw_after_if_else@30
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:242-249
    // itxn
    //   .applicationCall({
    //     appId: game.assetId.native,
    //     appArgs: [methodSelector('arc200_transfer(address,uint256)bool'), receiver, new UintN256(toWithdrawNet)],
    //     fee: 0,
    //     note: 'user withdrawal',
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:244
    // appId: game.assetId.native,
    frame_dig 1
    intc_1 // 32
    extract_uint64
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:245
    // appArgs: [methodSelector('arc200_transfer(address,uint256)bool'), receiver, new UintN256(toWithdrawNet)],
    frame_dig 3
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    frame_dig 0
    b|
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:247
    // note: 'user withdrawal',
    bytec 9 // "user withdrawal"
    itxn_field Note
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:245
    // appArgs: [methodSelector('arc200_transfer(address,uint256)bool'), receiver, new UintN256(toWithdrawNet)],
    bytec 10 // method "arc200_transfer(address,uint256)bool"
    itxn_field ApplicationArgs
    frame_dig -4
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationID
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:242-248
    // itxn
    //   .applicationCall({
    //     appId: game.assetId.native,
    //     appArgs: [methodSelector('arc200_transfer(address,uint256)bool'), receiver, new UintN256(toWithdrawNet)],
    //     fee: 0,
    //     note: 'user withdrawal',
    //   })
    pushint 6 // 6
    itxn_field TypeEnum
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:246
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:242-249
    // itxn
    //   .applicationCall({
    //     appId: game.assetId.native,
    //     appArgs: [methodSelector('arc200_transfer(address,uint256)bool'), receiver, new UintN256(toWithdrawNet)],
    //     fee: 0,
    //     note: 'user withdrawal',
    //   })
    //   .submit()
    itxn_submit

withdraw_after_if_else@30:
    retsub

withdraw_else_body@13:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:253
    // if (Global.creatorAddress === Txn.sender) {
    global CreatorAddress
    txn Sender
    ==
    assert // The game for this asset does not exists
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:256
    // if (assetId.native === 0) {
    frame_dig -2
    btoi
    dup
    frame_bury 6
    bnz withdraw_else_body@19
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:258
    // Global.currentApplicationAddress.balance -
    global CurrentApplicationAddress
    acct_params_get AcctBalance
    assert // account funded
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:259
    // Global.currentApplicationAddress.minBalance -
    global CurrentApplicationAddress
    acct_params_get AcctMinBalance
    assert // account funded
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:258-259
    // Global.currentApplicationAddress.balance -
    // Global.currentApplicationAddress.minBalance -
    -
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:143
    // public allDeposits = BoxMap<UintN64, UintN256>({ keyPrefix: 'd' })
    bytec 4 // "d"
    frame_dig -2
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:260
    // new UintN64(this.allDeposits(assetId).value.native).native
    box_get
    assert // Box must have value
    intc_0 // 0
    assert // overflow
    intc_3 // 8
    bzero
    swap
    dig 1
    b|
    btoi
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:257-260
    // const maxWithdrawableBalance: uint64 =
    //   Global.currentApplicationAddress.balance -
    //   Global.currentApplicationAddress.minBalance -
    //   new UintN64(this.allDeposits(assetId).value.native).native
    uncover 2
    swap
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:258-260
    // Global.currentApplicationAddress.balance -
    // Global.currentApplicationAddress.minBalance -
    // new UintN64(this.allDeposits(assetId).value.native).native
    -
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:257-260
    // const maxWithdrawableBalance: uint64 =
    //   Global.currentApplicationAddress.balance -
    //   Global.currentApplicationAddress.minBalance -
    //   new UintN64(this.allDeposits(assetId).value.native).native
    dup
    frame_bury 4
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:261
    // assert(amount.native <= BigUint(maxWithdrawableBalance), 'maxWithdrawableBalance is less then requested')
    itob
    frame_dig -3
    b>=
    assert // maxWithdrawableBalance is less then requested
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:262
    // let toWidraw: uint64 = new UintN64(amount.native).native
    frame_dig -3
    b|
    btoi
    dup
    frame_bury 7
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:263
    // if (toWidraw === 0) {
    bnz withdraw_after_if_else@17
    frame_dig 4
    frame_bury 7

withdraw_after_if_else@17:
    frame_dig 7
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:267-274
    // itxn
    //   .payment({
    //     amount: new UintN64(toWidraw).native,
    //     receiver: receiver.native,
    //     note: 'admin withdrawal',
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:269
    // amount: new UintN64(toWidraw).native,
    itob
    btoi
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:271
    // note: 'admin withdrawal',
    bytec 11 // "admin withdrawal"
    itxn_field Note
    frame_dig -4
    itxn_field Receiver
    itxn_field Amount
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:267-273
    // itxn
    //   .payment({
    //     amount: new UintN64(toWidraw).native,
    //     receiver: receiver.native,
    //     note: 'admin withdrawal',
    //     fee: 0,
    //   })
    intc_2 // 1
    itxn_field TypeEnum
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:272
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:267-274
    // itxn
    //   .payment({
    //     amount: new UintN64(toWidraw).native,
    //     receiver: receiver.native,
    //     note: 'admin withdrawal',
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    retsub

withdraw_else_body@19:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:275
    // } else if (isArc200Token.native) {
    frame_dig -1
    intc_0 // 0
    getbit
    bz withdraw_else_body@22
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:290-297
    // itxn
    //   .applicationCall({
    //     appId: assetId.native,
    //     appArgs: [methodSelector('arc200_transfer(address,uint256)bool'), receiver, amount],
    //     fee: 0,
    //     note: 'admin withdrawal',
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:295
    // note: 'admin withdrawal',
    bytec 11 // "admin withdrawal"
    itxn_field Note
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:293
    // appArgs: [methodSelector('arc200_transfer(address,uint256)bool'), receiver, amount],
    bytec 10 // method "arc200_transfer(address,uint256)bool"
    itxn_field ApplicationArgs
    frame_dig -4
    itxn_field ApplicationArgs
    frame_dig -3
    itxn_field ApplicationArgs
    frame_dig 6
    itxn_field ApplicationID
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:290-296
    // itxn
    //   .applicationCall({
    //     appId: assetId.native,
    //     appArgs: [methodSelector('arc200_transfer(address,uint256)bool'), receiver, amount],
    //     fee: 0,
    //     note: 'admin withdrawal',
    //   })
    pushint 6 // 6
    itxn_field TypeEnum
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:294
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:290-297
    // itxn
    //   .applicationCall({
    //     appId: assetId.native,
    //     appArgs: [methodSelector('arc200_transfer(address,uint256)bool'), receiver, amount],
    //     fee: 0,
    //     note: 'admin withdrawal',
    //   })
    //   .submit()
    itxn_submit
    retsub

withdraw_else_body@22:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:300
    // const balance = Asset(assetId.native).balance(Global.currentApplicationAddress)
    global CurrentApplicationAddress
    frame_dig 6
    asset_holding_get AssetBalance
    assert // account opted into asset
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:143
    // public allDeposits = BoxMap<UintN64, UintN256>({ keyPrefix: 'd' })
    bytec 4 // "d"
    frame_dig -2
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:301
    // const maxWithdrawableBalance: uint64 = balance - new UintN64(this.allDeposits(assetId).value.native).native
    box_get
    assert // Box must have value
    intc_0 // 0
    assert // overflow
    intc_3 // 8
    bzero
    swap
    dig 1
    b|
    btoi
    uncover 2
    swap
    -
    dup
    frame_bury 5
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:302
    // assert(amount.native <= BigUint(maxWithdrawableBalance), 'maxWithdrawableBalance is less then requested')
    itob
    frame_dig -3
    b>=
    assert // maxWithdrawableBalance is less then requested
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:303
    // let toWidraw: uint64 = new UintN64(amount.native).native
    frame_dig -3
    b|
    btoi
    dup
    frame_bury 8
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:304
    // if (toWidraw === 0) {
    bnz withdraw_after_if_else@24
    frame_dig 5
    frame_bury 8

withdraw_after_if_else@24:
    frame_dig 8
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:308-316
    // itxn
    //   .assetTransfer({
    //     xferAsset: assetId.native,
    //     assetAmount: new UintN64(toWidraw).native,
    //     assetReceiver: receiver.native,
    //     note: 'admin withdrawal',
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:311
    // assetAmount: new UintN64(toWidraw).native,
    itob
    btoi
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:313
    // note: 'admin withdrawal',
    bytec 11 // "admin withdrawal"
    itxn_field Note
    frame_dig -4
    itxn_field AssetReceiver
    itxn_field AssetAmount
    frame_dig 6
    itxn_field XferAsset
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:308-315
    // itxn
    //   .assetTransfer({
    //     xferAsset: assetId.native,
    //     assetAmount: new UintN64(toWidraw).native,
    //     assetReceiver: receiver.native,
    //     note: 'admin withdrawal',
    //     fee: 0,
    //   })
    pushint 4 // 4
    itxn_field TypeEnum
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:314
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:308-316
    // itxn
    //   .assetTransfer({
    //     xferAsset: assetId.native,
    //     assetAmount: new UintN64(toWidraw).native,
    //     assetReceiver: receiver.native,
    //     note: 'admin withdrawal',
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    retsub


// smart_contracts/avm_satoshi_dice/contract.algo.ts::AvmSatoshiDice.CreateGameWithNativeToken(txnDeposit: uint64, winRatio: bytes) -> void:
CreateGameWithNativeToken:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:330-331
    // @arc4.abimethod()
    // public CreateGameWithNativeToken(txnDeposit: gtxn.PaymentTxn, winRatio: UintN64): void {
    proto 2 0
    intc_0 // 0
    dup
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:332
    // const sender = new arc4.Address(txnDeposit.sender)
    frame_dig -2
    gtxns Sender
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:334
    // assert(winRatio.native <= 1_000_000, 'Win probability must be below 1 000 000')
    frame_dig -1
    btoi
    intc 4 // 1000000
    <=
    assert // Win probability must be below 1 000 000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:336
    // const fee: uint64 = txnDeposit.amount / 40 //2.5%
    frame_dig -2
    gtxns Amount
    dup
    pushint 40 // 40
    /
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:337
    // const deposit: uint64 = txnDeposit.amount - fee
    -
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:338
    // let prevDeposit: UintN256 = new UintN256(0)
    bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:143
    // public allDeposits = BoxMap<UintN64, UintN256>({ keyPrefix: 'd' })
    bytec 5 // 0x640000000000000000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:339
    // if (this.allDeposits(assetId).exists) {
    box_len
    bury 1
    bz CreateGameWithNativeToken_after_if_else@2
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:143
    // public allDeposits = BoxMap<UintN64, UintN256>({ keyPrefix: 'd' })
    bytec 5 // 0x640000000000000000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:340
    // prevDeposit = this.allDeposits(assetId).value
    box_get
    swap
    frame_bury 4
    assert // Box must have value

CreateGameWithNativeToken_after_if_else@2:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:343
    // this.allDeposits(assetId).value = new UintN256(prevDeposit.native + BigUint(deposit))
    frame_dig 3
    itob
    dup
    frame_bury 1
    frame_dig 4
    b+
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    intc_1 // 32
    bzero
    dup
    frame_bury 0
    b|
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:143
    // public allDeposits = BoxMap<UintN64, UintN256>({ keyPrefix: 'd' })
    bytec 5 // 0x640000000000000000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:343
    // this.allDeposits(assetId).value = new UintN256(prevDeposit.native + BigUint(deposit))
    swap
    box_put
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:345
    // assert(txnDeposit.receiver === Global.currentApplicationAddress, 'Receiver must be the gas station app')
    frame_dig -2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert // Receiver must be the gas station app
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:333
    // const assetId = new UintN64(0)
    bytec_2 // 0x0000000000000000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:347-350
    // const key = new AddressAssetStruct({
    //   assetId: assetId,
    //   owner: sender,
    // })
    frame_dig 2
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:141
    // public games = BoxMap<AddressAssetStruct, GameStruct>({ keyPrefix: 'g' })
    bytec_3 // "g"
    swap
    concat
    dup
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:351
    // if (this.games(key).exists) {
    box_len
    bury 1
    bz CreateGameWithNativeToken_else_body@4
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:352
    // assert(this.games(key).value.isNativeToken === new Bool(true), 'The previous game was not for the native token')
    dup
    box_get
    assert // Box must have value
    intc 7 // 320
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec 8 // 0x80
    ==
    assert // The previous game was not for the native token
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:353
    // assert(this.games(key).value.isASAToken === new Bool(false), 'The previous game was ASA token')
    dup
    box_get
    assert // Box must have value
    intc 5 // 321
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x00
    ==
    assert // The previous game was ASA token
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:354
    // assert(this.games(key).value.assetId === assetId, 'The previous game was not for the native token')
    dup
    box_get
    assert // Box must have value
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:333
    // const assetId = new UintN64(0)
    bytec_2 // 0x0000000000000000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:354
    // assert(this.games(key).value.assetId === assetId, 'The previous game was not for the native token')
    ==
    assert // The previous game was not for the native token
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:357
    // const oldBalance = this.games(key).value.balance
    dup
    box_get
    assert // Box must have value
    extract 0 32 // on error: Index access is out of bounds
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:358
    // this.games(key).value.balance = new UintN256(oldBalance.native + BigUint(deposit))
    frame_dig 1
    b+
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    frame_dig 0
    b|
    dig 1
    box_get
    assert // Box must have value
    swap
    replace2 0
    dig 1
    swap
    box_put
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:359
    // this.games(key).value.winRatio = winRatio
    dup
    box_get
    assert // Box must have value
    frame_dig -1
    replace2 129
    box_put
    retsub

CreateGameWithNativeToken_else_body@4:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:363
    // balance: new UintN256(BigUint(deposit)),
    frame_dig 1
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    frame_dig 0
    b|
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:333
    // const assetId = new UintN64(0)
    bytec_2 // 0x0000000000000000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:362-377
    // const newValue = new GameStruct({
    //   balance: new UintN256(BigUint(deposit)),
    //   assetId: assetId,
    //   isArc200Token: new Bool(false),
    //   isNativeToken: new Bool(true),
    //   isASAToken: new Bool(false),
    // 
    //   lastPlayedTime: new UintN64(0),
    //   lastWinTime: new UintN64(0),
    //   lastWinAmount: new UintN256(0),
    //   biggestWinAmount: new UintN256(0),
    //   biggestWinTime: new UintN64(0),
    // 
    //   winRatio: winRatio,
    //   owner: sender,
    // })
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:366
    // isNativeToken: new Bool(true),
    bytec 8 // 0x80
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:362-377
    // const newValue = new GameStruct({
    //   balance: new UintN256(BigUint(deposit)),
    //   assetId: assetId,
    //   isArc200Token: new Bool(false),
    //   isNativeToken: new Bool(true),
    //   isASAToken: new Bool(false),
    // 
    //   lastPlayedTime: new UintN64(0),
    //   lastWinTime: new UintN64(0),
    //   lastWinAmount: new UintN256(0),
    //   biggestWinAmount: new UintN256(0),
    //   biggestWinTime: new UintN64(0),
    // 
    //   winRatio: winRatio,
    //   owner: sender,
    // })
    concat
    intc 5 // 321
    intc_0 // 0
    setbit
    intc 6 // 322
    intc_0 // 0
    setbit
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:369
    // lastPlayedTime: new UintN64(0),
    bytec_2 // 0x0000000000000000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:362-377
    // const newValue = new GameStruct({
    //   balance: new UintN256(BigUint(deposit)),
    //   assetId: assetId,
    //   isArc200Token: new Bool(false),
    //   isNativeToken: new Bool(true),
    //   isASAToken: new Bool(false),
    // 
    //   lastPlayedTime: new UintN64(0),
    //   lastWinTime: new UintN64(0),
    //   lastWinAmount: new UintN256(0),
    //   biggestWinAmount: new UintN256(0),
    //   biggestWinTime: new UintN64(0),
    // 
    //   winRatio: winRatio,
    //   owner: sender,
    // })
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:370
    // lastWinTime: new UintN64(0),
    bytec_2 // 0x0000000000000000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:362-377
    // const newValue = new GameStruct({
    //   balance: new UintN256(BigUint(deposit)),
    //   assetId: assetId,
    //   isArc200Token: new Bool(false),
    //   isNativeToken: new Bool(true),
    //   isASAToken: new Bool(false),
    // 
    //   lastPlayedTime: new UintN64(0),
    //   lastWinTime: new UintN64(0),
    //   lastWinAmount: new UintN256(0),
    //   biggestWinAmount: new UintN256(0),
    //   biggestWinTime: new UintN64(0),
    // 
    //   winRatio: winRatio,
    //   owner: sender,
    // })
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:371
    // lastWinAmount: new UintN256(0),
    bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:362-377
    // const newValue = new GameStruct({
    //   balance: new UintN256(BigUint(deposit)),
    //   assetId: assetId,
    //   isArc200Token: new Bool(false),
    //   isNativeToken: new Bool(true),
    //   isASAToken: new Bool(false),
    // 
    //   lastPlayedTime: new UintN64(0),
    //   lastWinTime: new UintN64(0),
    //   lastWinAmount: new UintN256(0),
    //   biggestWinAmount: new UintN256(0),
    //   biggestWinTime: new UintN64(0),
    // 
    //   winRatio: winRatio,
    //   owner: sender,
    // })
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:373
    // biggestWinTime: new UintN64(0),
    bytec_2 // 0x0000000000000000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:362-377
    // const newValue = new GameStruct({
    //   balance: new UintN256(BigUint(deposit)),
    //   assetId: assetId,
    //   isArc200Token: new Bool(false),
    //   isNativeToken: new Bool(true),
    //   isASAToken: new Bool(false),
    // 
    //   lastPlayedTime: new UintN64(0),
    //   lastWinTime: new UintN64(0),
    //   lastWinAmount: new UintN256(0),
    //   biggestWinAmount: new UintN256(0),
    //   biggestWinTime: new UintN64(0),
    // 
    //   winRatio: winRatio,
    //   owner: sender,
    // })
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:372
    // biggestWinAmount: new UintN256(0),
    bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:362-377
    // const newValue = new GameStruct({
    //   balance: new UintN256(BigUint(deposit)),
    //   assetId: assetId,
    //   isArc200Token: new Bool(false),
    //   isNativeToken: new Bool(true),
    //   isASAToken: new Bool(false),
    // 
    //   lastPlayedTime: new UintN64(0),
    //   lastWinTime: new UintN64(0),
    //   lastWinAmount: new UintN256(0),
    //   biggestWinAmount: new UintN256(0),
    //   biggestWinTime: new UintN64(0),
    // 
    //   winRatio: winRatio,
    //   owner: sender,
    // })
    concat
    frame_dig -1
    concat
    frame_dig 2
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:378
    // this.games(key).value = newValue.copy()
    box_put
    retsub


// smart_contracts/avm_satoshi_dice/contract.algo.ts::AvmSatoshiDice.OptInToASA(txnDeposit: uint64, assetId: bytes) -> void:
OptInToASA:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:387-388
    // @arc4.abimethod()
    // public OptInToASA(txnDeposit: gtxn.PaymentTxn, assetId: UintN64) {
    proto 2 0
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:390
    // txnDeposit.receiver === Global.currentApplicationAddress,
    frame_dig -2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:389-392
    // assert(
    //   txnDeposit.receiver === Global.currentApplicationAddress,
    //   'Receiver of the optin fee must be the current smart contract',
    // )
    assert // Receiver of the optin fee must be the current smart contract
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:393
    // assert(txnDeposit.amount === 10_000_000, 'Opt in fee for new asset is 10 native tokens')
    frame_dig -2
    gtxns Amount
    pushint 10000000 // 10000000
    ==
    assert // Opt in fee for new asset is 10 native tokens
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:395
    // if (!Global.currentApplicationAddress.isOptedIn(Asset(assetId.native))) {
    global CurrentApplicationAddress
    frame_dig -1
    btoi
    dup
    cover 2
    asset_holding_get AssetBalance
    bury 1
    bnz OptInToASA_after_if_else@3
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:396-403
    // itxn
    //   .assetTransfer({
    //     xferAsset: assetId.native,
    //     assetAmount: 0,
    //     assetReceiver: Global.currentApplicationAddress,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:400
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    itxn_field AssetReceiver
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:399
    // assetAmount: 0,
    intc_0 // 0
    itxn_field AssetAmount
    frame_dig 0
    itxn_field XferAsset
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:396-402
    // itxn
    //   .assetTransfer({
    //     xferAsset: assetId.native,
    //     assetAmount: 0,
    //     assetReceiver: Global.currentApplicationAddress,
    //     fee: 0,
    //   })
    pushint 4 // 4
    itxn_field TypeEnum
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:401
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:396-403
    // itxn
    //   .assetTransfer({
    //     xferAsset: assetId.native,
    //     assetAmount: 0,
    //     assetReceiver: Global.currentApplicationAddress,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit

OptInToASA_after_if_else@3:
    retsub


// smart_contracts/avm_satoshi_dice/contract.algo.ts::AvmSatoshiDice.CreateGameWithASAToken(txnDeposit: uint64, winRatio: bytes) -> void:
CreateGameWithASAToken:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:413-414
    // @arc4.abimethod()
    // public CreateGameWithASAToken(txnDeposit: gtxn.AssetTransferTxn, winRatio: UintN64): void {
    proto 2 0
    intc_0 // 0
    dup
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:415
    // const sender = new arc4.Address(txnDeposit.sender)
    frame_dig -2
    gtxns Sender
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:416
    // assert(winRatio.native <= 1_000_000, 'Win probability must be below 1 000 000')
    frame_dig -1
    btoi
    intc 4 // 1000000
    <=
    assert // Win probability must be below 1 000 000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:417
    // const assetId = new UintN64(txnDeposit.xferAsset.id)
    frame_dig -2
    gtxns XferAsset
    itob
    dup
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:419
    // const fee: uint64 = txnDeposit.assetAmount / 40 //2.5%
    frame_dig -2
    gtxns AssetAmount
    dup
    pushint 40 // 40
    /
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:420
    // const deposit: uint64 = txnDeposit.assetAmount - fee
    -
    swap
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:421
    // let prevDeposit: UintN256 = new UintN256(0)
    bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000
    swap
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:143
    // public allDeposits = BoxMap<UintN64, UintN256>({ keyPrefix: 'd' })
    bytec 4 // "d"
    swap
    concat
    dup
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:422
    // if (this.allDeposits(assetId).exists) {
    box_len
    bury 1
    bz CreateGameWithASAToken_after_if_else@2
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:423
    // prevDeposit = this.allDeposits(assetId).value
    frame_dig 6
    box_get
    swap
    frame_bury 5
    assert // Box must have value

CreateGameWithASAToken_after_if_else@2:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:426
    // this.allDeposits(assetId).value = new UintN256(prevDeposit.native + BigUint(deposit))
    frame_dig 4
    itob
    dup
    frame_bury 1
    frame_dig 5
    b+
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    intc_1 // 32
    bzero
    dup
    frame_bury 0
    b|
    frame_dig 6
    swap
    box_put
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:428
    // assert(txnDeposit.assetReceiver === Global.currentApplicationAddress, 'Receiver must be the gas station app')
    frame_dig -2
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    assert // Receiver must be the gas station app
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:430-433
    // const key = new AddressAssetStruct({
    //   assetId: assetId,
    //   owner: sender,
    // })
    frame_dig 3
    frame_dig 2
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:141
    // public games = BoxMap<AddressAssetStruct, GameStruct>({ keyPrefix: 'g' })
    bytec_3 // "g"
    swap
    concat
    dup
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:434
    // if (this.games(key).exists) {
    box_len
    bury 1
    bz CreateGameWithASAToken_else_body@4
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:435
    // assert(this.games(key).value.isNativeToken === new Bool(false), 'The previous game was for the native token')
    dup
    box_get
    assert // Box must have value
    intc 7 // 320
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x00
    ==
    assert // The previous game was for the native token
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:436
    // assert(this.games(key).value.isArc200Token === new Bool(false), 'The previous game was for the arc200 token')
    dup
    box_get
    assert // Box must have value
    intc 6 // 322
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x00
    ==
    assert // The previous game was for the arc200 token
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:437
    // assert(this.games(key).value.isASAToken === new Bool(true), 'The previous game was not for the ASA token')
    dup
    box_get
    assert // Box must have value
    intc 5 // 321
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec 8 // 0x80
    ==
    assert // The previous game was not for the ASA token
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:438
    // assert(this.games(key).value.assetId === assetId, 'The previous game was not for the same token')
    dup
    box_get
    assert // Box must have value
    extract 32 8 // on error: Index access is out of bounds
    frame_dig 3
    ==
    assert // The previous game was not for the same token
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:441
    // const oldBalance = this.games(key).value.balance
    dup
    box_get
    assert // Box must have value
    extract 0 32 // on error: Index access is out of bounds
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:442
    // this.games(key).value.balance = new UintN256(oldBalance.native + BigUint(deposit))
    frame_dig 1
    b+
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    frame_dig 0
    b|
    dig 1
    box_get
    assert // Box must have value
    swap
    replace2 0
    dig 1
    swap
    box_put
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:443
    // this.games(key).value.winRatio = winRatio
    dup
    box_get
    assert // Box must have value
    frame_dig -1
    replace2 129
    box_put
    retsub

CreateGameWithASAToken_else_body@4:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:447
    // balance: new UintN256(BigUint(deposit)),
    frame_dig 1
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    frame_dig 0
    b|
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:446-461
    // const newValue = new GameStruct({
    //   balance: new UintN256(BigUint(deposit)),
    //   assetId: assetId,
    //   isArc200Token: new Bool(false),
    //   isNativeToken: new Bool(false),
    //   isASAToken: new Bool(true),
    // 
    //   lastPlayedTime: new UintN64(0),
    //   lastWinTime: new UintN64(0),
    //   lastWinAmount: new UintN256(0),
    //   biggestWinAmount: new UintN256(0),
    //   biggestWinTime: new UintN64(0),
    // 
    //   winRatio: winRatio,
    //   owner: sender,
    // })
    frame_dig 3
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:450
    // isNativeToken: new Bool(false),
    bytec_0 // 0x00
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:446-461
    // const newValue = new GameStruct({
    //   balance: new UintN256(BigUint(deposit)),
    //   assetId: assetId,
    //   isArc200Token: new Bool(false),
    //   isNativeToken: new Bool(false),
    //   isASAToken: new Bool(true),
    // 
    //   lastPlayedTime: new UintN64(0),
    //   lastWinTime: new UintN64(0),
    //   lastWinAmount: new UintN256(0),
    //   biggestWinAmount: new UintN256(0),
    //   biggestWinTime: new UintN64(0),
    // 
    //   winRatio: winRatio,
    //   owner: sender,
    // })
    concat
    intc 5 // 321
    intc_2 // 1
    setbit
    intc 6 // 322
    intc_0 // 0
    setbit
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:453
    // lastPlayedTime: new UintN64(0),
    bytec_2 // 0x0000000000000000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:446-461
    // const newValue = new GameStruct({
    //   balance: new UintN256(BigUint(deposit)),
    //   assetId: assetId,
    //   isArc200Token: new Bool(false),
    //   isNativeToken: new Bool(false),
    //   isASAToken: new Bool(true),
    // 
    //   lastPlayedTime: new UintN64(0),
    //   lastWinTime: new UintN64(0),
    //   lastWinAmount: new UintN256(0),
    //   biggestWinAmount: new UintN256(0),
    //   biggestWinTime: new UintN64(0),
    // 
    //   winRatio: winRatio,
    //   owner: sender,
    // })
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:454
    // lastWinTime: new UintN64(0),
    bytec_2 // 0x0000000000000000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:446-461
    // const newValue = new GameStruct({
    //   balance: new UintN256(BigUint(deposit)),
    //   assetId: assetId,
    //   isArc200Token: new Bool(false),
    //   isNativeToken: new Bool(false),
    //   isASAToken: new Bool(true),
    // 
    //   lastPlayedTime: new UintN64(0),
    //   lastWinTime: new UintN64(0),
    //   lastWinAmount: new UintN256(0),
    //   biggestWinAmount: new UintN256(0),
    //   biggestWinTime: new UintN64(0),
    // 
    //   winRatio: winRatio,
    //   owner: sender,
    // })
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:455
    // lastWinAmount: new UintN256(0),
    bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:446-461
    // const newValue = new GameStruct({
    //   balance: new UintN256(BigUint(deposit)),
    //   assetId: assetId,
    //   isArc200Token: new Bool(false),
    //   isNativeToken: new Bool(false),
    //   isASAToken: new Bool(true),
    // 
    //   lastPlayedTime: new UintN64(0),
    //   lastWinTime: new UintN64(0),
    //   lastWinAmount: new UintN256(0),
    //   biggestWinAmount: new UintN256(0),
    //   biggestWinTime: new UintN64(0),
    // 
    //   winRatio: winRatio,
    //   owner: sender,
    // })
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:457
    // biggestWinTime: new UintN64(0),
    bytec_2 // 0x0000000000000000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:446-461
    // const newValue = new GameStruct({
    //   balance: new UintN256(BigUint(deposit)),
    //   assetId: assetId,
    //   isArc200Token: new Bool(false),
    //   isNativeToken: new Bool(false),
    //   isASAToken: new Bool(true),
    // 
    //   lastPlayedTime: new UintN64(0),
    //   lastWinTime: new UintN64(0),
    //   lastWinAmount: new UintN256(0),
    //   biggestWinAmount: new UintN256(0),
    //   biggestWinTime: new UintN64(0),
    // 
    //   winRatio: winRatio,
    //   owner: sender,
    // })
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:456
    // biggestWinAmount: new UintN256(0),
    bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:446-461
    // const newValue = new GameStruct({
    //   balance: new UintN256(BigUint(deposit)),
    //   assetId: assetId,
    //   isArc200Token: new Bool(false),
    //   isNativeToken: new Bool(false),
    //   isASAToken: new Bool(true),
    // 
    //   lastPlayedTime: new UintN64(0),
    //   lastWinTime: new UintN64(0),
    //   lastWinAmount: new UintN256(0),
    //   biggestWinAmount: new UintN256(0),
    //   biggestWinTime: new UintN64(0),
    // 
    //   winRatio: winRatio,
    //   owner: sender,
    // })
    concat
    frame_dig -1
    concat
    frame_dig 2
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:462
    // this.games(key).value = newValue.copy()
    box_put
    retsub


// smart_contracts/avm_satoshi_dice/contract.algo.ts::AvmSatoshiDice.CreateGameWithArc200Token(assetId: bytes, amount: bytes, winRatio: bytes) -> void:
CreateGameWithArc200Token:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:472-473
    // @arc4.abimethod()
    // public CreateGameWithArc200Token(assetId: UintN64, amount: UintN256, winRatio: UintN64): void {
    proto 3 0
    intc_0 // 0
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:474
    // const sender = new arc4.Address(Txn.sender)
    txn Sender
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:475
    // assert(winRatio.native <= 1_000_000, 'Win probability must be below 1 000 000')
    frame_dig -1
    btoi
    intc 4 // 1000000
    <=
    assert // Win probability must be below 1 000 000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:477
    // const fee: biguint = amount.native / BigUint(40) //2.5%
    frame_dig -2
    pushbytes 0x28
    b/
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:478
    // const deposit: biguint = amount.native - fee
    frame_dig -2
    swap
    b-
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:479
    // let prevDeposit: UintN256 = new UintN256(0)
    bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:143
    // public allDeposits = BoxMap<UintN64, UintN256>({ keyPrefix: 'd' })
    bytec 4 // "d"
    frame_dig -3
    concat
    dup
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:480
    // if (this.allDeposits(assetId).exists) {
    box_len
    bury 1
    bz CreateGameWithArc200Token_after_if_else@2
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:481
    // prevDeposit = this.allDeposits(assetId).value
    frame_dig 4
    box_get
    swap
    frame_bury 3
    assert // Box must have value

CreateGameWithArc200Token_after_if_else@2:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:484
    // this.allDeposits(assetId).value = new UintN256(prevDeposit.native + BigUint(deposit))
    frame_dig 3
    frame_dig 2
    b+
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    intc_1 // 32
    bzero
    dup
    frame_bury 0
    b|
    frame_dig 4
    swap
    box_put
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:487-497
    // itxn
    //   .applicationCall({
    //     appId: assetId.native,
    //     appArgs: [
    //       methodSelector('arc200_transferFrom(address,address,uint256)bool'),
    //       new Address(Txn.sender),
    //       new Address(Global.currentApplicationAddress),
    //       amount,
    //     ],
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:489
    // appId: assetId.native,
    frame_dig -3
    btoi
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:492
    // new Address(Txn.sender),
    txn Sender
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:493
    // new Address(Global.currentApplicationAddress),
    global CurrentApplicationAddress
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:491
    // methodSelector('arc200_transferFrom(address,address,uint256)bool'),
    bytec 15 // method "arc200_transferFrom(address,address,uint256)bool"
    itxn_field ApplicationArgs
    swap
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    frame_dig -2
    itxn_field ApplicationArgs
    itxn_field ApplicationID
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:487-496
    // itxn
    //   .applicationCall({
    //     appId: assetId.native,
    //     appArgs: [
    //       methodSelector('arc200_transferFrom(address,address,uint256)bool'),
    //       new Address(Txn.sender),
    //       new Address(Global.currentApplicationAddress),
    //       amount,
    //     ],
    //   })
    pushint 6 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:487-497
    // itxn
    //   .applicationCall({
    //     appId: assetId.native,
    //     appArgs: [
    //       methodSelector('arc200_transferFrom(address,address,uint256)bool'),
    //       new Address(Txn.sender),
    //       new Address(Global.currentApplicationAddress),
    //       amount,
    //     ],
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:499-502
    // const key = new AddressAssetStruct({
    //   assetId: assetId,
    //   owner: sender,
    // })
    frame_dig -3
    frame_dig 1
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:141
    // public games = BoxMap<AddressAssetStruct, GameStruct>({ keyPrefix: 'g' })
    bytec_3 // "g"
    swap
    concat
    dup
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:503
    // if (this.games(key).exists) {
    box_len
    bury 1
    bz CreateGameWithArc200Token_else_body@5
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:504
    // assert(this.games(key).value.isNativeToken === new Bool(false), 'The previous game was for the native token')
    dup
    box_get
    assert // Box must have value
    intc 7 // 320
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x00
    ==
    assert // The previous game was for the native token
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:505
    // assert(this.games(key).value.isArc200Token === new Bool(true), 'The previous game was NOT for the arc200 token')
    dup
    box_get
    assert // Box must have value
    intc 6 // 322
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec 8 // 0x80
    ==
    assert // The previous game was NOT for the arc200 token
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:506
    // assert(this.games(key).value.isASAToken === new Bool(false), 'The previous game was for the ASA token')
    dup
    box_get
    assert // Box must have value
    intc 5 // 321
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x00
    ==
    assert // The previous game was for the ASA token
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:507
    // assert(this.games(key).value.assetId === assetId, 'The previous game was not for the same token')
    dup
    box_get
    assert // Box must have value
    extract 32 8 // on error: Index access is out of bounds
    frame_dig -3
    ==
    assert // The previous game was not for the same token
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:510
    // const oldBalance = this.games(key).value.balance
    dup
    box_get
    assert // Box must have value
    extract 0 32 // on error: Index access is out of bounds
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:511
    // this.games(key).value.balance = new UintN256(oldBalance.native + BigUint(deposit))
    frame_dig 2
    b+
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    frame_dig 0
    b|
    dig 1
    box_get
    assert // Box must have value
    swap
    replace2 0
    dig 1
    swap
    box_put
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:512
    // this.games(key).value.winRatio = winRatio
    dup
    box_get
    assert // Box must have value
    frame_dig -1
    replace2 129
    box_put
    retsub

CreateGameWithArc200Token_else_body@5:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:516
    // balance: new UintN256(deposit),
    frame_dig 2
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    frame_dig 0
    b|
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:515-530
    // const newValue = new GameStruct({
    //   balance: new UintN256(deposit),
    //   assetId: assetId,
    //   isArc200Token: new Bool(true),
    //   isNativeToken: new Bool(false),
    //   isASAToken: new Bool(false),
    // 
    //   lastPlayedTime: new UintN64(0),
    //   lastWinTime: new UintN64(0),
    //   lastWinAmount: new UintN256(0),
    //   biggestWinAmount: new UintN256(0),
    //   biggestWinTime: new UintN64(0),
    // 
    //   winRatio: winRatio,
    //   owner: sender,
    // })
    frame_dig -3
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:519
    // isNativeToken: new Bool(false),
    bytec_0 // 0x00
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:515-530
    // const newValue = new GameStruct({
    //   balance: new UintN256(deposit),
    //   assetId: assetId,
    //   isArc200Token: new Bool(true),
    //   isNativeToken: new Bool(false),
    //   isASAToken: new Bool(false),
    // 
    //   lastPlayedTime: new UintN64(0),
    //   lastWinTime: new UintN64(0),
    //   lastWinAmount: new UintN256(0),
    //   biggestWinAmount: new UintN256(0),
    //   biggestWinTime: new UintN64(0),
    // 
    //   winRatio: winRatio,
    //   owner: sender,
    // })
    concat
    intc 5 // 321
    intc_0 // 0
    setbit
    intc 6 // 322
    intc_2 // 1
    setbit
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:522
    // lastPlayedTime: new UintN64(0),
    bytec_2 // 0x0000000000000000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:515-530
    // const newValue = new GameStruct({
    //   balance: new UintN256(deposit),
    //   assetId: assetId,
    //   isArc200Token: new Bool(true),
    //   isNativeToken: new Bool(false),
    //   isASAToken: new Bool(false),
    // 
    //   lastPlayedTime: new UintN64(0),
    //   lastWinTime: new UintN64(0),
    //   lastWinAmount: new UintN256(0),
    //   biggestWinAmount: new UintN256(0),
    //   biggestWinTime: new UintN64(0),
    // 
    //   winRatio: winRatio,
    //   owner: sender,
    // })
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:523
    // lastWinTime: new UintN64(0),
    bytec_2 // 0x0000000000000000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:515-530
    // const newValue = new GameStruct({
    //   balance: new UintN256(deposit),
    //   assetId: assetId,
    //   isArc200Token: new Bool(true),
    //   isNativeToken: new Bool(false),
    //   isASAToken: new Bool(false),
    // 
    //   lastPlayedTime: new UintN64(0),
    //   lastWinTime: new UintN64(0),
    //   lastWinAmount: new UintN256(0),
    //   biggestWinAmount: new UintN256(0),
    //   biggestWinTime: new UintN64(0),
    // 
    //   winRatio: winRatio,
    //   owner: sender,
    // })
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:524
    // lastWinAmount: new UintN256(0),
    bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:515-530
    // const newValue = new GameStruct({
    //   balance: new UintN256(deposit),
    //   assetId: assetId,
    //   isArc200Token: new Bool(true),
    //   isNativeToken: new Bool(false),
    //   isASAToken: new Bool(false),
    // 
    //   lastPlayedTime: new UintN64(0),
    //   lastWinTime: new UintN64(0),
    //   lastWinAmount: new UintN256(0),
    //   biggestWinAmount: new UintN256(0),
    //   biggestWinTime: new UintN64(0),
    // 
    //   winRatio: winRatio,
    //   owner: sender,
    // })
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:526
    // biggestWinTime: new UintN64(0),
    bytec_2 // 0x0000000000000000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:515-530
    // const newValue = new GameStruct({
    //   balance: new UintN256(deposit),
    //   assetId: assetId,
    //   isArc200Token: new Bool(true),
    //   isNativeToken: new Bool(false),
    //   isASAToken: new Bool(false),
    // 
    //   lastPlayedTime: new UintN64(0),
    //   lastWinTime: new UintN64(0),
    //   lastWinAmount: new UintN256(0),
    //   biggestWinAmount: new UintN256(0),
    //   biggestWinTime: new UintN64(0),
    // 
    //   winRatio: winRatio,
    //   owner: sender,
    // })
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:525
    // biggestWinAmount: new UintN256(0),
    bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:515-530
    // const newValue = new GameStruct({
    //   balance: new UintN256(deposit),
    //   assetId: assetId,
    //   isArc200Token: new Bool(true),
    //   isNativeToken: new Bool(false),
    //   isASAToken: new Bool(false),
    // 
    //   lastPlayedTime: new UintN64(0),
    //   lastWinTime: new UintN64(0),
    //   lastWinAmount: new UintN256(0),
    //   biggestWinAmount: new UintN256(0),
    //   biggestWinTime: new UintN64(0),
    // 
    //   winRatio: winRatio,
    //   owner: sender,
    // })
    concat
    frame_dig -1
    concat
    frame_dig 1
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:531
    // this.games(key).value = newValue.copy()
    box_put
    retsub


// smart_contracts/avm_satoshi_dice/contract.algo.ts::AvmSatoshiDice.StartGameWithNativeToken(txnDeposit: uint64, game: bytes, winProbability: bytes) -> void:
StartGameWithNativeToken:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:543-548
    // @arc4.abimethod()
    // public StartGameWithNativeToken(
    //   txnDeposit: gtxn.PaymentTxn,
    //   game: AddressAssetStruct,
    //   winProbability: UintN64,
    // ): void {
    proto 3 0
    intc_0 // 0
    dup
    pushbytes ""
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:549
    // const sender = new arc4.Address(txnDeposit.sender)
    frame_dig -3
    gtxns Sender
    dup
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:551
    // assert(Txn.sender === txnDeposit.sender, 'Sender of the app call must be the same as sender of the deposit')
    txn Sender
    dig 1
    ==
    assert // Sender of the app call must be the same as sender of the deposit
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:552
    // assert(game.assetId === assetId, 'Asset id in the tx does not match the game asset id')
    frame_dig -2
    extract 0 8 // on error: Index access is out of bounds
    dup
    cover 2
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:550
    // const assetId = new UintN64(0)
    bytec_2 // 0x0000000000000000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:552
    // assert(game.assetId === assetId, 'Asset id in the tx does not match the game asset id')
    ==
    assert // Asset id in the tx does not match the game asset id
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:141
    // public games = BoxMap<AddressAssetStruct, GameStruct>({ keyPrefix: 'g' })
    bytec_3 // "g"
    frame_dig -2
    concat
    dup
    cover 2
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:553
    // assert(this.games(game).exists, 'The game does not exist')
    dup
    box_len
    bury 1
    assert // The game does not exist
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:554
    // assert(this.games(game).value.assetId === assetId, 'This game must be played with native token')
    box_get
    assert // Box must have value
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:550
    // const assetId = new UintN64(0)
    bytec_2 // 0x0000000000000000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:554
    // assert(this.games(game).value.assetId === assetId, 'This game must be played with native token')
    ==
    assert // This game must be played with native token
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:555
    // assert(winProbability.native <= 1_000_000, 'Win probability must be below 1 000 000')
    frame_dig -1
    btoi
    dup
    cover 2
    intc 4 // 1000000
    <=
    assert // Win probability must be below 1 000 000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:142
    // public plays = BoxMap<Address, PlayStruct>({ keyPrefix: 'p' })
    bytec 6 // "p"
    swap
    concat
    dup
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:557
    // if (this.plays(sender).exists) {
    box_len
    bury 1
    bz StartGameWithNativeToken_after_if_else@3
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:559
    // assert(this.plays(sender).value.state.native > 1, 'Your previous game has not yet been claimed')
    frame_dig 7
    box_get
    assert // Box must have value
    intc_0 // 0
    extract_uint64
    intc_2 // 1
    >
    assert // Your previous game has not yet been claimed

StartGameWithNativeToken_after_if_else@3:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:568
    // const winAmount = new UintN256(BigUint((txnDeposit.amount * 1_000_000) / winProbability.native))
    frame_dig -3
    gtxns Amount
    dup
    frame_bury 2
    intc 4 // 1000000
    *
    frame_dig 6
    /
    itob
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    intc_1 // 32
    bzero
    dup
    frame_bury 0
    b|
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:570
    // this.games(game).value.balance.native >= winAmount.native,
    frame_dig 5
    box_get
    assert // Box must have value
    extract 0 32 // on error: Index access is out of bounds
    b<=
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:569-572
    // assert(
    //   this.games(game).value.balance.native >= winAmount.native,
    //   'The game does not have enough balance for your win scenario',
    // )
    assert // The game does not have enough balance for your win scenario
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:574
    // let prevDeposit: UintN256 = new UintN256(0)
    bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000
    frame_bury 1
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:143
    // public allDeposits = BoxMap<UintN64, UintN256>({ keyPrefix: 'd' })
    bytec 5 // 0x640000000000000000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:575
    // if (this.allDeposits(assetId).exists) {
    box_len
    bury 1
    bz StartGameWithNativeToken_after_if_else@5
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:143
    // public allDeposits = BoxMap<UintN64, UintN256>({ keyPrefix: 'd' })
    bytec 5 // 0x640000000000000000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:576
    // prevDeposit = this.allDeposits(assetId).value
    box_get
    swap
    frame_bury 1
    assert // Box must have value

StartGameWithNativeToken_after_if_else@5:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:578
    // this.allDeposits(assetId).value = new UintN256(prevDeposit.native + BigUint(txnDeposit.amount))
    frame_dig 2
    itob
    frame_dig 1
    dig 1
    b+
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    frame_dig 0
    dup
    cover 2
    b|
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:143
    // public allDeposits = BoxMap<UintN64, UintN256>({ keyPrefix: 'd' })
    bytec 5 // 0x640000000000000000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:578
    // this.allDeposits(assetId).value = new UintN256(prevDeposit.native + BigUint(txnDeposit.amount))
    swap
    box_put
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:581
    // round: new UintN64(Global.round),
    global Round
    itob
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:584
    // deposit: new UintN256(BigUint(txnDeposit.amount)),
    dig 2
    len
    intc_1 // 32
    <=
    assert // overflow
    cover 2
    b|
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:586
    // gameCreator: game.owner,
    frame_dig -2
    extract 8 32 // on error: Index access is out of bounds
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:582
    // state: new UintN64(1),
    bytec 12 // 0x0000000000000001
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:580-588
    // const newValue = new PlayStruct({
    //   round: new UintN64(Global.round),
    //   state: new UintN64(1),
    //   winProbability: winProbability,
    //   deposit: new UintN256(BigUint(txnDeposit.amount)),
    //   owner: sender,
    //   gameCreator: game.owner,
    //   assetId: game.assetId,
    // })
    frame_dig -1
    concat
    uncover 3
    concat
    uncover 2
    concat
    frame_dig 4
    concat
    swap
    concat
    frame_dig 3
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:590
    // this.plays(sender).value = newValue.copy()
    frame_dig 7
    swap
    box_put
    retsub


// smart_contracts/avm_satoshi_dice/contract.algo.ts::AvmSatoshiDice.StartGameWithASAToken(txnDeposit: uint64, game: bytes, winProbability: bytes) -> void:
StartGameWithASAToken:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:602-607
    // @arc4.abimethod()
    // public StartGameWithASAToken(
    //   txnDeposit: gtxn.AssetTransferTxn,
    //   game: AddressAssetStruct,
    //   winProbability: UintN64,
    // ): void {
    proto 3 0
    intc_0 // 0
    dupn 2
    pushbytes ""
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:608
    // const sender = new arc4.Address(txnDeposit.sender)
    frame_dig -3
    gtxns Sender
    dup
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:609
    // const assetId = new UintN64(txnDeposit.xferAsset.id)
    frame_dig -3
    gtxns XferAsset
    itob
    dup
    uncover 2
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:610
    // assert(Txn.sender === txnDeposit.sender, 'Sender of the app call must be the same as sender of the deposit')
    txn Sender
    dig 1
    ==
    assert // Sender of the app call must be the same as sender of the deposit
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:611
    // assert(game.assetId.native === assetId.native, 'Asset id in the tx does not match the game asset id')
    frame_dig -2
    extract 0 8 // on error: Index access is out of bounds
    cover 2
    frame_dig -2
    intc_0 // 0
    extract_uint64
    dig 2
    btoi
    ==
    assert // Asset id in the tx does not match the game asset id
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:141
    // public games = BoxMap<AddressAssetStruct, GameStruct>({ keyPrefix: 'g' })
    bytec_3 // "g"
    frame_dig -2
    concat
    dup
    cover 3
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:612
    // assert(this.games(game).exists, 'The game does not exist')
    dup
    box_len
    bury 1
    assert // The game does not exist
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:613
    // assert(this.games(game).value.assetId === assetId, 'This game must be played with native token')
    box_get
    assert // Box must have value
    extract 32 8 // on error: Index access is out of bounds
    uncover 2
    ==
    assert // This game must be played with native token
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:614
    // assert(winProbability.native <= 1_000_000, 'Win probability must be below 1 000 000')
    frame_dig -1
    btoi
    dup
    cover 2
    intc 4 // 1000000
    <=
    assert // Win probability must be below 1 000 000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:142
    // public plays = BoxMap<Address, PlayStruct>({ keyPrefix: 'p' })
    bytec 6 // "p"
    swap
    concat
    dup
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:616
    // if (this.plays(sender).exists) {
    box_len
    bury 1
    bz StartGameWithASAToken_after_if_else@3
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:618
    // assert(this.plays(sender).value.state.native > 1, 'Your previous game has not yet been claimed')
    frame_dig 9
    box_get
    assert // Box must have value
    intc_0 // 0
    extract_uint64
    intc_2 // 1
    >
    assert // Your previous game has not yet been claimed

StartGameWithASAToken_after_if_else@3:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:627
    // const winAmount = new UintN256(BigUint((txnDeposit.assetAmount * 1_000_000) / winProbability.native))
    frame_dig -3
    gtxns AssetAmount
    dup
    frame_bury 3
    intc 4 // 1000000
    *
    frame_dig 8
    /
    itob
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    intc_1 // 32
    bzero
    dup
    frame_bury 0
    b|
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:629
    // this.games(game).value.balance.native >= winAmount.native,
    frame_dig 7
    box_get
    assert // Box must have value
    extract 0 32 // on error: Index access is out of bounds
    b<=
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:628-631
    // assert(
    //   this.games(game).value.balance.native >= winAmount.native,
    //   'The game does not have enough balance for your win scenario',
    // )
    assert // The game does not have enough balance for your win scenario
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:633
    // let prevDeposit: UintN256 = new UintN256(0)
    bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000
    frame_bury 1
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:143
    // public allDeposits = BoxMap<UintN64, UintN256>({ keyPrefix: 'd' })
    bytec 4 // "d"
    frame_dig 5
    concat
    dup
    frame_bury 2
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:634
    // if (this.allDeposits(assetId).exists) {
    box_len
    bury 1
    bz StartGameWithASAToken_after_if_else@5
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:635
    // prevDeposit = this.allDeposits(assetId).value
    frame_dig 2
    box_get
    swap
    frame_bury 1
    assert // Box must have value

StartGameWithASAToken_after_if_else@5:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:637
    // this.allDeposits(assetId).value = new UintN256(prevDeposit.native + BigUint(txnDeposit.assetAmount))
    frame_dig 3
    itob
    frame_dig 1
    dig 1
    b+
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    frame_dig 0
    dup
    cover 2
    b|
    frame_dig 2
    swap
    box_put
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:640
    // round: new UintN64(Global.round),
    global Round
    itob
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:643
    // deposit: new UintN256(BigUint(txnDeposit.assetAmount)),
    dig 2
    len
    intc_1 // 32
    <=
    assert // overflow
    cover 2
    b|
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:645
    // gameCreator: game.owner,
    frame_dig -2
    extract 8 32 // on error: Index access is out of bounds
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:641
    // state: new UintN64(1),
    bytec 12 // 0x0000000000000001
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:639-647
    // const newValue = new PlayStruct({
    //   round: new UintN64(Global.round),
    //   state: new UintN64(1),
    //   winProbability: winProbability,
    //   deposit: new UintN256(BigUint(txnDeposit.assetAmount)),
    //   owner: sender,
    //   gameCreator: game.owner,
    //   assetId: game.assetId,
    // })
    frame_dig -1
    concat
    uncover 3
    concat
    uncover 2
    concat
    frame_dig 6
    concat
    swap
    concat
    frame_dig 4
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:649
    // this.plays(sender).value = newValue.copy()
    frame_dig 9
    swap
    box_put
    retsub


// smart_contracts/avm_satoshi_dice/contract.algo.ts::AvmSatoshiDice.StartGameWithArc200Token(amount: bytes, assetId: bytes, game: bytes, winProbability: bytes) -> void:
StartGameWithArc200Token:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:661-667
    // @arc4.abimethod()
    // public StartGameWithArc200Token(
    //   amount: UintN256,
    //   assetId: UintN64,
    //   game: AddressAssetStruct,
    //   winProbability: UintN64,
    // ): void {
    proto 4 0
    intc_0 // 0
    dupn 2
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:668
    // const sender = new arc4.Address(Txn.sender)
    txn Sender
    dup
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:669
    // assert(game.assetId === assetId, 'Asset id in the tx does not match the game asset id')
    frame_dig -2
    extract 0 8 // on error: Index access is out of bounds
    dup
    cover 2
    frame_dig -3
    ==
    assert // Asset id in the tx does not match the game asset id
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:141
    // public games = BoxMap<AddressAssetStruct, GameStruct>({ keyPrefix: 'g' })
    bytec_3 // "g"
    frame_dig -2
    concat
    dup
    cover 2
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:670
    // assert(this.games(game).exists, 'The game does not exist')
    dup
    box_len
    bury 1
    assert // The game does not exist
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:671
    // assert(this.games(game).value.assetId === assetId, 'This game must be played with native token')
    box_get
    assert // Box must have value
    extract 32 8 // on error: Index access is out of bounds
    frame_dig -3
    ==
    assert // This game must be played with native token
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:672
    // assert(winProbability.native <= 1_000_000, 'Win probability must be below 1 000 000')
    frame_dig -1
    btoi
    dup
    cover 2
    intc 4 // 1000000
    <=
    assert // Win probability must be below 1 000 000
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:142
    // public plays = BoxMap<Address, PlayStruct>({ keyPrefix: 'p' })
    bytec 6 // "p"
    swap
    concat
    dup
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:674
    // if (this.plays(sender).exists) {
    box_len
    bury 1
    bz StartGameWithArc200Token_after_if_else@3
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:676
    // assert(this.plays(sender).value.state.native > 1, 'Your previous game has not yet been claimed')
    frame_dig 7
    box_get
    assert // Box must have value
    intc_0 // 0
    extract_uint64
    intc_2 // 1
    >
    assert // Your previous game has not yet been claimed

StartGameWithArc200Token_after_if_else@3:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:686-696
    // itxn
    //   .applicationCall({
    //     appId: game.assetId.native,
    //     appArgs: [
    //       methodSelector('arc200_transferFrom(address,address,uint256)bool'),
    //       new Address(Txn.sender),
    //       new Address(Global.currentApplicationAddress),
    //       amount,
    //     ],
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:688
    // appId: game.assetId.native,
    frame_dig -2
    intc_0 // 0
    extract_uint64
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:691
    // new Address(Txn.sender),
    txn Sender
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:692
    // new Address(Global.currentApplicationAddress),
    global CurrentApplicationAddress
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:690
    // methodSelector('arc200_transferFrom(address,address,uint256)bool'),
    bytec 15 // method "arc200_transferFrom(address,address,uint256)bool"
    itxn_field ApplicationArgs
    swap
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    frame_dig -4
    itxn_field ApplicationArgs
    itxn_field ApplicationID
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:686-695
    // itxn
    //   .applicationCall({
    //     appId: game.assetId.native,
    //     appArgs: [
    //       methodSelector('arc200_transferFrom(address,address,uint256)bool'),
    //       new Address(Txn.sender),
    //       new Address(Global.currentApplicationAddress),
    //       amount,
    //     ],
    //   })
    pushint 6 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:686-696
    // itxn
    //   .applicationCall({
    //     appId: game.assetId.native,
    //     appArgs: [
    //       methodSelector('arc200_transferFrom(address,address,uint256)bool'),
    //       new Address(Txn.sender),
    //       new Address(Global.currentApplicationAddress),
    //       amount,
    //     ],
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:698
    // const winAmount = new UintN256((amount.native * BigUint(1_000_000)) / BigUint(winProbability.native))
    frame_dig -4
    bytec 13 // 0x0f4240
    b*
    frame_dig 6
    itob
    b/
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    intc_1 // 32
    bzero
    dup
    frame_bury 0
    b|
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:700
    // this.games(game).value.balance.native >= winAmount.native,
    frame_dig 5
    box_get
    assert // Box must have value
    extract 0 32 // on error: Index access is out of bounds
    b<=
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:699-702
    // assert(
    //   this.games(game).value.balance.native >= winAmount.native,
    //   'The game does not have enough balance for your win scenario',
    // )
    assert // The game does not have enough balance for your win scenario
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:704
    // let prevDeposit: UintN256 = new UintN256(0)
    bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000
    frame_bury 1
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:143
    // public allDeposits = BoxMap<UintN64, UintN256>({ keyPrefix: 'd' })
    bytec 4 // "d"
    frame_dig -3
    concat
    dup
    frame_bury 2
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:705
    // if (this.allDeposits(assetId).exists) {
    box_len
    bury 1
    bz StartGameWithArc200Token_after_if_else@6
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:706
    // prevDeposit = this.allDeposits(assetId).value
    frame_dig 2
    box_get
    swap
    frame_bury 1
    assert // Box must have value

StartGameWithArc200Token_after_if_else@6:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:708
    // this.allDeposits(assetId).value = new UintN256(prevDeposit.native + amount.native)
    frame_dig 1
    frame_dig -4
    b+
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    frame_dig 0
    dup
    cover 2
    b|
    frame_dig 2
    swap
    box_put
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:711
    // round: new UintN64(Global.round),
    global Round
    itob
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:714
    // deposit: new UintN256(amount.native),
    frame_dig -4
    uncover 2
    b|
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:716
    // gameCreator: game.owner,
    frame_dig -2
    extract 8 32 // on error: Index access is out of bounds
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:712
    // state: new UintN64(1),
    bytec 12 // 0x0000000000000001
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:710-718
    // const newValue = new PlayStruct({
    //   round: new UintN64(Global.round),
    //   state: new UintN64(1),
    //   winProbability: winProbability,
    //   deposit: new UintN256(amount.native),
    //   owner: sender,
    //   gameCreator: game.owner,
    //   assetId: game.assetId,
    // })
    frame_dig -1
    concat
    uncover 3
    concat
    uncover 2
    concat
    frame_dig 4
    concat
    swap
    concat
    frame_dig 3
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:720
    // this.plays(sender).value = newValue.copy()
    frame_dig 7
    swap
    box_put
    retsub


// smart_contracts/avm_satoshi_dice/contract.algo.ts::AvmSatoshiDice.Game(creator: bytes, assetId: bytes) -> bytes:
Game:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:728-729
    // @arc4.abimethod({ readonly: true })
    // public Game(creator: Address, assetId: UintN64): GameStruct {
    proto 2 1
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:730-733
    // const key = new AddressAssetStruct({
    //   assetId: assetId,
    //   owner: creator,
    // })
    frame_dig -1
    frame_dig -2
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:141
    // public games = BoxMap<AddressAssetStruct, GameStruct>({ keyPrefix: 'g' })
    bytec_3 // "g"
    swap
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:734
    // assert(this.games(key).exists, 'Did not found the game')
    dup
    box_len
    bury 1
    assert // Did not found the game
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:735
    // return this.games(key).value
    box_get
    assert // Box must have value
    retsub


// smart_contracts/avm_satoshi_dice/contract.algo.ts::AvmSatoshiDice.MyGame() -> bytes:
MyGame:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:142
    // public plays = BoxMap<Address, PlayStruct>({ keyPrefix: 'p' })
    bytec 6 // "p"
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:744
    // const sender = new arc4.Address(Txn.sender)
    txn Sender
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:142
    // public plays = BoxMap<Address, PlayStruct>({ keyPrefix: 'p' })
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:745
    // assert(this.plays(sender).exists, 'Did not found the game you are playing')
    dup
    box_len
    bury 1
    assert // Did not found the game you are playing
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:746
    // return this.plays(sender).value
    box_get
    assert // Box must have value
    retsub


// smart_contracts/avm_satoshi_dice/contract.algo.ts::AvmSatoshiDice.ClaimGame() -> void:
ClaimGame:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:756-757
    // @arc4.abimethod()
    // public ClaimGame(): void {
    proto 0 0
    intc_0 // 0
    dupn 9
    pushbytes ""
    dup
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:758
    // const sender = new arc4.Address(Txn.sender)
    txn Sender
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:142
    // public plays = BoxMap<Address, PlayStruct>({ keyPrefix: 'p' })
    bytec 6 // "p"
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:758
    // const sender = new arc4.Address(Txn.sender)
    txn Sender
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:142
    // public plays = BoxMap<Address, PlayStruct>({ keyPrefix: 'p' })
    concat
    dupn 2
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:759
    // assert(this.plays(sender).exists, 'Did not found the game you are playing')
    box_len
    bury 1
    assert // Did not found the game you are playing
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:760
    // const play = this.plays(sender).value.copy()
    box_get
    swap
    dup
    uncover 2
    assert // Box must have value
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:763
    // assetId: play.assetId,
    dup
    extract 56 8 // on error: Index access is out of bounds
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:764
    // owner: play.gameCreator,
    dig 1
    extract 64 32 // on error: Index access is out of bounds
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:762-765
    // const key = new AddressAssetStruct({
    //   assetId: play.assetId,
    //   owner: play.gameCreator,
    // })
    concat
    dup
    cover 2
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:141
    // public games = BoxMap<AddressAssetStruct, GameStruct>({ keyPrefix: 'g' })
    bytec_3 // "g"
    swap
    concat
    dup
    cover 2
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:766
    // assert(this.games(key).exists, 'Did not found the game')
    dup
    box_len
    bury 1
    assert // Did not found the game
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:767
    // const game = this.games(key).value.copy()
    box_get
    swap
    cover 2
    assert // Box must have value
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:771
    // if (play.round.native < Global.round - 100) {
    pushint 16 // 16
    extract_uint64
    dup
    global Round
    pushint 100 // 100
    -
    <
    bz ClaimGame_after_if_else@2
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:772
    // this.LooseGame(key, game, play, sender)
    frame_dig 15
    frame_dig 17
    frame_dig 14
    frame_dig 12
    callsub LooseGame
    popn 3
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:773
    // return
    retsub

ClaimGame_after_if_else@2:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:776
    // game.lastPlayedTime = new UintN64(Global.latestTimestamp)
    global LatestTimestamp
    itob
    frame_dig 17
    swap
    replace2 41
    dup
    frame_bury 17
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:781
    // const seed = BigUint(op.Block.blkSeed(play.round.native + 1))
    frame_dig 18
    intc_2 // 1
    +
    block BlkSeed
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:783
    // const rand0_1: biguint = seed % BigUint(1_000_000)
    bytec 13 // 0x0f4240
    b%
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:786
    // const winThreshold: uint64 = (play.winProbability.native * game.winRatio.native) / 1_000_000
    frame_dig 14
    intc_3 // 8
    extract_uint64
    dup
    frame_bury 10
    uncover 2
    pushint 129 // 129
    extract_uint64
    *
    intc 4 // 1000000
    /
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:787
    // if (rand0_1 < BigUint(winThreshold)) {
    itob
    b<
    bz ClaimGame_else_body@21
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:791
    // (play.deposit.native * BigUint(1_000_000)) / BigUint(play.winProbability.native),
    frame_dig 14
    extract 24 32 // on error: Index access is out of bounds
    bytec 13 // 0x0f4240
    b*
    frame_dig 10
    itob
    b/
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:790-792
    // const winAmount: biguint = BigUint(
    //   (play.deposit.native * BigUint(1_000_000)) / BigUint(play.winProbability.native),
    // )
    dup
    frame_bury 9
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:794
    // game.lastWinAmount = new UintN256(winAmount)
    dup
    len
    dup
    frame_bury 11
    intc_1 // 32
    <=
    assert // overflow
    intc_1 // 32
    bzero
    dup
    frame_bury 1
    dig 1
    b|
    dup
    frame_bury 0
    frame_dig 17
    swap
    replace2 57
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:795
    // game.lastWinTime = new UintN64(Global.latestTimestamp)
    global LatestTimestamp
    itob
    replace2 49
    dup
    frame_bury 17
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:796
    // if (winAmount > game.biggestWinAmount.native) {
    dup
    extract 97 32 // on error: Index access is out of bounds
    uncover 2
    b<
    swap
    frame_bury 2
    bz ClaimGame_after_if_else@5
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:797
    // game.biggestWinAmount = new UintN256(winAmount)
    frame_dig 17
    frame_dig 0
    replace2 97
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:798
    // game.biggestWinTime = new UintN64(Global.latestTimestamp)
    global LatestTimestamp
    itob
    replace2 89
    frame_bury 2

ClaimGame_after_if_else@5:
    frame_dig 2
    dup
    frame_bury 17
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:801
    // if (game.isNativeToken.native) {
    intc 7 // 320
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    bz ClaimGame_after_if_else@10
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:804
    // let prevDeposit: UintN256 = new UintN256(0)
    bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000
    frame_bury 3
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:805
    // if (this.allDeposits(key.assetId).exists) {
    frame_dig 15
    extract 0 8 // on error: Index access is out of bounds
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:143
    // public allDeposits = BoxMap<UintN64, UintN256>({ keyPrefix: 'd' })
    bytec 4 // "d"
    swap
    concat
    dup
    frame_bury 6
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:805
    // if (this.allDeposits(key.assetId).exists) {
    box_len
    bury 1
    bz ClaimGame_after_if_else@8
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:806
    // prevDeposit = this.allDeposits(key.assetId).value
    frame_dig 6
    box_get
    swap
    frame_bury 3
    assert // Box must have value

ClaimGame_after_if_else@8:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:808
    // assert(prevDeposit.native >= winAmount, 'There is not enough money in the sc to cover this win tx')
    frame_dig 3
    dup
    frame_dig 9
    dup
    cover 3
    b>=
    assert // There is not enough money in the sc to cover this win tx
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:809
    // this.allDeposits(key.assetId).value = new UintN256(prevDeposit.native - winAmount)
    dig 1
    b-
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    frame_dig 1
    dup
    cover 3
    b|
    frame_dig 6
    swap
    box_put
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:811
    // assert(game.balance.native >= winAmount, 'There is not enough money in the sc to cover this win tx')
    frame_dig 17
    extract 0 32 // on error: Index access is out of bounds
    dup
    dig 2
    b>=
    assert // There is not enough money in the sc to cover this win tx
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:812
    // this.games(key).value.balance = new UintN256(game.balance.native - winAmount)
    dig 1
    b-
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    uncover 2
    b|
    frame_dig 16
    dup
    cover 2
    box_get
    assert // Box must have value
    swap
    replace2 0
    box_put
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:814
    // this.plays(sender).value.state = new UintN64(2) // mark the state of the game 2 - win
    frame_dig 13
    dup
    box_get
    assert // Box must have value
    bytec 14 // 0x0000000000000002
    replace2 0
    box_put
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:816-823
    // itxn
    //   .payment({
    //     sender: Global.currentApplicationAddress,
    //     receiver: play.owner.native,
    //     amount: new UintN64(winAmount).native,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:818
    // sender: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:819
    // receiver: play.owner.native,
    frame_dig 14
    extract 96 32 // on error: Index access is out of bounds
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:820
    // amount: new UintN64(winAmount).native,
    frame_dig 11
    intc_3 // 8
    <=
    assert // overflow
    intc_3 // 8
    bzero
    uncover 3
    b|
    btoi
    itxn_field Amount
    itxn_field Receiver
    itxn_field Sender
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:816-822
    // itxn
    //   .payment({
    //     sender: Global.currentApplicationAddress,
    //     receiver: play.owner.native,
    //     amount: new UintN64(winAmount).native,
    //     fee: 0,
    //   })
    intc_2 // 1
    itxn_field TypeEnum
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:821
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:816-823
    // itxn
    //   .payment({
    //     sender: Global.currentApplicationAddress,
    //     receiver: play.owner.native,
    //     amount: new UintN64(winAmount).native,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit

ClaimGame_after_if_else@10:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:826
    // if (game.isASAToken.native) {
    frame_dig 17
    intc 5 // 321
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    bz ClaimGame_after_if_else@15
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:829
    // let prevDeposit: UintN256 = new UintN256(0)
    bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000
    frame_bury 4
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:830
    // if (this.allDeposits(key.assetId).exists) {
    frame_dig 15
    extract 0 8 // on error: Index access is out of bounds
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:143
    // public allDeposits = BoxMap<UintN64, UintN256>({ keyPrefix: 'd' })
    bytec 4 // "d"
    swap
    concat
    dup
    frame_bury 7
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:830
    // if (this.allDeposits(key.assetId).exists) {
    box_len
    bury 1
    bz ClaimGame_after_if_else@13
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:831
    // prevDeposit = this.allDeposits(key.assetId).value
    frame_dig 7
    box_get
    swap
    frame_bury 4
    assert // Box must have value

ClaimGame_after_if_else@13:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:833
    // assert(prevDeposit.native >= winAmount, 'There is not enough money in the sc to cover this win tx')
    frame_dig 4
    dup
    frame_dig 9
    dup
    cover 3
    b>=
    assert // There is not enough money in the sc to cover this win tx
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:834
    // this.allDeposits(key.assetId).value = new UintN256(prevDeposit.native - winAmount)
    dig 1
    b-
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    frame_dig 1
    dup
    cover 3
    b|
    frame_dig 7
    swap
    box_put
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:836
    // assert(game.balance.native >= winAmount, 'There is not enough money in the sc to cover this win tx')
    frame_dig 17
    dup
    cover 3
    extract 0 32 // on error: Index access is out of bounds
    dup
    dig 2
    b>=
    assert // There is not enough money in the sc to cover this win tx
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:837
    // this.games(key).value.balance = new UintN256(game.balance.native - winAmount)
    dig 1
    b-
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    uncover 2
    b|
    frame_dig 16
    dup
    cover 2
    box_get
    assert // Box must have value
    swap
    replace2 0
    box_put
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:839
    // this.plays(sender).value.state = new UintN64(2) // mark the state of the game 2 - win
    frame_dig 13
    dup
    box_get
    assert // Box must have value
    bytec 14 // 0x0000000000000002
    replace2 0
    box_put
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:841-849
    // itxn
    //   .assetTransfer({
    //     sender: Global.currentApplicationAddress,
    //     assetReceiver: play.owner.native,
    //     assetAmount: new UintN64(winAmount).native,
    //     xferAsset: game.assetId.native,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:843
    // sender: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:844
    // assetReceiver: play.owner.native,
    frame_dig 14
    extract 96 32 // on error: Index access is out of bounds
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:845
    // assetAmount: new UintN64(winAmount).native,
    frame_dig 11
    intc_3 // 8
    <=
    assert // overflow
    intc_3 // 8
    bzero
    uncover 3
    b|
    btoi
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:846
    // xferAsset: game.assetId.native,
    uncover 3
    intc_1 // 32
    extract_uint64
    itxn_field XferAsset
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field Sender
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:841-848
    // itxn
    //   .assetTransfer({
    //     sender: Global.currentApplicationAddress,
    //     assetReceiver: play.owner.native,
    //     assetAmount: new UintN64(winAmount).native,
    //     xferAsset: game.assetId.native,
    //     fee: 0,
    //   })
    pushint 4 // 4
    itxn_field TypeEnum
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:847
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:841-849
    // itxn
    //   .assetTransfer({
    //     sender: Global.currentApplicationAddress,
    //     assetReceiver: play.owner.native,
    //     assetAmount: new UintN64(winAmount).native,
    //     xferAsset: game.assetId.native,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit

ClaimGame_after_if_else@15:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:851
    // if (game.isArc200Token.native) {
    frame_dig 17
    intc 6 // 322
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    bz ClaimGame_after_if_else@22
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:852
    // let prevDeposit: UintN256 = new UintN256(0)
    bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000
    frame_bury 5
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:853
    // if (this.allDeposits(key.assetId).exists) {
    frame_dig 15
    extract 0 8 // on error: Index access is out of bounds
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:143
    // public allDeposits = BoxMap<UintN64, UintN256>({ keyPrefix: 'd' })
    bytec 4 // "d"
    swap
    concat
    dup
    frame_bury 8
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:853
    // if (this.allDeposits(key.assetId).exists) {
    box_len
    bury 1
    bz ClaimGame_after_if_else@18
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:854
    // prevDeposit = this.allDeposits(key.assetId).value
    frame_dig 8
    box_get
    swap
    frame_bury 5
    assert // Box must have value

ClaimGame_after_if_else@18:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:856
    // assert(prevDeposit.native >= winAmount, 'There is not enough money in the sc to cover this win tx')
    frame_dig 5
    dup
    frame_dig 9
    dup
    cover 3
    b>=
    assert // There is not enough money in the sc to cover this win tx
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:857
    // this.allDeposits(key.assetId).value = new UintN256(prevDeposit.native - winAmount)
    dig 1
    b-
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    frame_dig 1
    dup
    cover 3
    b|
    frame_dig 8
    swap
    box_put
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:859
    // assert(game.balance.native >= winAmount, 'There is not enough money in the sc to cover this win tx')
    frame_dig 17
    dup
    cover 3
    extract 0 32 // on error: Index access is out of bounds
    dup
    dig 2
    b>=
    assert // There is not enough money in the sc to cover this win tx
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:860
    // this.games(key).value.balance = new UintN256(game.balance.native - winAmount)
    swap
    b-
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    b|
    frame_dig 16
    dup
    cover 2
    box_get
    assert // Box must have value
    swap
    replace2 0
    box_put
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:862
    // this.plays(sender).value.state = new UintN64(2) // mark the state of the game 2 - win
    frame_dig 13
    dup
    box_get
    assert // Box must have value
    bytec 14 // 0x0000000000000002
    replace2 0
    box_put
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:865-871
    // itxn
    //   .applicationCall({
    //     appId: game.assetId.native,
    //     appArgs: [methodSelector('arc200_transfer(address,uint256)bool'), play.owner, new UintN256(winAmount)],
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:867
    // appId: game.assetId.native,
    intc_1 // 32
    extract_uint64
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:868
    // appArgs: [methodSelector('arc200_transfer(address,uint256)bool'), play.owner, new UintN256(winAmount)],
    frame_dig 14
    extract 96 32 // on error: Index access is out of bounds
    bytec 10 // method "arc200_transfer(address,uint256)bool"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    frame_dig 0
    itxn_field ApplicationArgs
    itxn_field ApplicationID
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:865-870
    // itxn
    //   .applicationCall({
    //     appId: game.assetId.native,
    //     appArgs: [methodSelector('arc200_transfer(address,uint256)bool'), play.owner, new UintN256(winAmount)],
    //     fee: 0,
    //   })
    pushint 6 // 6
    itxn_field TypeEnum
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:869
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:865-871
    // itxn
    //   .applicationCall({
    //     appId: game.assetId.native,
    //     appArgs: [methodSelector('arc200_transfer(address,uint256)bool'), play.owner, new UintN256(winAmount)],
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit

ClaimGame_after_if_else@22:
    retsub

ClaimGame_else_body@21:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:875
    // this.LooseGame(key, game, play, sender)
    frame_dig 15
    frame_dig 17
    frame_dig 14
    frame_dig 12
    callsub LooseGame
    popn 3
    retsub


// smart_contracts/avm_satoshi_dice/contract.algo.ts::AvmSatoshiDice.LooseGame(key: bytes, game: bytes, play: bytes, sender: bytes) -> bytes, bytes, bytes:
LooseGame:
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:879
    // private LooseGame(key: AddressAssetStruct, game: GameStruct, play: PlayStruct, sender: Address) {
    proto 4 3
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:880
    // this.games(key).value.balance = new UintN256(game.balance.native + play.deposit.native)
    frame_dig -3
    extract 0 32 // on error: Index access is out of bounds
    frame_dig -2
    extract 24 32 // on error: Index access is out of bounds
    b+
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    intc_1 // 32
    bzero
    b|
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:141
    // public games = BoxMap<AddressAssetStruct, GameStruct>({ keyPrefix: 'g' })
    bytec_3 // "g"
    frame_dig -4
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:880
    // this.games(key).value.balance = new UintN256(game.balance.native + play.deposit.native)
    dup
    box_get
    assert // Box must have value
    uncover 2
    replace2 0
    box_put
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:142
    // public plays = BoxMap<Address, PlayStruct>({ keyPrefix: 'p' })
    bytec 6 // "p"
    frame_dig -1
    concat
    // smart_contracts/avm_satoshi_dice/contract.algo.ts:881
    // this.plays(sender).value.state = new UintN64(3) // mark the state of the game 3 - loose
    dup
    box_get
    assert // Box must have value
    pushbytes 0x0000000000000003
    replace2 0
    box_put
    frame_dig -4
    frame_dig -3
    frame_dig -2
    retsub
