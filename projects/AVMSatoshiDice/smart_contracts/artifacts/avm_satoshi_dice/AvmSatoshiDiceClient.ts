/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"AvmSatoshiDice","structs":{"AddressAssetStruct":[{"name":"assetId","type":"uint64"},{"name":"owner","type":"address"}],"GameStruct":[{"name":"balance","type":"uint256"},{"name":"assetId","type":"uint64"},{"name":"isNativeToken","type":"bool"},{"name":"isAsaToken","type":"bool"},{"name":"isArc200Token","type":"bool"},{"name":"createdAtTime","type":"uint64"},{"name":"createdAtRound","type":"uint64"},{"name":"lastPlayTime","type":"uint64"},{"name":"lastPlayAmount","type":"uint256"},{"name":"lastWinTime","type":"uint64"},{"name":"lastWinAmount","type":"uint256"},{"name":"biggestWinTime","type":"uint64"},{"name":"biggestWinAmount","type":"uint256"},{"name":"winRatio","type":"uint64"},{"name":"owner","type":"address"}],"PlayStruct":[{"name":"state","type":"uint64"},{"name":"winProbability","type":"uint64"},{"name":"round","type":"uint64"},{"name":"deposit","type":"uint256"},{"name":"assetId","type":"uint64"},{"name":"gameCreator","type":"address"},{"name":"owner","type":"address"}]},"methods":[{"name":"updateApplication","args":[{"type":"string","name":"newVersion"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["UpdateApplication"]},"readonly":false,"desc":"addressUdpater from global biatec configuration is allowed to update application","events":[],"recommendations":{}},{"name":"sendOnlineKeyRegistration","args":[{"type":"byte[]","name":"voteKey"},{"type":"byte[]","name":"selectionKey"},{"type":"byte[]","name":"stateProofKey"},{"type":"uint64","name":"voteFirst"},{"type":"uint64","name":"voteLast"},{"type":"uint64","name":"voteKeyDilution"},{"type":"uint64","name":"fee"}],"returns":{"type":"byte[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Creator can perfom key registration for this LP pool","events":[],"recommendations":{}},{"name":"withdraw","args":[{"type":"address","name":"receiver","desc":"Receiver"},{"type":"uint256","name":"amount","desc":"Amout to send"},{"type":"uint64","name":"assetId"},{"type":"bool","name":"isArc200Token"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Biatec can withdraw service fees. The current balance","events":[],"recommendations":{}},{"name":"CreateGameWithNativeToken","args":[{"type":"pay","name":"txnDeposit","desc":"Deposit transaction"},{"type":"uint64","name":"winRatio","desc":"Win ratio.. 1_000_000 for user probability, 200_000 for 0.2 factor of the user probability, 0 for no win"}],"returns":{"type":"(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)","struct":"GameStruct"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create new game or deposit by the owner more assets to the game.","events":[],"recommendations":{}},{"name":"OptInToASA","args":[{"type":"pay","name":"txnDeposit","desc":"Deposit tx"},{"type":"uint64","name":"assetId","desc":"Assset id"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Anyone can optin this contract to his ASA if he deposits 10 native tokens","events":[],"recommendations":{}},{"name":"CreateGameWithASAToken","args":[{"type":"axfer","name":"txnDeposit","desc":"Deposit transaction"},{"type":"uint64","name":"winRatio","desc":"Win ratio.. 1_000_000 for user probability, 200_000 for 0.2 factor of the user probability, 0 for no win"}],"returns":{"type":"(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)","struct":"GameStruct"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create new game or deposit by the owner more assets to the game.","events":[],"recommendations":{}},{"name":"CreateGameWithArc200Token","args":[{"type":"uint64","name":"assetId"},{"type":"uint256","name":"amount"},{"type":"uint64","name":"winRatio","desc":"Win ratio.. 1_000_000 for user probability, 200_000 for 0.2 factor of the user probability, 0 for no win"}],"returns":{"type":"(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)","struct":"GameStruct"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create new game or deposit by the owner more assets to the game.","events":[],"recommendations":{}},{"name":"StartGameWithNativeToken","args":[{"type":"pay","name":"txnDeposit","desc":"Deposit"},{"type":"(uint64,address)","struct":"AddressAssetStruct","name":"game","desc":"The"},{"type":"uint64","name":"winProbability","desc":""}],"returns":{"type":"(uint64,uint64,uint64,uint256,uint64,address,address)","struct":"PlayStruct"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Starts new game play\n\nPlayer selects win probability and the data is stored to the player's box storage.","events":[],"recommendations":{}},{"name":"StartGameWithASAToken","args":[{"type":"axfer","name":"txnDeposit","desc":"Deposit"},{"type":"(uint64,address)","struct":"AddressAssetStruct","name":"game","desc":"The"},{"type":"uint64","name":"winProbability","desc":""}],"returns":{"type":"(uint64,uint64,uint64,uint256,uint64,address,address)","struct":"PlayStruct"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Starts new game play\n\nPlayer selects win probability and the data is stored to the player's box storage.","events":[],"recommendations":{}},{"name":"StartGameWithArc200Token","args":[{"type":"uint256","name":"amount"},{"type":"uint64","name":"assetId"},{"type":"(uint64,address)","struct":"AddressAssetStruct","name":"game","desc":"The"},{"type":"uint64","name":"winProbability","desc":""}],"returns":{"type":"(uint64,uint64,uint64,uint256,uint64,address,address)","struct":"PlayStruct"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Starts new game play\n\nPlayer selects win probability and the data is stored to the player's box storage.","events":[],"recommendations":{}},{"name":"Game","args":[{"type":"address","name":"creator"},{"type":"uint64","name":"assetId"}],"returns":{"type":"(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)","struct":"GameStruct","desc":"the current game"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Returns the current state of the game","events":[],"recommendations":{}},{"name":"MyGame","args":[],"returns":{"type":"(uint64,uint64,uint64,uint256,uint64,address,address)","struct":"PlayStruct","desc":"the current player game"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Returns the active user box","events":[],"recommendations":{}},{"name":"ClaimGame","args":[],"returns":{"type":"(uint64,uint64,uint64,uint256,uint64,address,address)","struct":"PlayStruct"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Claim the game.\n\nIf user won, he receives the assets\n\nIf user lost, the game is funded with more balance","events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"version":{"keyType":"AVMString","valueType":"AVMString","key":"c2N2ZXI=","desc":"Version of the smart contract"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"games":{"keyType":"AddressAssetStruct","valueType":"GameStruct","prefix":"Zw=="},"plays":{"keyType":"address","valueType":"PlayStruct","prefix":"cA=="},"allDeposits":{"keyType":"uint64","valueType":"uint256","prefix":"ZA=="}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[2037,2268,2485],"errorMessage":"Asset id in the tx does not match the game asset id"},{"pc":[734,805,817,1010,1119,1224,1278,1293,1307,1316,1334,1344,1353,1528,1583,1597,1611,1626,1636,1654,1664,1673,1781,1855,1869,1884,1898,1908,1926,1936,1945,2052,2083,2098,2132,2149,2175,2283,2315,2330,2364,2381,2413,2500,2532,2547,2557,2609,2641,2720,2733,2761,2791,2821,2897,2911,2929,2944,2991,3047,3056,3137,3196,3205,3293,3352,3361,3410,3440,3476,3515,3527],"errorMessage":"Box must have value"},{"pc":[2718,2786],"errorMessage":"Did not found the game"},{"pc":[2731,2755],"errorMessage":"Did not found the game you are playing"},{"pc":[782],"errorMessage":"Game creator can withdraw from the game only the game deposit"},{"pc":[749,775,1308,1317,1627,1637,1899,1909,2029,2053,2150,2198,2255,2284,2382,2436,2476,2501,2610,2672,2763,2768,2859,2918,2969,3022,3067,3115,3171,3216,3271,3327,3374,3454,3467,3497],"errorMessage":"Index access is out of bounds"},{"pc":[260,276,292,314,342,375,407,432,462,487,516,540],"errorMessage":"OnCompletion is not NoOp"},{"pc":[600],"errorMessage":"OnCompletion is not UpdateApplication"},{"pc":[643],"errorMessage":"Only creator can update application"},{"pc":[664],"errorMessage":"Only creator can use this method"},{"pc":[1439],"errorMessage":"Opt in fee for new asset is 10 native tokens"},{"pc":[1256,1560],"errorMessage":"Receiver must be the gas station app"},{"pc":[1428],"errorMessage":"Receiver of the optin fee must be the current smart contract"},{"pc":[2026,2252],"errorMessage":"Sender of the app call must be the same as sender of the deposit"},{"pc":[2050,2281,2498],"errorMessage":"The game does not exist"},{"pc":[2157,2389,2617],"errorMessage":"The game does not have enough balance for your win scenario. You can win max 50% of the game balance"},{"pc":[983],"errorMessage":"The game for this asset does not exists"},{"pc":[1304],"errorMessage":"The previous game was ASA token"},{"pc":[1881],"errorMessage":"The previous game was NOT for the arc200 token"},{"pc":[1895],"errorMessage":"The previous game was for the ASA token"},{"pc":[1608],"errorMessage":"The previous game was for the arc200 token"},{"pc":[1594,1866],"errorMessage":"The previous game was for the native token"},{"pc":[1623],"errorMessage":"The previous game was not for the ASA token"},{"pc":[1290,1313],"errorMessage":"The previous game was not for the native token"},{"pc":[1633,1905],"errorMessage":"The previous game was not for the same token"},{"pc":[3001,3029,3147,3178,3303,3334],"errorMessage":"There is not enough money in the sc to cover this win tx"},{"pc":[2058,2290,2507],"errorMessage":"This game must be played with native token"},{"pc":[1199,1492,1751,2068,2300,2517],"errorMessage":"Win probability must be below 1 000 000"},{"pc":[2088,2320,2537],"errorMessage":"Your previous game has not yet been claimed"},{"pc":[997,1002],"errorMessage":"account funded"},{"pc":[1112],"errorMessage":"account opted into asset"},{"pc":[632],"errorMessage":"can only call when creating"},{"pc":[263,279,295,317,345,378,410,435,465,490,519,543,603],"errorMessage":"can only call when not creating"},{"pc":[1031,1140],"errorMessage":"maxWithdrawableBalance is less then requested"},{"pc":[789,825,850,898,949,1012,1121,1238,1327,1363,1542,1647,1683,1791,1919,1955,2119,2185,2351,2423,2651,2879,3009,3037,3075,3155,3186,3224,3311,3342,3382,3484,3510],"errorMessage":"overflow"},{"pc":[356,446],"errorMessage":"transaction type is axfer"},{"pc":[388,475,500],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAIACABCMCEPcECwgLAAiYRAQAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAEFR98dQFkAWcJZAAAAAAAAAAAAXABgAMPQkAPdXNlciB3aXRoZHJhd2FsBNpwJbkQYWRtaW4gd2l0aGRyYXdhbAECCAAAAAAAAAABCAAAAAAAAAACBEqWj48xG0EB04INBHCmXokExh1W9QRUzGlvBDsZm/EE425XvwTEvH7pBBXwaOYEJZIgtQS3NTntBJyYOVUEXOplWQQqI24YBAvFcdI2GgCODQFUARoBAgDlAMwArgCVAHUAVAA4ACIAEgACIkMxGRREMRhEiAmkK0xQsCRDMRkURDEYRIgJhytMULAkQzEZFEQxGEQ2GgE2GgKICV0rTFCwJEMxGRREMRhENhoBNhoCNhoDNhoEiAhVK0xQsCRDMRkURDEYRDEWJAlJOBCBBBJENhoBNhoCiAdGK0xQsCRDMRkURDEYRDEWJAlJOBAkEkQ2GgE2GgKIBkwrTFCwJEMxGRREMRhENhoBNhoCNhoDiAUjK0xQsCRDMRkURDEYRDEWJAlJOBCBBBJENhoBiAP/K0xQsCRDMRkURDEYRDEWJAlJOBAkEkQ2GgGIA6gkQzEZFEQxGEQxFiQJSTgQJBJENhoBiAKkK0xQsCRDMRkURDEYRDYaATYaAjYaAzYaBIgApyRDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCADYaBBc2GgUXNhoGFzYaBxeIAEtJFRZXBgJMUCtMULAkQzEZgQQSRDEYRDYaAVcCAIgAFigiTwJUK0xQsCRDMRlA/ooxGBREJEOKAQEyCTEAEkSABXNjdmVyi/9nJImKBwEyCTEAEkSxi/myCov9sg2L/rIOi/yyDIv7sj+L+rILgQKyEIv/sgGztBeJigQAIkcDgABHBIv+MQBQJwVMUEm9RQFBAPqLCb5MjAFEi/2AAKiL/YwCQQAHiwFXACCMAosCSYABKKJLAUyhSU4CjAOLAUlOA1cAIElLAqdETKFJFSMORCOvSYwATEsBq4sJSU4CvkRMXAC/JwSL/lBJvkRPA6FJFSMORE8Cq78hB1MoIk8CVCJTQQAdsYsDSRUlDkQlr6sXJwqyBYv8sgeyCCSyECKyAbOLASEFUygiTwJUIlNBACSxiwEjW4sDSRUlDkQlr6sXJwqyBYv8shSyErIRgQSyECKyAbOLASEGUygiTwJUIlNBACexiwEjW4sDSRUjDkSLAKsnCrIFJwuyGov8shqyGrIYgQayECKyAbOJMgkxABJEi/4XSYwGQABMMgpzAEQyCnMBRAknBIv+UL5EIkQlr0xLAasXTwJMCUmMBBaL/adEi/2rF0mMB0AABIsEjAeLB7EWFycMsgWL/LIHsggkshAisgGziYv/IlNBAB6xJwyyBScLshqL/LIai/2yGosGshiBBrIQIrIBs4kyCosGcABEJwSL/lC+RCJEJa9MSwGrF08CTAlJjAUWi/2nRIv9qxdJjAhAAASLBYwIiwixFhcnDLIFi/yyFLISiwayEYEEshAisgGziYoCASJHAov+OACL/xchBA5Ei/44CEmBKAoJKScGvUUBQQAHJwa+TIwFRIsEFkmMAYsFoEkVIw5EI69JjACrJwZMv4v+OAcyChJEKosDUCcFTFBJjAK9RQFBAFOLAkm+RCEHUygiTwJUJwgSREm+RCEFUygiTwJUKBJESb5EVyAIKhJESb5EVwAgiwGgSRUjDkSLAKtLAb5ETFwASwFMv0m+RIv/XLG/iwK+RIwAiYsBSRUjDkSLAKsyBxYyBhZPAipQJwhQIQUiVCEGIlRPAlBMUCpQKVAqUClQKlApUIv/UIsDUIsCTL9C/7yKAgCL/jgHMgoSRIv+OAiBgK3iBBJEMgqL/xdJTgJwAEUBQAAUsTIKshQishKLALIRgQSyECKyAbOJigIBIkcCi/44AIv/FyEEDkSL/jgRFkmL/jgSSYEoCglMKUwnBExQSb1FAUEAB4sHvkyMBkSLBRZJjAGLBqBJFSMORCOvSYwAq4sHTL+L/jgUMgoSRIsEiwNQJwVMUEmMAr1FAUEAYosCSb5EIQdTKCJPAlQoEkRJvkQhBlMoIk8CVCgSREm+RCEFUygiTwJUJwgSREm+RFcgCIsEEkRJvkRXACCLAaBJFSMORIsAq0sBvkRMXABLAUy/Sb5Ei/9csb+LAr5EjACJiwFJFSMORIsAqzIHFjIGFk8CiwRQKFAhBSRUIQYiVE8CUExQKlApUCpQKVAqUClQi/9QiwNQiwJMv0L/vIoDASJJMQCL/xchBA5Ei/6AASiii/5MoSknBIv9UEm9RQFBAAeLBb5MjAREiwSLA6BJFSMORCOvSYwAq4sFTL+xi/0XMQAyCicQshpMshqyGov+shqyGIEGshAisgGzi/2LAlAnBUxQSYwBvUUBQQBiiwFJvkQhB1MoIk8CVCgSREm+RCEGUygiTwJUJwgSREm+RCEFUygiTwJUKBJESb5EVyAIi/0SREm+RFcAIIsDoEkVIw5EiwCrSwG+RExcAEsBTL9JvkSL/1yxv4sBvkSMAImLA0kVIw5EiwCrMgcWMgYWTwKL/VAoUCEFIlQhBiRUTwJQTFAqUClQKlApUCpQKVCL/1CLAlCLAUy/Qv+8igMBIkcDi/04AEkxAEsBEkSL/lcACElOAioSRCcFi/5QSU4CSb1FAUS+RFcgCCoSRIv/F0lOAiEEDkQnB0xQSb1FAUEACYsIvkQiWyQNRDIHFosGSU4CvkRMXDlLAUy/i/04CEkWSYwDSRUjDkQjr0mMAatJjABLAr5ETFxBSwJMvyEEC4sHChZMvkRXACAnDaKmRCmMAicGvUUBQQAHJwa+TIwCRIsCiwOgSRUjDkSLAasnBky/MgYWi/5XCCAnDov/UE8CUIsAUIsFUExQiwRQiwhLAb+MAImKAwEiRwSL/TgASYv9OBEWSU8CMQBLARJEi/5XAAhOAov+IltLAhcSRCcFi/5QSU4DSb1FAUS+RFcgCE8CEkSL/xdJTgIhBA5EJwdMUEm9RQFBAAmLCr5EIlskDUQyBxaLCElOAr5ETFw5SwFMv4v9OBJJFkmMA0kVIw5EI69JjAGrSYwASwK+RExcQUsCTL8hBAuLCQoWTL5EVwAgJw2ipkQpjAInBIsGUEmMBL1FAUEAB4sEvkyMAkSLAosDoEkVIw5EiwGriwRMvzIGFov+VwggJw6L/1BPAlCLAFCLB1BMUIsFUIsKSwG/jACJigQBIkkxAEmL/lcACElOAov9EkQnBYv+UElOAkm9RQFEvkRXIAiL/RJEi/8XSU4CIQQORCcHTFBJvUUBQQAJiwa+RCJbJA1EMgcWiwRJTgK+RExcOUsBTL9JvkSL/FxBSwFMv7GL/iJbMQAyCicQshpMshqyGov8shqyGIEGshAisgGzi/wnCaOLBRaiTL5EVwAgJw2ipkQpjAAnBIv9UEmMAb1FAUEAB4sBvkyMAESLAIv8oEkVIw5EI69MSwGriwFMvzIGFov8TwKri/5XCCAnDov/UE8DUE8CUIsDUExQiwJQiwZLAb+MAImKAgGL/4v+UCcFTFBJvUUBRL5EiScHMQBQSb1FAUS+RImKAAEiRwiAADEAJwcxAFBHAr1FAUS+TElPAkRJVzgISwFXQCBQSU4CJwVMUElOAkm9RQFEvkxOAkSBEFtJMgaBZAkMQQAUiw2LD4sMiwqIAmZGA4sLvkSMAImLEIECCNEAJwmqiwwlW0mMCYsPgbEBWwshBAoWpEECLYsMVxggSScJo4sJFqJJjAhMoUkVIw5EI69JjAFLAatJjACLDklOAr5ETFxpSwFMvzIHFksBvkRMXGG/iw9XkSClQQAYiw5JvkSLAFyRSwFMvzIHFksBvkRMXIm/iw8hB1MoIk8CVCJTQQCDKYwCiw1XAAgnBExQSYwFvUUBQQAHiwW+TIwCRIsCSYsISU4Dp0RLAaFJFSMORIsBSU4Dq4sFTL+LD1cAIElLAqdESwGhSRUjDkRPAquLDklOAr5ETFwAv4sLSb5EJw9cAL+xMgqLDFdgIEsCFSUORCWvTwOrF7IIsgeyACSyECKyAbOLDyEFUygiTwJUIlNBAI0pjAOLDVcACCcETFBJjAa9RQFBAAeLBr5MjANEiwNJiwhJTgOnREsBoUkVIw5EiwFJTgOriwZMv4sPSU4DVwAgSUsCp0RLAaFJFSMORE8Cq4sOSU4CvkRMXAC/iwtJvkQnD1wAv7EyCosMV2AgSwIVJQ5EJa9PA6sXTwMjW7IRshKyFLIAgQSyECKyAbOLDyEGUygiTwJUIlNBAI0pjASLDVcACCcETFBJjAe9RQFBAAeLB75MjAREiwRJiwhJTgOnREsBoUkVIw5EiwFJTgOriwdMv4sPSU4DVwAgSUsCp0RLAaFJFSMOREsCq4sOSU4CvkRMXAC/iwtJvkQnD1wAv7FPAiNbiwxXYCBLAhUjDkRPAk8DqycLshpMshqyGrIYgQayECKyAbOLC75EjACJiw2LD4sMiwqIAAVGA0L/6YoEAycFi/xQSb5EgbEBWyEETAmBBQqL/lcYIEwWSwGjJwmii/xXAAgnBExQSb5ESwKhSRUjDkQjr0xLAatPAky/i/1XACBPA6BPAqFJFSMORKtLAb5ETFwAvycHi/9QSb5EgAgAAAAAAAAAA1wAv4v8i/2L/ok=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type AddressAssetStruct = {
  assetId: bigint,
  owner: string
}


/**
 * Converts the ABI tuple representation of a AddressAssetStruct to the struct representation
 */
export function AddressAssetStructFromTuple(abiTuple: [bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.AddressAssetStruct, APP_SPEC.structs) as AddressAssetStruct
}

export type GameStruct = {
  balance: bigint,
  assetId: bigint,
  isNativeToken: boolean,
  isAsaToken: boolean,
  isArc200Token: boolean,
  createdAtTime: bigint,
  createdAtRound: bigint,
  lastPlayTime: bigint,
  lastPlayAmount: bigint,
  lastWinTime: bigint,
  lastWinAmount: bigint,
  biggestWinTime: bigint,
  biggestWinAmount: bigint,
  winRatio: bigint,
  owner: string
}


/**
 * Converts the ABI tuple representation of a GameStruct to the struct representation
 */
export function GameStructFromTuple(abiTuple: [bigint, bigint, boolean, boolean, boolean, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.GameStruct, APP_SPEC.structs) as GameStruct
}

export type PlayStruct = {
  state: bigint,
  winProbability: bigint,
  round: bigint,
  deposit: bigint,
  assetId: bigint,
  gameCreator: string,
  owner: string
}


/**
 * Converts the ABI tuple representation of a PlayStruct to the struct representation
 */
export function PlayStructFromTuple(abiTuple: [bigint, bigint, bigint, bigint, bigint, string, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.PlayStruct, APP_SPEC.structs) as PlayStruct
}

/**
 * The argument types for the AvmSatoshiDice contract
 */
export type AvmSatoshiDiceArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'updateApplication(string)bool': {
      newVersion: string
    }
    'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]': {
      voteKey: Uint8Array
      selectionKey: Uint8Array
      stateProofKey: Uint8Array
      voteFirst: bigint | number
      voteLast: bigint | number
      voteKeyDilution: bigint | number
      fee: bigint | number
    }
    'withdraw(address,uint256,uint64,bool)void': {
      /**
       * Receiver
       */
      receiver: string
      /**
       * Amout to send
       */
      amount: bigint | number
      assetId: bigint | number
      isArc200Token: boolean
    }
    'CreateGameWithNativeToken(pay,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)': {
      /**
       * Deposit transaction
       */
      txnDeposit: AppMethodCallTransactionArgument
      /**
       * Win ratio.. 1_000_000 for user probability, 200_000 for 0.2 factor of the user probability, 0 for no win
       */
      winRatio: bigint | number
    }
    'OptInToASA(pay,uint64)void': {
      /**
       * Deposit tx
       */
      txnDeposit: AppMethodCallTransactionArgument
      /**
       * Assset id
       */
      assetId: bigint | number
    }
    'CreateGameWithASAToken(axfer,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)': {
      /**
       * Deposit transaction
       */
      txnDeposit: AppMethodCallTransactionArgument
      /**
       * Win ratio.. 1_000_000 for user probability, 200_000 for 0.2 factor of the user probability, 0 for no win
       */
      winRatio: bigint | number
    }
    'CreateGameWithArc200Token(uint64,uint256,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)': {
      assetId: bigint | number
      amount: bigint | number
      /**
       * Win ratio.. 1_000_000 for user probability, 200_000 for 0.2 factor of the user probability, 0 for no win
       */
      winRatio: bigint | number
    }
    'StartGameWithNativeToken(pay,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)': {
      /**
       * Deposit
       */
      txnDeposit: AppMethodCallTransactionArgument
      /**
       * The
       */
      game: AddressAssetStruct
      winProbability: bigint | number
    }
    'StartGameWithASAToken(axfer,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)': {
      /**
       * Deposit
       */
      txnDeposit: AppMethodCallTransactionArgument
      /**
       * The
       */
      game: AddressAssetStruct
      winProbability: bigint | number
    }
    'StartGameWithArc200Token(uint256,uint64,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)': {
      amount: bigint | number
      assetId: bigint | number
      /**
       * The
       */
      game: AddressAssetStruct
      winProbability: bigint | number
    }
    'Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)': {
      creator: string
      assetId: bigint | number
    }
    'MyGame()(uint64,uint64,uint64,uint256,uint64,address,address)': Record<string, never>
    'ClaimGame()(uint64,uint64,uint64,uint256,uint64,address,address)': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'updateApplication(string)bool': [newVersion: string]
    'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]': [voteKey: Uint8Array, selectionKey: Uint8Array, stateProofKey: Uint8Array, voteFirst: bigint | number, voteLast: bigint | number, voteKeyDilution: bigint | number, fee: bigint | number]
    'withdraw(address,uint256,uint64,bool)void': [receiver: string, amount: bigint | number, assetId: bigint | number, isArc200Token: boolean]
    'CreateGameWithNativeToken(pay,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)': [txnDeposit: AppMethodCallTransactionArgument, winRatio: bigint | number]
    'OptInToASA(pay,uint64)void': [txnDeposit: AppMethodCallTransactionArgument, assetId: bigint | number]
    'CreateGameWithASAToken(axfer,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)': [txnDeposit: AppMethodCallTransactionArgument, winRatio: bigint | number]
    'CreateGameWithArc200Token(uint64,uint256,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)': [assetId: bigint | number, amount: bigint | number, winRatio: bigint | number]
    'StartGameWithNativeToken(pay,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)': [txnDeposit: AppMethodCallTransactionArgument, game: AddressAssetStruct, winProbability: bigint | number]
    'StartGameWithASAToken(axfer,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)': [txnDeposit: AppMethodCallTransactionArgument, game: AddressAssetStruct, winProbability: bigint | number]
    'StartGameWithArc200Token(uint256,uint64,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)': [amount: bigint | number, assetId: bigint | number, game: AddressAssetStruct, winProbability: bigint | number]
    'Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)': [creator: string, assetId: bigint | number]
    'MyGame()(uint64,uint64,uint64,uint256,uint64,address,address)': []
    'ClaimGame()(uint64,uint64,uint64,uint256,uint64,address,address)': []
  }
}

/**
 * The return type for each method
 */
export type AvmSatoshiDiceReturns = {
  'updateApplication(string)bool': boolean
  'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]': Uint8Array
  'withdraw(address,uint256,uint64,bool)void': void
  'CreateGameWithNativeToken(pay,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)': GameStruct
  'OptInToASA(pay,uint64)void': void
  'CreateGameWithASAToken(axfer,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)': GameStruct
  'CreateGameWithArc200Token(uint64,uint256,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)': GameStruct
  'StartGameWithNativeToken(pay,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)': PlayStruct
  'StartGameWithASAToken(axfer,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)': PlayStruct
  'StartGameWithArc200Token(uint256,uint64,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)': PlayStruct
  'Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)': GameStruct
  'MyGame()(uint64,uint64,uint64,uint256,uint64,address,address)': PlayStruct
  'ClaimGame()(uint64,uint64,uint64,uint256,uint64,address,address)': PlayStruct
}

/**
 * Defines the types of available calls and state of the AvmSatoshiDice smart contract.
 */
export type AvmSatoshiDiceTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'updateApplication(string)bool' | 'updateApplication', {
      argsObj: AvmSatoshiDiceArgs['obj']['updateApplication(string)bool']
      argsTuple: AvmSatoshiDiceArgs['tuple']['updateApplication(string)bool']
      returns: AvmSatoshiDiceReturns['updateApplication(string)bool']
    }>
    & Record<'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]' | 'sendOnlineKeyRegistration', {
      argsObj: AvmSatoshiDiceArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]']
      argsTuple: AvmSatoshiDiceArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]']
      returns: AvmSatoshiDiceReturns['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]']
    }>
    & Record<'withdraw(address,uint256,uint64,bool)void' | 'withdraw', {
      argsObj: AvmSatoshiDiceArgs['obj']['withdraw(address,uint256,uint64,bool)void']
      argsTuple: AvmSatoshiDiceArgs['tuple']['withdraw(address,uint256,uint64,bool)void']
      returns: AvmSatoshiDiceReturns['withdraw(address,uint256,uint64,bool)void']
    }>
    & Record<'CreateGameWithNativeToken(pay,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)' | 'CreateGameWithNativeToken', {
      argsObj: AvmSatoshiDiceArgs['obj']['CreateGameWithNativeToken(pay,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']
      argsTuple: AvmSatoshiDiceArgs['tuple']['CreateGameWithNativeToken(pay,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']
      returns: AvmSatoshiDiceReturns['CreateGameWithNativeToken(pay,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']
    }>
    & Record<'OptInToASA(pay,uint64)void' | 'OptInToASA', {
      argsObj: AvmSatoshiDiceArgs['obj']['OptInToASA(pay,uint64)void']
      argsTuple: AvmSatoshiDiceArgs['tuple']['OptInToASA(pay,uint64)void']
      returns: AvmSatoshiDiceReturns['OptInToASA(pay,uint64)void']
    }>
    & Record<'CreateGameWithASAToken(axfer,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)' | 'CreateGameWithASAToken', {
      argsObj: AvmSatoshiDiceArgs['obj']['CreateGameWithASAToken(axfer,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']
      argsTuple: AvmSatoshiDiceArgs['tuple']['CreateGameWithASAToken(axfer,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']
      returns: AvmSatoshiDiceReturns['CreateGameWithASAToken(axfer,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']
    }>
    & Record<'CreateGameWithArc200Token(uint64,uint256,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)' | 'CreateGameWithArc200Token', {
      argsObj: AvmSatoshiDiceArgs['obj']['CreateGameWithArc200Token(uint64,uint256,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']
      argsTuple: AvmSatoshiDiceArgs['tuple']['CreateGameWithArc200Token(uint64,uint256,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']
      returns: AvmSatoshiDiceReturns['CreateGameWithArc200Token(uint64,uint256,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']
    }>
    & Record<'StartGameWithNativeToken(pay,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)' | 'StartGameWithNativeToken', {
      argsObj: AvmSatoshiDiceArgs['obj']['StartGameWithNativeToken(pay,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)']
      argsTuple: AvmSatoshiDiceArgs['tuple']['StartGameWithNativeToken(pay,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)']
      returns: AvmSatoshiDiceReturns['StartGameWithNativeToken(pay,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)']
    }>
    & Record<'StartGameWithASAToken(axfer,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)' | 'StartGameWithASAToken', {
      argsObj: AvmSatoshiDiceArgs['obj']['StartGameWithASAToken(axfer,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)']
      argsTuple: AvmSatoshiDiceArgs['tuple']['StartGameWithASAToken(axfer,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)']
      returns: AvmSatoshiDiceReturns['StartGameWithASAToken(axfer,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)']
    }>
    & Record<'StartGameWithArc200Token(uint256,uint64,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)' | 'StartGameWithArc200Token', {
      argsObj: AvmSatoshiDiceArgs['obj']['StartGameWithArc200Token(uint256,uint64,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)']
      argsTuple: AvmSatoshiDiceArgs['tuple']['StartGameWithArc200Token(uint256,uint64,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)']
      returns: AvmSatoshiDiceReturns['StartGameWithArc200Token(uint256,uint64,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)']
    }>
    & Record<'Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)' | 'Game', {
      argsObj: AvmSatoshiDiceArgs['obj']['Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']
      argsTuple: AvmSatoshiDiceArgs['tuple']['Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']
      /**
       * the current game
       */
      returns: AvmSatoshiDiceReturns['Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']
    }>
    & Record<'MyGame()(uint64,uint64,uint64,uint256,uint64,address,address)' | 'MyGame', {
      argsObj: AvmSatoshiDiceArgs['obj']['MyGame()(uint64,uint64,uint64,uint256,uint64,address,address)']
      argsTuple: AvmSatoshiDiceArgs['tuple']['MyGame()(uint64,uint64,uint64,uint256,uint64,address,address)']
      /**
       * the current player game
       */
      returns: AvmSatoshiDiceReturns['MyGame()(uint64,uint64,uint64,uint256,uint64,address,address)']
    }>
    & Record<'ClaimGame()(uint64,uint64,uint64,uint256,uint64,address,address)' | 'ClaimGame', {
      argsObj: AvmSatoshiDiceArgs['obj']['ClaimGame()(uint64,uint64,uint64,uint256,uint64,address,address)']
      argsTuple: AvmSatoshiDiceArgs['tuple']['ClaimGame()(uint64,uint64,uint64,uint256,uint64,address,address)']
      returns: AvmSatoshiDiceReturns['ClaimGame()(uint64,uint64,uint64,uint256,uint64,address,address)']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        /**
         * Version of the smart contract
         */
        version: string
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        games: Map<AddressAssetStruct, GameStruct>
        plays: Map<string, PlayStruct>
        allDeposits: Map<bigint | number, bigint>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AvmSatoshiDiceSignatures = keyof AvmSatoshiDiceTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AvmSatoshiDiceNonVoidMethodSignatures = keyof AvmSatoshiDiceTypes['methods'] extends infer T ? T extends keyof AvmSatoshiDiceTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AvmSatoshiDice smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AvmSatoshiDiceSignatures> = AvmSatoshiDiceTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AvmSatoshiDice smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AvmSatoshiDiceSignatures> = AvmSatoshiDiceTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AvmSatoshiDiceTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = AvmSatoshiDiceTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AvmSatoshiDiceCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type AvmSatoshiDiceUpdateCallParams =
  | Expand<CallParams<AvmSatoshiDiceArgs['obj']['updateApplication(string)bool'] | AvmSatoshiDiceArgs['tuple']['updateApplication(string)bool']> & {method: 'updateApplication'}>
  | Expand<CallParams<AvmSatoshiDiceArgs['obj']['updateApplication(string)bool'] | AvmSatoshiDiceArgs['tuple']['updateApplication(string)bool']> & {method: 'updateApplication(string)bool'}>
/**
 * Defines arguments required for the deploy method.
 */
export type AvmSatoshiDiceDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AvmSatoshiDiceCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: AvmSatoshiDiceUpdateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AvmSatoshiDice smart contract
 */
export abstract class AvmSatoshiDiceParamsFactory {
  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends AvmSatoshiDiceUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'updateApplication':
          case 'updateApplication(string)bool':
            return AvmSatoshiDiceParamsFactory.update.updateApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the AvmSatoshiDice smart contract using the updateApplication(string)bool ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateApplication(params: CallParams<AvmSatoshiDiceArgs['obj']['updateApplication(string)bool'] | AvmSatoshiDiceArgs['tuple']['updateApplication(string)bool']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'updateApplication(string)bool' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.newVersion],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[] ABI method
   *
   * Creator can perfom key registration for this LP pool
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static sendOnlineKeyRegistration(params: CallParams<AvmSatoshiDiceArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]'] | AvmSatoshiDiceArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.voteKey, params.args.selectionKey, params.args.stateProofKey, params.args.voteFirst, params.args.voteLast, params.args.voteKeyDilution, params.args.fee],
    }
  }
  /**
   * Constructs a no op call for the withdraw(address,uint256,uint64,bool)void ABI method
   *
   * Biatec can withdraw service fees. The current balance
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdraw(params: CallParams<AvmSatoshiDiceArgs['obj']['withdraw(address,uint256,uint64,bool)void'] | AvmSatoshiDiceArgs['tuple']['withdraw(address,uint256,uint64,bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdraw(address,uint256,uint64,bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.receiver, params.args.amount, params.args.assetId, params.args.isArc200Token],
    }
  }
  /**
   * Constructs a no op call for the CreateGameWithNativeToken(pay,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address) ABI method
   *
   * Create new game or deposit by the owner more assets to the game.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createGameWithNativeToken(params: CallParams<AvmSatoshiDiceArgs['obj']['CreateGameWithNativeToken(pay,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'] | AvmSatoshiDiceArgs['tuple']['CreateGameWithNativeToken(pay,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'CreateGameWithNativeToken(pay,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.txnDeposit, params.args.winRatio],
    }
  }
  /**
   * Constructs a no op call for the OptInToASA(pay,uint64)void ABI method
   *
   * Anyone can optin this contract to his ASA if he deposits 10 native tokens
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optInToAsa(params: CallParams<AvmSatoshiDiceArgs['obj']['OptInToASA(pay,uint64)void'] | AvmSatoshiDiceArgs['tuple']['OptInToASA(pay,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'OptInToASA(pay,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.txnDeposit, params.args.assetId],
    }
  }
  /**
   * Constructs a no op call for the CreateGameWithASAToken(axfer,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address) ABI method
   *
   * Create new game or deposit by the owner more assets to the game.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createGameWithAsaToken(params: CallParams<AvmSatoshiDiceArgs['obj']['CreateGameWithASAToken(axfer,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'] | AvmSatoshiDiceArgs['tuple']['CreateGameWithASAToken(axfer,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'CreateGameWithASAToken(axfer,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.txnDeposit, params.args.winRatio],
    }
  }
  /**
   * Constructs a no op call for the CreateGameWithArc200Token(uint64,uint256,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address) ABI method
   *
   * Create new game or deposit by the owner more assets to the game.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createGameWithArc200Token(params: CallParams<AvmSatoshiDiceArgs['obj']['CreateGameWithArc200Token(uint64,uint256,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'] | AvmSatoshiDiceArgs['tuple']['CreateGameWithArc200Token(uint64,uint256,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'CreateGameWithArc200Token(uint64,uint256,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId, params.args.amount, params.args.winRatio],
    }
  }
  /**
   * Constructs a no op call for the StartGameWithNativeToken(pay,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address) ABI method
   *
  * Starts new game play
  
  Player selects win probability and the data is stored to the player's box storage.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static startGameWithNativeToken(params: CallParams<AvmSatoshiDiceArgs['obj']['StartGameWithNativeToken(pay,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)'] | AvmSatoshiDiceArgs['tuple']['StartGameWithNativeToken(pay,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'StartGameWithNativeToken(pay,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.txnDeposit, params.args.game, params.args.winProbability],
    }
  }
  /**
   * Constructs a no op call for the StartGameWithASAToken(axfer,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address) ABI method
   *
  * Starts new game play
  
  Player selects win probability and the data is stored to the player's box storage.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static startGameWithAsaToken(params: CallParams<AvmSatoshiDiceArgs['obj']['StartGameWithASAToken(axfer,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)'] | AvmSatoshiDiceArgs['tuple']['StartGameWithASAToken(axfer,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'StartGameWithASAToken(axfer,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.txnDeposit, params.args.game, params.args.winProbability],
    }
  }
  /**
   * Constructs a no op call for the StartGameWithArc200Token(uint256,uint64,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address) ABI method
   *
  * Starts new game play
  
  Player selects win probability and the data is stored to the player's box storage.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static startGameWithArc200Token(params: CallParams<AvmSatoshiDiceArgs['obj']['StartGameWithArc200Token(uint256,uint64,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)'] | AvmSatoshiDiceArgs['tuple']['StartGameWithArc200Token(uint256,uint64,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'StartGameWithArc200Token(uint256,uint64,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount, params.args.assetId, params.args.game, params.args.winProbability],
    }
  }
  /**
   * Constructs a no op call for the Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address) ABI method
   *
   * Returns the current state of the game
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static game(params: CallParams<AvmSatoshiDiceArgs['obj']['Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'] | AvmSatoshiDiceArgs['tuple']['Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.creator, params.args.assetId],
    }
  }
  /**
   * Constructs a no op call for the MyGame()(uint64,uint64,uint64,uint256,uint64,address,address) ABI method
   *
   * Returns the active user box
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static myGame(params: CallParams<AvmSatoshiDiceArgs['obj']['MyGame()(uint64,uint64,uint64,uint256,uint64,address,address)'] | AvmSatoshiDiceArgs['tuple']['MyGame()(uint64,uint64,uint64,uint256,uint64,address,address)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'MyGame()(uint64,uint64,uint64,uint256,uint64,address,address)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the ClaimGame()(uint64,uint64,uint64,uint256,uint64,address,address) ABI method
   *
  * Claim the game.
  
  If user won, he receives the assets
  
  If user lost, the game is funded with more balance

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimGame(params: CallParams<AvmSatoshiDiceArgs['obj']['ClaimGame()(uint64,uint64,uint64,uint256,uint64,address,address)'] | AvmSatoshiDiceArgs['tuple']['ClaimGame()(uint64,uint64,uint64,uint256,uint64,address,address)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'ClaimGame()(uint64,uint64,uint64,uint256,uint64,address,address)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AvmSatoshiDice smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AvmSatoshiDiceFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AvmSatoshiDiceFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AvmSatoshiDiceClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AvmSatoshiDiceClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the AvmSatoshiDice smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AvmSatoshiDiceDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      updateParams: params.updateParams?.method ? AvmSatoshiDiceParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams ? params.updateParams as (AvmSatoshiDiceUpdateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new AvmSatoshiDiceClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AvmSatoshiDice smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the AvmSatoshiDice smart contract using the updateApplication(string)bool ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateApplication: (params: CallParams<AvmSatoshiDiceArgs['obj']['updateApplication(string)bool'] | AvmSatoshiDiceArgs['tuple']['updateApplication(string)bool']> & AppClientCompilationParams) => {
        return this.appFactory.params.deployUpdate(AvmSatoshiDiceParamsFactory.update.updateApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AvmSatoshiDice smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AvmSatoshiDice smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new AvmSatoshiDiceClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the AvmSatoshiDice smart contract
 */
export class AvmSatoshiDiceClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AvmSatoshiDiceClient`
   *
   * @param appClient An `AppClient` instance which has been created with the AvmSatoshiDice app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AvmSatoshiDiceClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AvmSatoshiDiceNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AvmSatoshiDiceClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AvmSatoshiDiceClient> {
    return new AvmSatoshiDiceClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AvmSatoshiDiceClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AvmSatoshiDiceClient> {
    return new AvmSatoshiDiceClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the AvmSatoshiDice smart contract using the `updateApplication(string)bool` ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateApplication: (params: CallParams<AvmSatoshiDiceArgs['obj']['updateApplication(string)bool'] | AvmSatoshiDiceArgs['tuple']['updateApplication(string)bool']> & AppClientCompilationParams) => {
        return this.appClient.params.update(AvmSatoshiDiceParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the AvmSatoshiDice smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]` ABI method.
     *
     * Creator can perfom key registration for this LP pool
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    sendOnlineKeyRegistration: (params: CallParams<AvmSatoshiDiceArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]'] | AvmSatoshiDiceArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmSatoshiDiceParamsFactory.sendOnlineKeyRegistration(params))
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `withdraw(address,uint256,uint64,bool)void` ABI method.
     *
     * Biatec can withdraw service fees. The current balance
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdraw: (params: CallParams<AvmSatoshiDiceArgs['obj']['withdraw(address,uint256,uint64,bool)void'] | AvmSatoshiDiceArgs['tuple']['withdraw(address,uint256,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmSatoshiDiceParamsFactory.withdraw(params))
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `CreateGameWithNativeToken(pay,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)` ABI method.
     *
     * Create new game or deposit by the owner more assets to the game.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createGameWithNativeToken: (params: CallParams<AvmSatoshiDiceArgs['obj']['CreateGameWithNativeToken(pay,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'] | AvmSatoshiDiceArgs['tuple']['CreateGameWithNativeToken(pay,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmSatoshiDiceParamsFactory.createGameWithNativeToken(params))
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `OptInToASA(pay,uint64)void` ABI method.
     *
     * Anyone can optin this contract to his ASA if he deposits 10 native tokens
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optInToAsa: (params: CallParams<AvmSatoshiDiceArgs['obj']['OptInToASA(pay,uint64)void'] | AvmSatoshiDiceArgs['tuple']['OptInToASA(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmSatoshiDiceParamsFactory.optInToAsa(params))
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `CreateGameWithASAToken(axfer,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)` ABI method.
     *
     * Create new game or deposit by the owner more assets to the game.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createGameWithAsaToken: (params: CallParams<AvmSatoshiDiceArgs['obj']['CreateGameWithASAToken(axfer,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'] | AvmSatoshiDiceArgs['tuple']['CreateGameWithASAToken(axfer,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmSatoshiDiceParamsFactory.createGameWithAsaToken(params))
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `CreateGameWithArc200Token(uint64,uint256,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)` ABI method.
     *
     * Create new game or deposit by the owner more assets to the game.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createGameWithArc200Token: (params: CallParams<AvmSatoshiDiceArgs['obj']['CreateGameWithArc200Token(uint64,uint256,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'] | AvmSatoshiDiceArgs['tuple']['CreateGameWithArc200Token(uint64,uint256,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmSatoshiDiceParamsFactory.createGameWithArc200Token(params))
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `StartGameWithNativeToken(pay,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)` ABI method.
     *
    * Starts new game play
    
    Player selects win probability and the data is stored to the player's box storage.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    startGameWithNativeToken: (params: CallParams<AvmSatoshiDiceArgs['obj']['StartGameWithNativeToken(pay,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)'] | AvmSatoshiDiceArgs['tuple']['StartGameWithNativeToken(pay,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmSatoshiDiceParamsFactory.startGameWithNativeToken(params))
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `StartGameWithASAToken(axfer,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)` ABI method.
     *
    * Starts new game play
    
    Player selects win probability and the data is stored to the player's box storage.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    startGameWithAsaToken: (params: CallParams<AvmSatoshiDiceArgs['obj']['StartGameWithASAToken(axfer,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)'] | AvmSatoshiDiceArgs['tuple']['StartGameWithASAToken(axfer,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmSatoshiDiceParamsFactory.startGameWithAsaToken(params))
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `StartGameWithArc200Token(uint256,uint64,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)` ABI method.
     *
    * Starts new game play
    
    Player selects win probability and the data is stored to the player's box storage.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    startGameWithArc200Token: (params: CallParams<AvmSatoshiDiceArgs['obj']['StartGameWithArc200Token(uint256,uint64,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)'] | AvmSatoshiDiceArgs['tuple']['StartGameWithArc200Token(uint256,uint64,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmSatoshiDiceParamsFactory.startGameWithArc200Token(params))
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the current state of the game
     *
     * @param params The params for the smart contract call
     * @returns The call params: the current game
     */
    game: (params: CallParams<AvmSatoshiDiceArgs['obj']['Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'] | AvmSatoshiDiceArgs['tuple']['Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmSatoshiDiceParamsFactory.game(params))
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `MyGame()(uint64,uint64,uint64,uint256,uint64,address,address)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the active user box
     *
     * @param params The params for the smart contract call
     * @returns The call params: the current player game
     */
    myGame: (params: CallParams<AvmSatoshiDiceArgs['obj']['MyGame()(uint64,uint64,uint64,uint256,uint64,address,address)'] | AvmSatoshiDiceArgs['tuple']['MyGame()(uint64,uint64,uint64,uint256,uint64,address,address)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AvmSatoshiDiceParamsFactory.myGame(params))
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `ClaimGame()(uint64,uint64,uint64,uint256,uint64,address,address)` ABI method.
     *
    * Claim the game.
    
    If user won, he receives the assets
    
    If user lost, the game is funded with more balance

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimGame: (params: CallParams<AvmSatoshiDiceArgs['obj']['ClaimGame()(uint64,uint64,uint64,uint256,uint64,address,address)'] | AvmSatoshiDiceArgs['tuple']['ClaimGame()(uint64,uint64,uint64,uint256,uint64,address,address)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AvmSatoshiDiceParamsFactory.claimGame(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the AvmSatoshiDice smart contract using the `updateApplication(string)bool` ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateApplication: (params: CallParams<AvmSatoshiDiceArgs['obj']['updateApplication(string)bool'] | AvmSatoshiDiceArgs['tuple']['updateApplication(string)bool']> & AppClientCompilationParams) => {
        return this.appClient.createTransaction.update(AvmSatoshiDiceParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the AvmSatoshiDice smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]` ABI method.
     *
     * Creator can perfom key registration for this LP pool
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    sendOnlineKeyRegistration: (params: CallParams<AvmSatoshiDiceArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]'] | AvmSatoshiDiceArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmSatoshiDiceParamsFactory.sendOnlineKeyRegistration(params))
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `withdraw(address,uint256,uint64,bool)void` ABI method.
     *
     * Biatec can withdraw service fees. The current balance
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdraw: (params: CallParams<AvmSatoshiDiceArgs['obj']['withdraw(address,uint256,uint64,bool)void'] | AvmSatoshiDiceArgs['tuple']['withdraw(address,uint256,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmSatoshiDiceParamsFactory.withdraw(params))
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `CreateGameWithNativeToken(pay,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)` ABI method.
     *
     * Create new game or deposit by the owner more assets to the game.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createGameWithNativeToken: (params: CallParams<AvmSatoshiDiceArgs['obj']['CreateGameWithNativeToken(pay,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'] | AvmSatoshiDiceArgs['tuple']['CreateGameWithNativeToken(pay,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmSatoshiDiceParamsFactory.createGameWithNativeToken(params))
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `OptInToASA(pay,uint64)void` ABI method.
     *
     * Anyone can optin this contract to his ASA if he deposits 10 native tokens
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optInToAsa: (params: CallParams<AvmSatoshiDiceArgs['obj']['OptInToASA(pay,uint64)void'] | AvmSatoshiDiceArgs['tuple']['OptInToASA(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmSatoshiDiceParamsFactory.optInToAsa(params))
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `CreateGameWithASAToken(axfer,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)` ABI method.
     *
     * Create new game or deposit by the owner more assets to the game.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createGameWithAsaToken: (params: CallParams<AvmSatoshiDiceArgs['obj']['CreateGameWithASAToken(axfer,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'] | AvmSatoshiDiceArgs['tuple']['CreateGameWithASAToken(axfer,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmSatoshiDiceParamsFactory.createGameWithAsaToken(params))
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `CreateGameWithArc200Token(uint64,uint256,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)` ABI method.
     *
     * Create new game or deposit by the owner more assets to the game.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createGameWithArc200Token: (params: CallParams<AvmSatoshiDiceArgs['obj']['CreateGameWithArc200Token(uint64,uint256,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'] | AvmSatoshiDiceArgs['tuple']['CreateGameWithArc200Token(uint64,uint256,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmSatoshiDiceParamsFactory.createGameWithArc200Token(params))
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `StartGameWithNativeToken(pay,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)` ABI method.
     *
    * Starts new game play
    
    Player selects win probability and the data is stored to the player's box storage.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    startGameWithNativeToken: (params: CallParams<AvmSatoshiDiceArgs['obj']['StartGameWithNativeToken(pay,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)'] | AvmSatoshiDiceArgs['tuple']['StartGameWithNativeToken(pay,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmSatoshiDiceParamsFactory.startGameWithNativeToken(params))
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `StartGameWithASAToken(axfer,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)` ABI method.
     *
    * Starts new game play
    
    Player selects win probability and the data is stored to the player's box storage.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    startGameWithAsaToken: (params: CallParams<AvmSatoshiDiceArgs['obj']['StartGameWithASAToken(axfer,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)'] | AvmSatoshiDiceArgs['tuple']['StartGameWithASAToken(axfer,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmSatoshiDiceParamsFactory.startGameWithAsaToken(params))
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `StartGameWithArc200Token(uint256,uint64,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)` ABI method.
     *
    * Starts new game play
    
    Player selects win probability and the data is stored to the player's box storage.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    startGameWithArc200Token: (params: CallParams<AvmSatoshiDiceArgs['obj']['StartGameWithArc200Token(uint256,uint64,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)'] | AvmSatoshiDiceArgs['tuple']['StartGameWithArc200Token(uint256,uint64,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmSatoshiDiceParamsFactory.startGameWithArc200Token(params))
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the current state of the game
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: the current game
     */
    game: (params: CallParams<AvmSatoshiDiceArgs['obj']['Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'] | AvmSatoshiDiceArgs['tuple']['Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmSatoshiDiceParamsFactory.game(params))
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `MyGame()(uint64,uint64,uint64,uint256,uint64,address,address)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the active user box
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: the current player game
     */
    myGame: (params: CallParams<AvmSatoshiDiceArgs['obj']['MyGame()(uint64,uint64,uint64,uint256,uint64,address,address)'] | AvmSatoshiDiceArgs['tuple']['MyGame()(uint64,uint64,uint64,uint256,uint64,address,address)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AvmSatoshiDiceParamsFactory.myGame(params))
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `ClaimGame()(uint64,uint64,uint64,uint256,uint64,address,address)` ABI method.
     *
    * Claim the game.
    
    If user won, he receives the assets
    
    If user lost, the game is funded with more balance

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimGame: (params: CallParams<AvmSatoshiDiceArgs['obj']['ClaimGame()(uint64,uint64,uint64,uint256,uint64,address,address)'] | AvmSatoshiDiceArgs['tuple']['ClaimGame()(uint64,uint64,uint64,uint256,uint64,address,address)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AvmSatoshiDiceParamsFactory.claimGame(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the AvmSatoshiDice smart contract using the `updateApplication(string)bool` ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateApplication: async (params: CallParams<AvmSatoshiDiceArgs['obj']['updateApplication(string)bool'] | AvmSatoshiDiceArgs['tuple']['updateApplication(string)bool']> & AppClientCompilationParams & SendParams) => {
        const result = await this.appClient.send.update(AvmSatoshiDiceParamsFactory.update.updateApplication(params))
        return {...result, return: result.return as unknown as (undefined | AvmSatoshiDiceReturns['updateApplication(string)bool'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the AvmSatoshiDice smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]` ABI method.
     *
     * Creator can perfom key registration for this LP pool
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    sendOnlineKeyRegistration: async (params: CallParams<AvmSatoshiDiceArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]'] | AvmSatoshiDiceArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmSatoshiDiceParamsFactory.sendOnlineKeyRegistration(params))
      return {...result, return: result.return as unknown as (undefined | AvmSatoshiDiceReturns['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]'])}
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `withdraw(address,uint256,uint64,bool)void` ABI method.
     *
     * Biatec can withdraw service fees. The current balance
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdraw: async (params: CallParams<AvmSatoshiDiceArgs['obj']['withdraw(address,uint256,uint64,bool)void'] | AvmSatoshiDiceArgs['tuple']['withdraw(address,uint256,uint64,bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmSatoshiDiceParamsFactory.withdraw(params))
      return {...result, return: result.return as unknown as (undefined | AvmSatoshiDiceReturns['withdraw(address,uint256,uint64,bool)void'])}
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `CreateGameWithNativeToken(pay,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)` ABI method.
     *
     * Create new game or deposit by the owner more assets to the game.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createGameWithNativeToken: async (params: CallParams<AvmSatoshiDiceArgs['obj']['CreateGameWithNativeToken(pay,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'] | AvmSatoshiDiceArgs['tuple']['CreateGameWithNativeToken(pay,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmSatoshiDiceParamsFactory.createGameWithNativeToken(params))
      return {...result, return: result.return as unknown as (undefined | AvmSatoshiDiceReturns['CreateGameWithNativeToken(pay,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'])}
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `OptInToASA(pay,uint64)void` ABI method.
     *
     * Anyone can optin this contract to his ASA if he deposits 10 native tokens
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optInToAsa: async (params: CallParams<AvmSatoshiDiceArgs['obj']['OptInToASA(pay,uint64)void'] | AvmSatoshiDiceArgs['tuple']['OptInToASA(pay,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmSatoshiDiceParamsFactory.optInToAsa(params))
      return {...result, return: result.return as unknown as (undefined | AvmSatoshiDiceReturns['OptInToASA(pay,uint64)void'])}
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `CreateGameWithASAToken(axfer,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)` ABI method.
     *
     * Create new game or deposit by the owner more assets to the game.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createGameWithAsaToken: async (params: CallParams<AvmSatoshiDiceArgs['obj']['CreateGameWithASAToken(axfer,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'] | AvmSatoshiDiceArgs['tuple']['CreateGameWithASAToken(axfer,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmSatoshiDiceParamsFactory.createGameWithAsaToken(params))
      return {...result, return: result.return as unknown as (undefined | AvmSatoshiDiceReturns['CreateGameWithASAToken(axfer,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'])}
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `CreateGameWithArc200Token(uint64,uint256,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)` ABI method.
     *
     * Create new game or deposit by the owner more assets to the game.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createGameWithArc200Token: async (params: CallParams<AvmSatoshiDiceArgs['obj']['CreateGameWithArc200Token(uint64,uint256,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'] | AvmSatoshiDiceArgs['tuple']['CreateGameWithArc200Token(uint64,uint256,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmSatoshiDiceParamsFactory.createGameWithArc200Token(params))
      return {...result, return: result.return as unknown as (undefined | AvmSatoshiDiceReturns['CreateGameWithArc200Token(uint64,uint256,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'])}
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `StartGameWithNativeToken(pay,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)` ABI method.
     *
    * Starts new game play
    
    Player selects win probability and the data is stored to the player's box storage.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    startGameWithNativeToken: async (params: CallParams<AvmSatoshiDiceArgs['obj']['StartGameWithNativeToken(pay,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)'] | AvmSatoshiDiceArgs['tuple']['StartGameWithNativeToken(pay,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmSatoshiDiceParamsFactory.startGameWithNativeToken(params))
      return {...result, return: result.return as unknown as (undefined | AvmSatoshiDiceReturns['StartGameWithNativeToken(pay,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)'])}
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `StartGameWithASAToken(axfer,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)` ABI method.
     *
    * Starts new game play
    
    Player selects win probability and the data is stored to the player's box storage.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    startGameWithAsaToken: async (params: CallParams<AvmSatoshiDiceArgs['obj']['StartGameWithASAToken(axfer,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)'] | AvmSatoshiDiceArgs['tuple']['StartGameWithASAToken(axfer,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmSatoshiDiceParamsFactory.startGameWithAsaToken(params))
      return {...result, return: result.return as unknown as (undefined | AvmSatoshiDiceReturns['StartGameWithASAToken(axfer,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)'])}
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `StartGameWithArc200Token(uint256,uint64,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)` ABI method.
     *
    * Starts new game play
    
    Player selects win probability and the data is stored to the player's box storage.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    startGameWithArc200Token: async (params: CallParams<AvmSatoshiDiceArgs['obj']['StartGameWithArc200Token(uint256,uint64,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)'] | AvmSatoshiDiceArgs['tuple']['StartGameWithArc200Token(uint256,uint64,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmSatoshiDiceParamsFactory.startGameWithArc200Token(params))
      return {...result, return: result.return as unknown as (undefined | AvmSatoshiDiceReturns['StartGameWithArc200Token(uint256,uint64,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)'])}
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the current state of the game
     *
     * @param params The params for the smart contract call
     * @returns The call result: the current game
     */
    game: async (params: CallParams<AvmSatoshiDiceArgs['obj']['Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'] | AvmSatoshiDiceArgs['tuple']['Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmSatoshiDiceParamsFactory.game(params))
      return {...result, return: result.return as unknown as (undefined | AvmSatoshiDiceReturns['Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'])}
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `MyGame()(uint64,uint64,uint64,uint256,uint64,address,address)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the active user box
     *
     * @param params The params for the smart contract call
     * @returns The call result: the current player game
     */
    myGame: async (params: CallParams<AvmSatoshiDiceArgs['obj']['MyGame()(uint64,uint64,uint64,uint256,uint64,address,address)'] | AvmSatoshiDiceArgs['tuple']['MyGame()(uint64,uint64,uint64,uint256,uint64,address,address)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AvmSatoshiDiceParamsFactory.myGame(params))
      return {...result, return: result.return as unknown as (undefined | AvmSatoshiDiceReturns['MyGame()(uint64,uint64,uint64,uint256,uint64,address,address)'])}
    },

    /**
     * Makes a call to the AvmSatoshiDice smart contract using the `ClaimGame()(uint64,uint64,uint64,uint256,uint64,address,address)` ABI method.
     *
    * Claim the game.
    
    If user won, he receives the assets
    
    If user lost, the game is funded with more balance

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimGame: async (params: CallParams<AvmSatoshiDiceArgs['obj']['ClaimGame()(uint64,uint64,uint64,uint256,uint64,address,address)'] | AvmSatoshiDiceArgs['tuple']['ClaimGame()(uint64,uint64,uint64,uint256,uint64,address,address)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AvmSatoshiDiceParamsFactory.claimGame(params))
      return {...result, return: result.return as unknown as (undefined | AvmSatoshiDiceReturns['ClaimGame()(uint64,uint64,uint64,uint256,uint64,address,address)'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AvmSatoshiDiceClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the AvmSatoshiDice smart contract using the `Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the current state of the game
   *
   * @param params The params for the smart contract call
   * @returns The call result: the current game
   */
  async game(params: CallParams<AvmSatoshiDiceArgs['obj']['Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'] | AvmSatoshiDiceArgs['tuple']['Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']>) {
    const result = await this.appClient.send.call(AvmSatoshiDiceParamsFactory.game(params))
    return result.return as unknown as AvmSatoshiDiceReturns['Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']
  }

  /**
   * Makes a readonly (simulated) call to the AvmSatoshiDice smart contract using the `MyGame()(uint64,uint64,uint64,uint256,uint64,address,address)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the active user box
   *
   * @param params The params for the smart contract call
   * @returns The call result: the current player game
   */
  async myGame(params: CallParams<AvmSatoshiDiceArgs['obj']['MyGame()(uint64,uint64,uint64,uint256,uint64,address,address)'] | AvmSatoshiDiceArgs['tuple']['MyGame()(uint64,uint64,uint64,uint256,uint64,address,address)']> = {args: []}) {
    const result = await this.appClient.send.call(AvmSatoshiDiceParamsFactory.myGame(params))
    return result.return as unknown as AvmSatoshiDiceReturns['MyGame()(uint64,uint64,uint64,uint256,uint64,address,address)']
  }

  /**
   * Methods to access state for the current AvmSatoshiDice app
   */
  state = {
    /**
     * Methods to access global state for the current AvmSatoshiDice app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          version: result.version,
        }
      },
      /**
       * Get the current value of the version key in global state
       */
      version: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("version")) as string | undefined },
    },
    /**
     * Methods to access box state for the current AvmSatoshiDice app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the games map in box state
       */
      games: {
        /**
         * Get all current values of the games map in box state
         */
        getMap: async (): Promise<Map<AddressAssetStruct, GameStruct>> => { return (await this.appClient.state.box.getMap("games")) as Map<AddressAssetStruct, GameStruct> },
        /**
         * Get a current value of the games map by key from box state
         */
        value: async (key: AddressAssetStruct): Promise<GameStruct | undefined> => { return await this.appClient.state.box.getMapValue("games", key) as GameStruct | undefined },
      },
      /**
       * Get values from the plays map in box state
       */
      plays: {
        /**
         * Get all current values of the plays map in box state
         */
        getMap: async (): Promise<Map<string, PlayStruct>> => { return (await this.appClient.state.box.getMap("plays")) as Map<string, PlayStruct> },
        /**
         * Get a current value of the plays map by key from box state
         */
        value: async (key: string): Promise<PlayStruct | undefined> => { return await this.appClient.state.box.getMapValue("plays", key) as PlayStruct | undefined },
      },
      /**
       * Get values from the allDeposits map in box state
       */
      allDeposits: {
        /**
         * Get all current values of the allDeposits map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => { return (await this.appClient.state.box.getMap("allDeposits")) as Map<bigint, bigint> },
        /**
         * Get a current value of the allDeposits map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("allDeposits", key) as bigint | undefined },
      },
    },
  }

  public newGroup(): AvmSatoshiDiceComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[] method call against the AvmSatoshiDice contract
       */
      sendOnlineKeyRegistration(params: CallParams<AvmSatoshiDiceArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]'] | AvmSatoshiDiceArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.sendOnlineKeyRegistration(params)))
        resultMappers.push((v) => client.decodeReturnValue('sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]', v))
        return this
      },
      /**
       * Add a withdraw(address,uint256,uint64,bool)void method call against the AvmSatoshiDice contract
       */
      withdraw(params: CallParams<AvmSatoshiDiceArgs['obj']['withdraw(address,uint256,uint64,bool)void'] | AvmSatoshiDiceArgs['tuple']['withdraw(address,uint256,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdraw(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a CreateGameWithNativeToken(pay,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address) method call against the AvmSatoshiDice contract
       */
      createGameWithNativeToken(params: CallParams<AvmSatoshiDiceArgs['obj']['CreateGameWithNativeToken(pay,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'] | AvmSatoshiDiceArgs['tuple']['CreateGameWithNativeToken(pay,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createGameWithNativeToken(params)))
        resultMappers.push((v) => client.decodeReturnValue('CreateGameWithNativeToken(pay,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)', v))
        return this
      },
      /**
       * Add a OptInToASA(pay,uint64)void method call against the AvmSatoshiDice contract
       */
      optInToAsa(params: CallParams<AvmSatoshiDiceArgs['obj']['OptInToASA(pay,uint64)void'] | AvmSatoshiDiceArgs['tuple']['OptInToASA(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optInToAsa(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a CreateGameWithASAToken(axfer,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address) method call against the AvmSatoshiDice contract
       */
      createGameWithAsaToken(params: CallParams<AvmSatoshiDiceArgs['obj']['CreateGameWithASAToken(axfer,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'] | AvmSatoshiDiceArgs['tuple']['CreateGameWithASAToken(axfer,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createGameWithAsaToken(params)))
        resultMappers.push((v) => client.decodeReturnValue('CreateGameWithASAToken(axfer,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)', v))
        return this
      },
      /**
       * Add a CreateGameWithArc200Token(uint64,uint256,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address) method call against the AvmSatoshiDice contract
       */
      createGameWithArc200Token(params: CallParams<AvmSatoshiDiceArgs['obj']['CreateGameWithArc200Token(uint64,uint256,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'] | AvmSatoshiDiceArgs['tuple']['CreateGameWithArc200Token(uint64,uint256,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createGameWithArc200Token(params)))
        resultMappers.push((v) => client.decodeReturnValue('CreateGameWithArc200Token(uint64,uint256,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)', v))
        return this
      },
      /**
       * Add a StartGameWithNativeToken(pay,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address) method call against the AvmSatoshiDice contract
       */
      startGameWithNativeToken(params: CallParams<AvmSatoshiDiceArgs['obj']['StartGameWithNativeToken(pay,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)'] | AvmSatoshiDiceArgs['tuple']['StartGameWithNativeToken(pay,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.startGameWithNativeToken(params)))
        resultMappers.push((v) => client.decodeReturnValue('StartGameWithNativeToken(pay,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)', v))
        return this
      },
      /**
       * Add a StartGameWithASAToken(axfer,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address) method call against the AvmSatoshiDice contract
       */
      startGameWithAsaToken(params: CallParams<AvmSatoshiDiceArgs['obj']['StartGameWithASAToken(axfer,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)'] | AvmSatoshiDiceArgs['tuple']['StartGameWithASAToken(axfer,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.startGameWithAsaToken(params)))
        resultMappers.push((v) => client.decodeReturnValue('StartGameWithASAToken(axfer,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)', v))
        return this
      },
      /**
       * Add a StartGameWithArc200Token(uint256,uint64,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address) method call against the AvmSatoshiDice contract
       */
      startGameWithArc200Token(params: CallParams<AvmSatoshiDiceArgs['obj']['StartGameWithArc200Token(uint256,uint64,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)'] | AvmSatoshiDiceArgs['tuple']['StartGameWithArc200Token(uint256,uint64,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.startGameWithArc200Token(params)))
        resultMappers.push((v) => client.decodeReturnValue('StartGameWithArc200Token(uint256,uint64,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)', v))
        return this
      },
      /**
       * Add a Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address) method call against the AvmSatoshiDice contract
       */
      game(params: CallParams<AvmSatoshiDiceArgs['obj']['Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'] | AvmSatoshiDiceArgs['tuple']['Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.game(params)))
        resultMappers.push((v) => client.decodeReturnValue('Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)', v))
        return this
      },
      /**
       * Add a MyGame()(uint64,uint64,uint64,uint256,uint64,address,address) method call against the AvmSatoshiDice contract
       */
      myGame(params: CallParams<AvmSatoshiDiceArgs['obj']['MyGame()(uint64,uint64,uint64,uint256,uint64,address,address)'] | AvmSatoshiDiceArgs['tuple']['MyGame()(uint64,uint64,uint64,uint256,uint64,address,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.myGame(params)))
        resultMappers.push((v) => client.decodeReturnValue('MyGame()(uint64,uint64,uint64,uint256,uint64,address,address)', v))
        return this
      },
      /**
       * Add a ClaimGame()(uint64,uint64,uint64,uint256,uint64,address,address) method call against the AvmSatoshiDice contract
       */
      claimGame(params: CallParams<AvmSatoshiDiceArgs['obj']['ClaimGame()(uint64,uint64,uint64,uint256,uint64,address,address)'] | AvmSatoshiDiceArgs['tuple']['ClaimGame()(uint64,uint64,uint64,uint256,uint64,address,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claimGame(params)))
        resultMappers.push((v) => client.decodeReturnValue('ClaimGame()(uint64,uint64,uint64,uint256,uint64,address,address)', v))
        return this
      },
      get update() {
        return {
          updateApplication: (params: CallParams<AvmSatoshiDiceArgs['obj']['updateApplication(string)bool'] | AvmSatoshiDiceArgs['tuple']['updateApplication(string)bool']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.updateApplication(params)))
            resultMappers.push((v) => client.decodeReturnValue('updateApplication(string)bool', v))
            return this
          },
        }
      },
      /**
       * Add a clear state call to the AvmSatoshiDice contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AvmSatoshiDiceComposer
  }
}
export type AvmSatoshiDiceComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[] ABI method.
   *
   * Creator can perfom key registration for this LP pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendOnlineKeyRegistration(params?: CallParams<AvmSatoshiDiceArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]'] | AvmSatoshiDiceArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]']>): AvmSatoshiDiceComposer<[...TReturns, AvmSatoshiDiceReturns['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]'] | undefined]>

  /**
   * Calls the withdraw(address,uint256,uint64,bool)void ABI method.
   *
   * Biatec can withdraw service fees. The current balance
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdraw(params?: CallParams<AvmSatoshiDiceArgs['obj']['withdraw(address,uint256,uint64,bool)void'] | AvmSatoshiDiceArgs['tuple']['withdraw(address,uint256,uint64,bool)void']>): AvmSatoshiDiceComposer<[...TReturns, AvmSatoshiDiceReturns['withdraw(address,uint256,uint64,bool)void'] | undefined]>

  /**
   * Calls the CreateGameWithNativeToken(pay,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address) ABI method.
   *
   * Create new game or deposit by the owner more assets to the game.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createGameWithNativeToken(params?: CallParams<AvmSatoshiDiceArgs['obj']['CreateGameWithNativeToken(pay,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'] | AvmSatoshiDiceArgs['tuple']['CreateGameWithNativeToken(pay,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']>): AvmSatoshiDiceComposer<[...TReturns, AvmSatoshiDiceReturns['CreateGameWithNativeToken(pay,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'] | undefined]>

  /**
   * Calls the OptInToASA(pay,uint64)void ABI method.
   *
   * Anyone can optin this contract to his ASA if he deposits 10 native tokens
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToAsa(params?: CallParams<AvmSatoshiDiceArgs['obj']['OptInToASA(pay,uint64)void'] | AvmSatoshiDiceArgs['tuple']['OptInToASA(pay,uint64)void']>): AvmSatoshiDiceComposer<[...TReturns, AvmSatoshiDiceReturns['OptInToASA(pay,uint64)void'] | undefined]>

  /**
   * Calls the CreateGameWithASAToken(axfer,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address) ABI method.
   *
   * Create new game or deposit by the owner more assets to the game.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createGameWithAsaToken(params?: CallParams<AvmSatoshiDiceArgs['obj']['CreateGameWithASAToken(axfer,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'] | AvmSatoshiDiceArgs['tuple']['CreateGameWithASAToken(axfer,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']>): AvmSatoshiDiceComposer<[...TReturns, AvmSatoshiDiceReturns['CreateGameWithASAToken(axfer,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'] | undefined]>

  /**
   * Calls the CreateGameWithArc200Token(uint64,uint256,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address) ABI method.
   *
   * Create new game or deposit by the owner more assets to the game.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createGameWithArc200Token(params?: CallParams<AvmSatoshiDiceArgs['obj']['CreateGameWithArc200Token(uint64,uint256,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'] | AvmSatoshiDiceArgs['tuple']['CreateGameWithArc200Token(uint64,uint256,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']>): AvmSatoshiDiceComposer<[...TReturns, AvmSatoshiDiceReturns['CreateGameWithArc200Token(uint64,uint256,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'] | undefined]>

  /**
   * Calls the StartGameWithNativeToken(pay,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address) ABI method.
   *
  * Starts new game play
  
  Player selects win probability and the data is stored to the player's box storage.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  startGameWithNativeToken(params?: CallParams<AvmSatoshiDiceArgs['obj']['StartGameWithNativeToken(pay,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)'] | AvmSatoshiDiceArgs['tuple']['StartGameWithNativeToken(pay,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)']>): AvmSatoshiDiceComposer<[...TReturns, AvmSatoshiDiceReturns['StartGameWithNativeToken(pay,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)'] | undefined]>

  /**
   * Calls the StartGameWithASAToken(axfer,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address) ABI method.
   *
  * Starts new game play
  
  Player selects win probability and the data is stored to the player's box storage.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  startGameWithAsaToken(params?: CallParams<AvmSatoshiDiceArgs['obj']['StartGameWithASAToken(axfer,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)'] | AvmSatoshiDiceArgs['tuple']['StartGameWithASAToken(axfer,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)']>): AvmSatoshiDiceComposer<[...TReturns, AvmSatoshiDiceReturns['StartGameWithASAToken(axfer,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)'] | undefined]>

  /**
   * Calls the StartGameWithArc200Token(uint256,uint64,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address) ABI method.
   *
  * Starts new game play
  
  Player selects win probability and the data is stored to the player's box storage.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  startGameWithArc200Token(params?: CallParams<AvmSatoshiDiceArgs['obj']['StartGameWithArc200Token(uint256,uint64,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)'] | AvmSatoshiDiceArgs['tuple']['StartGameWithArc200Token(uint256,uint64,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)']>): AvmSatoshiDiceComposer<[...TReturns, AvmSatoshiDiceReturns['StartGameWithArc200Token(uint256,uint64,(uint64,address),uint64)(uint64,uint64,uint64,uint256,uint64,address,address)'] | undefined]>

  /**
   * Calls the Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address) ABI method.
   *
   * Returns the current state of the game
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  game(params?: CallParams<AvmSatoshiDiceArgs['obj']['Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'] | AvmSatoshiDiceArgs['tuple']['Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)']>): AvmSatoshiDiceComposer<[...TReturns, AvmSatoshiDiceReturns['Game(address,uint64)(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,uint256,uint64,address)'] | undefined]>

  /**
   * Calls the MyGame()(uint64,uint64,uint64,uint256,uint64,address,address) ABI method.
   *
   * Returns the active user box
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  myGame(params?: CallParams<AvmSatoshiDiceArgs['obj']['MyGame()(uint64,uint64,uint64,uint256,uint64,address,address)'] | AvmSatoshiDiceArgs['tuple']['MyGame()(uint64,uint64,uint64,uint256,uint64,address,address)']>): AvmSatoshiDiceComposer<[...TReturns, AvmSatoshiDiceReturns['MyGame()(uint64,uint64,uint64,uint256,uint64,address,address)'] | undefined]>

  /**
   * Calls the ClaimGame()(uint64,uint64,uint64,uint256,uint64,address,address) ABI method.
   *
  * Claim the game.
  
  If user won, he receives the assets
  
  If user lost, the game is funded with more balance

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimGame(params?: CallParams<AvmSatoshiDiceArgs['obj']['ClaimGame()(uint64,uint64,uint64,uint256,uint64,address,address)'] | AvmSatoshiDiceArgs['tuple']['ClaimGame()(uint64,uint64,uint64,uint256,uint64,address,address)']>): AvmSatoshiDiceComposer<[...TReturns, AvmSatoshiDiceReturns['ClaimGame()(uint64,uint64,uint64,uint256,uint64,address,address)'] | undefined]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the AvmSatoshiDice smart contract using the updateApplication(string)bool ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateApplication(params?: CallParams<AvmSatoshiDiceArgs['obj']['updateApplication(string)bool'] | AvmSatoshiDiceArgs['tuple']['updateApplication(string)bool']>): AvmSatoshiDiceComposer<[...TReturns, AvmSatoshiDiceReturns['updateApplication(string)bool'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the AvmSatoshiDice smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AvmSatoshiDiceComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AvmSatoshiDiceComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AvmSatoshiDiceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AvmSatoshiDiceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AvmSatoshiDiceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AvmSatoshiDiceComposerResults<TReturns>>
}
export type AvmSatoshiDiceComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

