{
    "name": "AvmSatoshiDice",
    "structs": {
        "AddressAssetStruct": [
            {
                "name": "assetId",
                "type": "uint64"
            },
            {
                "name": "owner",
                "type": "address"
            }
        ],
        "GameStruct": [
            {
                "name": "balance",
                "type": "uint256"
            },
            {
                "name": "assetId",
                "type": "uint64"
            },
            {
                "name": "isNativeToken",
                "type": "bool"
            },
            {
                "name": "isASAToken",
                "type": "bool"
            },
            {
                "name": "isArc200Token",
                "type": "bool"
            },
            {
                "name": "createdAtTime",
                "type": "uint64"
            },
            {
                "name": "createdAtRound",
                "type": "uint64"
            },
            {
                "name": "lastPlayedTime",
                "type": "uint64"
            },
            {
                "name": "lastWinTime",
                "type": "uint64"
            },
            {
                "name": "lastWinAmount",
                "type": "uint256"
            },
            {
                "name": "biggestWinTime",
                "type": "uint64"
            },
            {
                "name": "biggestWinAmount",
                "type": "uint256"
            },
            {
                "name": "winRatio",
                "type": "uint64"
            },
            {
                "name": "owner",
                "type": "address"
            }
        ],
        "PlayStruct": [
            {
                "name": "state",
                "type": "uint64"
            },
            {
                "name": "winProbability",
                "type": "uint64"
            },
            {
                "name": "round",
                "type": "uint64"
            },
            {
                "name": "deposit",
                "type": "uint256"
            },
            {
                "name": "assetId",
                "type": "uint64"
            },
            {
                "name": "gameCreator",
                "type": "address"
            },
            {
                "name": "owner",
                "type": "address"
            }
        ]
    },
    "methods": [
        {
            "name": "updateApplication",
            "args": [
                {
                    "type": "string",
                    "name": "newVersion"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "UpdateApplication"
                ]
            },
            "readonly": false,
            "desc": "addressUdpater from global biatec configuration is allowed to update application",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sendOnlineKeyRegistration",
            "args": [
                {
                    "type": "byte[]",
                    "name": "voteKey"
                },
                {
                    "type": "byte[]",
                    "name": "selectionKey"
                },
                {
                    "type": "byte[]",
                    "name": "stateProofKey"
                },
                {
                    "type": "uint64",
                    "name": "voteFirst"
                },
                {
                    "type": "uint64",
                    "name": "voteLast"
                },
                {
                    "type": "uint64",
                    "name": "voteKeyDilution"
                },
                {
                    "type": "uint64",
                    "name": "fee"
                }
            ],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Creator can perfom key registration for this LP pool",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw",
            "args": [
                {
                    "type": "address",
                    "name": "receiver",
                    "desc": "Receiver"
                },
                {
                    "type": "uint256",
                    "name": "amount",
                    "desc": "Amout to send"
                },
                {
                    "type": "uint64",
                    "name": "assetId"
                },
                {
                    "type": "bool",
                    "name": "isArc200Token"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Biatec can withdraw service fees. The current balance",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "CreateGameWithNativeToken",
            "args": [
                {
                    "type": "pay",
                    "name": "txnDeposit",
                    "desc": "Deposit transaction"
                },
                {
                    "type": "uint64",
                    "name": "winRatio",
                    "desc": "Win ratio.. 1_000_000 for user probability, 200_000 for 0.2 factor of the user probability, 0 for no win"
                }
            ],
            "returns": {
                "type": "(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint64,uint256,uint64,uint256,uint64,address)",
                "struct": "GameStruct"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create new game or deposit by the owner more assets to the game.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "OptInToASA",
            "args": [
                {
                    "type": "pay",
                    "name": "txnDeposit",
                    "desc": "Deposit tx"
                },
                {
                    "type": "uint64",
                    "name": "assetId",
                    "desc": "Assset id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Anyone can optin this contract to his ASA if he deposits 10 native tokens",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "CreateGameWithASAToken",
            "args": [
                {
                    "type": "axfer",
                    "name": "txnDeposit",
                    "desc": "Deposit transaction"
                },
                {
                    "type": "uint64",
                    "name": "winRatio",
                    "desc": "Win ratio.. 1_000_000 for user probability, 200_000 for 0.2 factor of the user probability, 0 for no win"
                }
            ],
            "returns": {
                "type": "(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint64,uint256,uint64,uint256,uint64,address)",
                "struct": "GameStruct"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create new game or deposit by the owner more assets to the game.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "CreateGameWithArc200Token",
            "args": [
                {
                    "type": "uint64",
                    "name": "assetId"
                },
                {
                    "type": "uint256",
                    "name": "amount"
                },
                {
                    "type": "uint64",
                    "name": "winRatio",
                    "desc": "Win ratio.. 1_000_000 for user probability, 200_000 for 0.2 factor of the user probability, 0 for no win"
                }
            ],
            "returns": {
                "type": "(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint64,uint256,uint64,uint256,uint64,address)",
                "struct": "GameStruct"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create new game or deposit by the owner more assets to the game.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "StartGameWithNativeToken",
            "args": [
                {
                    "type": "pay",
                    "name": "txnDeposit",
                    "desc": "Deposit"
                },
                {
                    "type": "(uint64,address)",
                    "struct": "AddressAssetStruct",
                    "name": "game",
                    "desc": "The"
                },
                {
                    "type": "uint64",
                    "name": "winProbability",
                    "desc": ""
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,uint256,uint64,address,address)",
                "struct": "PlayStruct"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Starts new game play\n\nPlayer selects win probability and the data is stored to the player's box storage.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "StartGameWithASAToken",
            "args": [
                {
                    "type": "axfer",
                    "name": "txnDeposit",
                    "desc": "Deposit"
                },
                {
                    "type": "(uint64,address)",
                    "struct": "AddressAssetStruct",
                    "name": "game",
                    "desc": "The"
                },
                {
                    "type": "uint64",
                    "name": "winProbability",
                    "desc": ""
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,uint256,uint64,address,address)",
                "struct": "PlayStruct"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Starts new game play\n\nPlayer selects win probability and the data is stored to the player's box storage.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "StartGameWithArc200Token",
            "args": [
                {
                    "type": "uint256",
                    "name": "amount"
                },
                {
                    "type": "uint64",
                    "name": "assetId"
                },
                {
                    "type": "(uint64,address)",
                    "struct": "AddressAssetStruct",
                    "name": "game",
                    "desc": "The"
                },
                {
                    "type": "uint64",
                    "name": "winProbability",
                    "desc": ""
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,uint256,uint64,address,address)",
                "struct": "PlayStruct"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Starts new game play\n\nPlayer selects win probability and the data is stored to the player's box storage.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "Game",
            "args": [
                {
                    "type": "address",
                    "name": "creator"
                },
                {
                    "type": "uint64",
                    "name": "assetId"
                }
            ],
            "returns": {
                "type": "(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint64,uint256,uint64,uint256,uint64,address)",
                "struct": "GameStruct",
                "desc": "the current game"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the current state of the game",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "MyGame",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64,uint256,uint64,address,address)",
                "struct": "PlayStruct",
                "desc": "the current player game"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the active user box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "ClaimGame",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64,uint256,uint64,address,address)",
                "struct": "PlayStruct"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Claim the game.\n\nIf user won, he receives the assets\n\nIf user lost, the game is funded with more balance",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "version": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "c2N2ZXI=",
                    "desc": "Version of the smart contract"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "games": {
                    "keyType": "AddressAssetStruct",
                    "valueType": "GameStruct",
                    "prefix": "Zw=="
                },
                "plays": {
                    "keyType": "address",
                    "valueType": "PlayStruct",
                    "prefix": "cA=="
                },
                "allDeposits": {
                    "keyType": "uint64",
                    "valueType": "uint256",
                    "prefix": "ZA=="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        2031,
                        2251,
                        2456
                    ],
                    "errorMessage": "Asset id in the tx does not match the game asset id"
                },
                {
                    "pc": [
                        734,
                        805,
                        817,
                        1010,
                        1119,
                        1224,
                        1278,
                        1293,
                        1307,
                        1316,
                        1334,
                        1344,
                        1353,
                        1526,
                        1581,
                        1595,
                        1609,
                        1624,
                        1634,
                        1652,
                        1662,
                        1671,
                        1777,
                        1851,
                        1865,
                        1880,
                        1894,
                        1904,
                        1922,
                        1932,
                        1941,
                        2046,
                        2077,
                        2092,
                        2116,
                        2142,
                        2266,
                        2298,
                        2313,
                        2337,
                        2369,
                        2471,
                        2503,
                        2518,
                        2569,
                        2601,
                        2680,
                        2693,
                        2722,
                        2752,
                        2782,
                        2858,
                        2872,
                        2890,
                        2905,
                        2952,
                        3008,
                        3017,
                        3097,
                        3156,
                        3165,
                        3252,
                        3308,
                        3317,
                        3354,
                        3384,
                        3420,
                        3459,
                        3471
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        2678,
                        2747
                    ],
                    "errorMessage": "Did not found the game"
                },
                {
                    "pc": [
                        2691,
                        2716
                    ],
                    "errorMessage": "Did not found the game you are playing"
                },
                {
                    "pc": [
                        782
                    ],
                    "errorMessage": "Game creator can withdraw from the game only the game deposit"
                },
                {
                    "pc": [
                        749,
                        775,
                        1308,
                        1317,
                        1625,
                        1635,
                        1895,
                        1905,
                        2023,
                        2047,
                        2117,
                        2180,
                        2238,
                        2267,
                        2338,
                        2407,
                        2447,
                        2472,
                        2570,
                        2632,
                        2724,
                        2729,
                        2820,
                        2879,
                        2930,
                        2983,
                        3028,
                        3075,
                        3131,
                        3176,
                        3230,
                        3286,
                        3328,
                        3398,
                        3411,
                        3441
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        260,
                        276,
                        292,
                        314,
                        342,
                        375,
                        407,
                        432,
                        462,
                        487,
                        516,
                        540
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        600
                    ],
                    "errorMessage": "OnCompletion is not UpdateApplication"
                },
                {
                    "pc": [
                        643
                    ],
                    "errorMessage": "Only creator can update application"
                },
                {
                    "pc": [
                        664
                    ],
                    "errorMessage": "Only creator can use this method"
                },
                {
                    "pc": [
                        1437
                    ],
                    "errorMessage": "Opt in fee for new asset is 10 native tokens"
                },
                {
                    "pc": [
                        1256,
                        1558
                    ],
                    "errorMessage": "Receiver must be the gas station app"
                },
                {
                    "pc": [
                        1426
                    ],
                    "errorMessage": "Receiver of the optin fee must be the current smart contract"
                },
                {
                    "pc": [
                        2020,
                        2235
                    ],
                    "errorMessage": "Sender of the app call must be the same as sender of the deposit"
                },
                {
                    "pc": [
                        2044,
                        2264,
                        2469
                    ],
                    "errorMessage": "The game does not exist"
                },
                {
                    "pc": [
                        2124,
                        2345,
                        2577
                    ],
                    "errorMessage": "The game does not have enough balance for your win scenario. You can win max 50% of the game balance"
                },
                {
                    "pc": [
                        983
                    ],
                    "errorMessage": "The game for this asset does not exists"
                },
                {
                    "pc": [
                        1304
                    ],
                    "errorMessage": "The previous game was ASA token"
                },
                {
                    "pc": [
                        1877
                    ],
                    "errorMessage": "The previous game was NOT for the arc200 token"
                },
                {
                    "pc": [
                        1891
                    ],
                    "errorMessage": "The previous game was for the ASA token"
                },
                {
                    "pc": [
                        1606
                    ],
                    "errorMessage": "The previous game was for the arc200 token"
                },
                {
                    "pc": [
                        1592,
                        1862
                    ],
                    "errorMessage": "The previous game was for the native token"
                },
                {
                    "pc": [
                        1621
                    ],
                    "errorMessage": "The previous game was not for the ASA token"
                },
                {
                    "pc": [
                        1290,
                        1313
                    ],
                    "errorMessage": "The previous game was not for the native token"
                },
                {
                    "pc": [
                        1631,
                        1901
                    ],
                    "errorMessage": "The previous game was not for the same token"
                },
                {
                    "pc": [
                        2962,
                        2990,
                        3107,
                        3138,
                        3262,
                        3293
                    ],
                    "errorMessage": "There is not enough money in the sc to cover this win tx"
                },
                {
                    "pc": [
                        2052,
                        2273,
                        2478
                    ],
                    "errorMessage": "This game must be played with native token"
                },
                {
                    "pc": [
                        1199,
                        1490,
                        1747,
                        2062,
                        2283,
                        2488
                    ],
                    "errorMessage": "Win probability must be below 1 000 000"
                },
                {
                    "pc": [
                        2082,
                        2303,
                        2508
                    ],
                    "errorMessage": "Your previous game has not yet been claimed"
                },
                {
                    "pc": [
                        997,
                        1002
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        1112
                    ],
                    "errorMessage": "account opted into asset"
                },
                {
                    "pc": [
                        632
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        263,
                        279,
                        295,
                        317,
                        345,
                        378,
                        410,
                        435,
                        465,
                        490,
                        519,
                        543,
                        603
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1031,
                        1140
                    ],
                    "errorMessage": "maxWithdrawableBalance is less then requested"
                },
                {
                    "pc": [
                        789,
                        825,
                        850,
                        898,
                        949,
                        1012,
                        1121,
                        1238,
                        1327,
                        1363,
                        1540,
                        1645,
                        1681,
                        1787,
                        1915,
                        1951,
                        2155,
                        2174,
                        2382,
                        2401,
                        2611,
                        2840,
                        2970,
                        2998,
                        3035,
                        3115,
                        3146,
                        3183,
                        3270,
                        3300,
                        3428,
                        3454
                    ],
                    "errorMessage": "overflow"
                },
                {
                    "pc": [
                        356,
                        446
                    ],
                    "errorMessage": "transaction type is axfer"
                },
                {
                    "pc": [
                        388,
                        475,
                        500
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAzMiAxIDggMTAwMDAwMCAzMjEgMzIyIDMyMAogICAgYnl0ZWNibG9jayAweDAwIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCAweDAwMDAwMDAwMDAwMDAwMDAgMHgxNTFmN2M3NSAiZCIgImciIDB4NjQwMDAwMDAwMDAwMDAwMDAwICJwIiAweDgwIDB4MGY0MjQwICJ1c2VyIHdpdGhkcmF3YWwiIDB4ZGE3MDI1YjkgImFkbWluIHdpdGhkcmF3YWwiIDB4MDIgMHgwMDAwMDAwMDAwMDAwMDAxIDB4MDAwMDAwMDAwMDAwMDAwMiAweDRhOTY4ZjhmCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjE0OAogICAgLy8gZXhwb3J0IGNsYXNzIEF2bVNhdG9zaGlEaWNlIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fYmFyZV9yb3V0aW5nQDE4CiAgICBwdXNoYnl0ZXNzIDB4NzBhNjVlODkgMHhjNjFkNTZmNSAweDU0Y2M2OTZmIDB4ODM3YTA3NmEgMHhlMzZlNTdiZiAweGY3YTM2MDA1IDB4N2Q3ZmI4Y2YgMHgyNTkyMjBiNSAweGI3MzUzOWVkIDB4OWM5ODM5NTUgMHg0NTdlN2QxYyAweDJhMjM2ZTE4IDB4MGJjNTcxZDIgLy8gbWV0aG9kICJ1cGRhdGVBcHBsaWNhdGlvbihzdHJpbmcpYm9vbCIsIG1ldGhvZCAic2VuZE9ubGluZUtleVJlZ2lzdHJhdGlvbihieXRlW10sYnl0ZVtdLGJ5dGVbXSx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpYnl0ZVtdIiwgbWV0aG9kICJ3aXRoZHJhdyhhZGRyZXNzLHVpbnQyNTYsdWludDY0LGJvb2wpdm9pZCIsIG1ldGhvZCAiQ3JlYXRlR2FtZVdpdGhOYXRpdmVUb2tlbihwYXksdWludDY0KSh1aW50MjU2LHVpbnQ2NCxib29sLGJvb2wsYm9vbCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDI1Nix1aW50NjQsdWludDI1Nix1aW50NjQsYWRkcmVzcykiLCBtZXRob2QgIk9wdEluVG9BU0EocGF5LHVpbnQ2NCl2b2lkIiwgbWV0aG9kICJDcmVhdGVHYW1lV2l0aEFTQVRva2VuKGF4ZmVyLHVpbnQ2NCkodWludDI1Nix1aW50NjQsYm9vbCxib29sLGJvb2wsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQyNTYsdWludDY0LHVpbnQyNTYsdWludDY0LGFkZHJlc3MpIiwgbWV0aG9kICJDcmVhdGVHYW1lV2l0aEFyYzIwMFRva2VuKHVpbnQ2NCx1aW50MjU2LHVpbnQ2NCkodWludDI1Nix1aW50NjQsYm9vbCxib29sLGJvb2wsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQyNTYsdWludDY0LHVpbnQyNTYsdWludDY0LGFkZHJlc3MpIiwgbWV0aG9kICJTdGFydEdhbWVXaXRoTmF0aXZlVG9rZW4ocGF5LCh1aW50NjQsYWRkcmVzcyksdWludDY0KSh1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50MjU2LHVpbnQ2NCxhZGRyZXNzLGFkZHJlc3MpIiwgbWV0aG9kICJTdGFydEdhbWVXaXRoQVNBVG9rZW4oYXhmZXIsKHVpbnQ2NCxhZGRyZXNzKSx1aW50NjQpKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQyNTYsdWludDY0LGFkZHJlc3MsYWRkcmVzcykiLCBtZXRob2QgIlN0YXJ0R2FtZVdpdGhBcmMyMDBUb2tlbih1aW50MjU2LHVpbnQ2NCwodWludDY0LGFkZHJlc3MpLHVpbnQ2NCkodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDI1Nix1aW50NjQsYWRkcmVzcyxhZGRyZXNzKSIsIG1ldGhvZCAiR2FtZShhZGRyZXNzLHVpbnQ2NCkodWludDI1Nix1aW50NjQsYm9vbCxib29sLGJvb2wsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQyNTYsdWludDY0LHVpbnQyNTYsdWludDY0LGFkZHJlc3MpIiwgbWV0aG9kICJNeUdhbWUoKSh1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50MjU2LHVpbnQ2NCxhZGRyZXNzLGFkZHJlc3MpIiwgbWV0aG9kICJDbGFpbUdhbWUoKSh1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50MjU2LHVpbnQ2NCxhZGRyZXNzLGFkZHJlc3MpIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWFpbl91cGRhdGVBcHBsaWNhdGlvbl9yb3V0ZUAzIG1haW5fc2VuZE9ubGluZUtleVJlZ2lzdHJhdGlvbl9yb3V0ZUA0IG1haW5fd2l0aGRyYXdfcm91dGVANSBtYWluX0NyZWF0ZUdhbWVXaXRoTmF0aXZlVG9rZW5fcm91dGVANiBtYWluX09wdEluVG9BU0Ffcm91dGVANyBtYWluX0NyZWF0ZUdhbWVXaXRoQVNBVG9rZW5fcm91dGVAOCBtYWluX0NyZWF0ZUdhbWVXaXRoQXJjMjAwVG9rZW5fcm91dGVAOSBtYWluX1N0YXJ0R2FtZVdpdGhOYXRpdmVUb2tlbl9yb3V0ZUAxMCBtYWluX1N0YXJ0R2FtZVdpdGhBU0FUb2tlbl9yb3V0ZUAxMSBtYWluX1N0YXJ0R2FtZVdpdGhBcmMyMDBUb2tlbl9yb3V0ZUAxMiBtYWluX0dhbWVfcm91dGVAMTMgbWFpbl9NeUdhbWVfcm91dGVAMTQgbWFpbl9DbGFpbUdhbWVfcm91dGVAMTUKCm1haW5fYWZ0ZXJfaWZfZWxzZUAyMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MTQ4CiAgICAvLyBleHBvcnQgY2xhc3MgQXZtU2F0b3NoaURpY2UgZXh0ZW5kcyBDb250cmFjdCB7CiAgICBpbnRjXzAgLy8gMAogICAgcmV0dXJuCgptYWluX0NsYWltR2FtZV9yb3V0ZUAxNToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6Nzg1CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIENsYWltR2FtZQogICAgYnl0ZWNfMyAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18yIC8vIDEKICAgIHJldHVybgoKbWFpbl9NeUdhbWVfcm91dGVAMTQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjc3MQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBNeUdhbWUKICAgIGJ5dGVjXzMgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMiAvLyAxCiAgICByZXR1cm4KCm1haW5fR2FtZV9yb3V0ZUAxMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NzU3CiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjE0OAogICAgLy8gZXhwb3J0IGNsYXNzIEF2bVNhdG9zaGlEaWNlIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo3NTcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICBjYWxsc3ViIEdhbWUKICAgIGJ5dGVjXzMgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMiAvLyAxCiAgICByZXR1cm4KCm1haW5fU3RhcnRHYW1lV2l0aEFyYzIwMFRva2VuX3JvdXRlQDEyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo2ODcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MTQ4CiAgICAvLyBleHBvcnQgY2xhc3MgQXZtU2F0b3NoaURpY2UgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjY4NwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgU3RhcnRHYW1lV2l0aEFyYzIwMFRva2VuCiAgICBieXRlY18zIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzIgLy8gMQogICAgcmV0dXJuCgptYWluX1N0YXJ0R2FtZVdpdGhBU0FUb2tlbl9yb3V0ZUAxMToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NjI1CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjE0OAogICAgLy8gZXhwb3J0IGNsYXNzIEF2bVNhdG9zaGlEaWNlIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludGNfMiAvLyAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBwdXNoaW50IDQgLy8gYXhmZXIKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBheGZlcgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo2MjUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIFN0YXJ0R2FtZVdpdGhBU0FUb2tlbgogICAgYnl0ZWNfMyAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18yIC8vIDEKICAgIHJldHVybgoKbWFpbl9TdGFydEdhbWVXaXRoTmF0aXZlVG9rZW5fcm91dGVAMTA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjU2MwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoxNDgKICAgIC8vIGV4cG9ydCBjbGFzcyBBdm1TYXRvc2hpRGljZSBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBHcm91cEluZGV4CiAgICBpbnRjXzIgLy8gMQogICAgLQogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50Y18yIC8vIHBheQogICAgPT0KICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIHBheQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo1NjMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIFN0YXJ0R2FtZVdpdGhOYXRpdmVUb2tlbgogICAgYnl0ZWNfMyAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18yIC8vIDEKICAgIHJldHVybgoKbWFpbl9DcmVhdGVHYW1lV2l0aEFyYzIwMFRva2VuX3JvdXRlQDk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjQ4OAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoxNDgKICAgIC8vIGV4cG9ydCBjbGFzcyBBdm1TYXRvc2hpRGljZSBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NDg4CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBDcmVhdGVHYW1lV2l0aEFyYzIwMFRva2VuCiAgICBieXRlY18zIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzIgLy8gMQogICAgcmV0dXJuCgptYWluX0NyZWF0ZUdhbWVXaXRoQVNBVG9rZW5fcm91dGVAODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NDI1CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjE0OAogICAgLy8gZXhwb3J0IGNsYXNzIEF2bVNhdG9zaGlEaWNlIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludGNfMiAvLyAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBwdXNoaW50IDQgLy8gYXhmZXIKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBheGZlcgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo0MjUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIENyZWF0ZUdhbWVXaXRoQVNBVG9rZW4KICAgIGJ5dGVjXzMgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMiAvLyAxCiAgICByZXR1cm4KCm1haW5fT3B0SW5Ub0FTQV9yb3V0ZUA3OgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czozOTkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MTQ4CiAgICAvLyBleHBvcnQgY2xhc3MgQXZtU2F0b3NoaURpY2UgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50Y18yIC8vIDEKICAgIC0KICAgIGR1cAogICAgZ3R4bnMgVHlwZUVudW0KICAgIGludGNfMiAvLyBwYXkKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBwYXkKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6Mzk5CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBPcHRJblRvQVNBCiAgICBpbnRjXzIgLy8gMQogICAgcmV0dXJuCgptYWluX0NyZWF0ZUdhbWVXaXRoTmF0aXZlVG9rZW5fcm91dGVANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MzM4CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjE0OAogICAgLy8gZXhwb3J0IGNsYXNzIEF2bVNhdG9zaGlEaWNlIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludGNfMiAvLyAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnRjXzIgLy8gcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjMzOAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgQ3JlYXRlR2FtZVdpdGhOYXRpdmVUb2tlbgogICAgYnl0ZWNfMyAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18yIC8vIDEKICAgIHJldHVybgoKbWFpbl93aXRoZHJhd19yb3V0ZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoyMDIKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MTQ4CiAgICAvLyBleHBvcnQgY2xhc3MgQXZtU2F0b3NoaURpY2UgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjIwMgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgd2l0aGRyYXcKICAgIGludGNfMiAvLyAxCiAgICByZXR1cm4KCm1haW5fc2VuZE9ubGluZUtleVJlZ2lzdHJhdGlvbl9yb3V0ZUA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoxNjkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MTQ4CiAgICAvLyBleHBvcnQgY2xhc3MgQXZtU2F0b3NoaURpY2UgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA0CiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA1CiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA2CiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA3CiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjE2OQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgc2VuZE9ubGluZUtleVJlZ2lzdHJhdGlvbgogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzMgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMiAvLyAxCiAgICByZXR1cm4KCm1haW5fdXBkYXRlQXBwbGljYXRpb25fcm91dGVAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MTYwCiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyBhbGxvd0FjdGlvbnM6ICdVcGRhdGVBcHBsaWNhdGlvbicgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIHB1c2hpbnQgNCAvLyBVcGRhdGVBcHBsaWNhdGlvbgogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IFVwZGF0ZUFwcGxpY2F0aW9uCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MTQ4CiAgICAvLyBleHBvcnQgY2xhc3MgQXZtU2F0b3NoaURpY2UgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoxNjAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCh7IGFsbG93QWN0aW9uczogJ1VwZGF0ZUFwcGxpY2F0aW9uJyB9KQogICAgY2FsbHN1YiB1cGRhdGVBcHBsaWNhdGlvbgogICAgYnl0ZWNfMCAvLyAweDAwCiAgICBpbnRjXzAgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGJ5dGVjXzMgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMiAvLyAxCiAgICByZXR1cm4KCm1haW5fYmFyZV9yb3V0aW5nQDE4OgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoxNDgKICAgIC8vIGV4cG9ydCBjbGFzcyBBdm1TYXRvc2hpRGljZSBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGJueiBtYWluX2FmdGVyX2lmX2Vsc2VAMjIKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBpbnRjXzIgLy8gMQogICAgcmV0dXJuCgoKLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo6QXZtU2F0b3NoaURpY2UudXBkYXRlQXBwbGljYXRpb24obmV3VmVyc2lvbjogYnl0ZXMpIC0+IHVpbnQ2NDoKdXBkYXRlQXBwbGljYXRpb246CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjE2MC0xNjEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCh7IGFsbG93QWN0aW9uczogJ1VwZGF0ZUFwcGxpY2F0aW9uJyB9KQogICAgLy8gdXBkYXRlQXBwbGljYXRpb24obmV3VmVyc2lvbjogc3RyaW5nKTogYm9vbGVhbiB7CiAgICBwcm90byAxIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MTYyCiAgICAvLyBhc3NlcnQoR2xvYmFsLmNyZWF0b3JBZGRyZXNzID09PSBUeG4uc2VuZGVyLCAnT25seSBjcmVhdG9yIGNhbiB1cGRhdGUgYXBwbGljYXRpb24nKQogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICB0eG4gU2VuZGVyCiAgICA9PQogICAgYXNzZXJ0IC8vIE9ubHkgY3JlYXRvciBjYW4gdXBkYXRlIGFwcGxpY2F0aW9uCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjE1NgogICAgLy8gdmVyc2lvbiA9IEdsb2JhbFN0YXRlPHN0cmluZz4oeyBrZXk6ICdzY3ZlcicgfSkKICAgIHB1c2hieXRlcyAic2N2ZXIiCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjE2MwogICAgLy8gdGhpcy52ZXJzaW9uLnZhbHVlID0gbmV3VmVyc2lvbgogICAgZnJhbWVfZGlnIC0xCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoxNjQKICAgIC8vIHJldHVybiB0cnVlCiAgICBpbnRjXzIgLy8gMQogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo6QXZtU2F0b3NoaURpY2Uuc2VuZE9ubGluZUtleVJlZ2lzdHJhdGlvbih2b3RlS2V5OiBieXRlcywgc2VsZWN0aW9uS2V5OiBieXRlcywgc3RhdGVQcm9vZktleTogYnl0ZXMsIHZvdGVGaXJzdDogdWludDY0LCB2b3RlTGFzdDogdWludDY0LCB2b3RlS2V5RGlsdXRpb246IHVpbnQ2NCwgZmVlOiB1aW50NjQpIC0+IGJ5dGVzOgpzZW5kT25saW5lS2V5UmVnaXN0cmF0aW9uOgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoxNjktMTc4CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gcHVibGljIHNlbmRPbmxpbmVLZXlSZWdpc3RyYXRpb24oCiAgICAvLyAgIHZvdGVLZXk6IGJ5dGVzLAogICAgLy8gICBzZWxlY3Rpb25LZXk6IGJ5dGVzLAogICAgLy8gICBzdGF0ZVByb29mS2V5OiBieXRlcywKICAgIC8vICAgdm90ZUZpcnN0OiB1aW50NjQsCiAgICAvLyAgIHZvdGVMYXN0OiB1aW50NjQsCiAgICAvLyAgIHZvdGVLZXlEaWx1dGlvbjogdWludDY0LAogICAgLy8gICBmZWU6IHVpbnQ2NCwKICAgIC8vICk6IGJ5dGVzIHsKICAgIHByb3RvIDcgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoxNzkKICAgIC8vIGFzc2VydChHbG9iYWwuY3JlYXRvckFkZHJlc3MgPT09IFR4bi5zZW5kZXIsICdPbmx5IGNyZWF0b3IgY2FuIHVzZSB0aGlzIG1ldGhvZCcpCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgIHR4biBTZW5kZXIKICAgID09CiAgICBhc3NlcnQgLy8gT25seSBjcmVhdG9yIGNhbiB1c2UgdGhpcyBtZXRob2QKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MTgwLTE5MAogICAgLy8gY29uc3QgaXR4blJlc3VsdCA9IGl0eG4KICAgIC8vICAgLmtleVJlZ2lzdHJhdGlvbih7CiAgICAvLyAgICAgc2VsZWN0aW9uS2V5OiBzZWxlY3Rpb25LZXksCiAgICAvLyAgICAgc3RhdGVQcm9vZktleTogc3RhdGVQcm9vZktleSwKICAgIC8vICAgICB2b3RlRmlyc3Q6IHZvdGVGaXJzdCwKICAgIC8vICAgICB2b3RlS2V5RGlsdXRpb246IHZvdGVLZXlEaWx1dGlvbiwKICAgIC8vICAgICB2b3RlTGFzdDogdm90ZUxhc3QsCiAgICAvLyAgICAgdm90ZUtleTogdm90ZUtleSwKICAgIC8vICAgICBmZWU6IGZlZSwKICAgIC8vICAgfSkKICAgIC8vICAgLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICBmcmFtZV9kaWcgLTcKICAgIGl0eG5fZmllbGQgVm90ZVBLCiAgICBmcmFtZV9kaWcgLTMKICAgIGl0eG5fZmllbGQgVm90ZUxhc3QKICAgIGZyYW1lX2RpZyAtMgogICAgaXR4bl9maWVsZCBWb3RlS2V5RGlsdXRpb24KICAgIGZyYW1lX2RpZyAtNAogICAgaXR4bl9maWVsZCBWb3RlRmlyc3QKICAgIGZyYW1lX2RpZyAtNQogICAgaXR4bl9maWVsZCBTdGF0ZVByb29mUEsKICAgIGZyYW1lX2RpZyAtNgogICAgaXR4bl9maWVsZCBTZWxlY3Rpb25QSwogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoxODAtMTg5CiAgICAvLyBjb25zdCBpdHhuUmVzdWx0ID0gaXR4bgogICAgLy8gICAua2V5UmVnaXN0cmF0aW9uKHsKICAgIC8vICAgICBzZWxlY3Rpb25LZXk6IHNlbGVjdGlvbktleSwKICAgIC8vICAgICBzdGF0ZVByb29mS2V5OiBzdGF0ZVByb29mS2V5LAogICAgLy8gICAgIHZvdGVGaXJzdDogdm90ZUZpcnN0LAogICAgLy8gICAgIHZvdGVLZXlEaWx1dGlvbjogdm90ZUtleURpbHV0aW9uLAogICAgLy8gICAgIHZvdGVMYXN0OiB2b3RlTGFzdCwKICAgIC8vICAgICB2b3RlS2V5OiB2b3RlS2V5LAogICAgLy8gICAgIGZlZTogZmVlLAogICAgLy8gICB9KQogICAgcHVzaGludCAyIC8vIDIKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGZyYW1lX2RpZyAtMQogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MTgwLTE5MAogICAgLy8gY29uc3QgaXR4blJlc3VsdCA9IGl0eG4KICAgIC8vICAgLmtleVJlZ2lzdHJhdGlvbih7CiAgICAvLyAgICAgc2VsZWN0aW9uS2V5OiBzZWxlY3Rpb25LZXksCiAgICAvLyAgICAgc3RhdGVQcm9vZktleTogc3RhdGVQcm9vZktleSwKICAgIC8vICAgICB2b3RlRmlyc3Q6IHZvdGVGaXJzdCwKICAgIC8vICAgICB2b3RlS2V5RGlsdXRpb246IHZvdGVLZXlEaWx1dGlvbiwKICAgIC8vICAgICB2b3RlTGFzdDogdm90ZUxhc3QsCiAgICAvLyAgICAgdm90ZUtleTogdm90ZUtleSwKICAgIC8vICAgICBmZWU6IGZlZSwKICAgIC8vICAgfSkKICAgIC8vICAgLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgaXR4biBUeElECiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjE5MQogICAgLy8gcmV0dXJuIGl0eG5SZXN1bHQudHhuSWQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6OkF2bVNhdG9zaGlEaWNlLndpdGhkcmF3KHJlY2VpdmVyOiBieXRlcywgYW1vdW50OiBieXRlcywgYXNzZXRJZDogYnl0ZXMsIGlzQXJjMjAwVG9rZW46IGJ5dGVzKSAtPiB2b2lkOgp3aXRoZHJhdzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MjAyLTIwMwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIHB1YmxpYyB3aXRoZHJhdyhyZWNlaXZlcjogQWRkcmVzcywgYW1vdW50OiBVaW50TjI1NiwgYXNzZXRJZDogVWludE42NCwgaXNBcmMyMDBUb2tlbjogQm9vbCk6IHZvaWQgewogICAgcHJvdG8gNCAwCiAgICBpbnRjXzAgLy8gMAogICAgZHVwbiAzCiAgICBwdXNoYnl0ZXMgIiIKICAgIGR1cG4gNAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoyMDQtMjA3CiAgICAvLyBjb25zdCBrZXkgPSBuZXcgQWRkcmVzc0Fzc2V0U3RydWN0KHsKICAgIC8vICAgYXNzZXRJZDogYXNzZXRJZCwKICAgIC8vICAgb3duZXI6IG5ldyBBZGRyZXNzKFR4bi5zZW5kZXIpLAogICAgLy8gfSkKICAgIGZyYW1lX2RpZyAtMgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoyMDYKICAgIC8vIG93bmVyOiBuZXcgQWRkcmVzcyhUeG4uc2VuZGVyKSwKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MjA0LTIwNwogICAgLy8gY29uc3Qga2V5ID0gbmV3IEFkZHJlc3NBc3NldFN0cnVjdCh7CiAgICAvLyAgIGFzc2V0SWQ6IGFzc2V0SWQsCiAgICAvLyAgIG93bmVyOiBuZXcgQWRkcmVzcyhUeG4uc2VuZGVyKSwKICAgIC8vIH0pCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MTQ5CiAgICAvLyBwdWJsaWMgZ2FtZXMgPSBCb3hNYXA8QWRkcmVzc0Fzc2V0U3RydWN0LCBHYW1lU3RydWN0Pih7IGtleVByZWZpeDogJ2cnIH0pCiAgICBieXRlYyA1IC8vICJnIgogICAgc3dhcAogICAgY29uY2F0CiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MjA5CiAgICAvLyBpZiAodGhpcy5nYW1lcyhrZXkpLmV4aXN0cykgewogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBieiB3aXRoZHJhd19lbHNlX2JvZHlAMTMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MjEwCiAgICAvLyBjb25zdCBnYW1lID0gdGhpcy5nYW1lcyhrZXkpLnZhbHVlLmNvcHkoKQogICAgZnJhbWVfZGlnIDkKICAgIGJveF9nZXQKICAgIHN3YXAKICAgIGZyYW1lX2J1cnkgMQogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MjEzCiAgICAvLyBpZiAodG9XaXRoZHJhd0luY2x1ZGluZ0ZlZSA9PT0gQmlnVWludCgwKSkgewogICAgZnJhbWVfZGlnIC0zCiAgICBwdXNoYnl0ZXMgMHgKICAgIGI9PQogICAgZnJhbWVfZGlnIC0zCiAgICBmcmFtZV9idXJ5IDIKICAgIGJ6IHdpdGhkcmF3X2FmdGVyX2lmX2Vsc2VAMwogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoyMTQKICAgIC8vIHRvV2l0aGRyYXdJbmNsdWRpbmdGZWUgPSBnYW1lLmJhbGFuY2UubmF0aXZlCiAgICBmcmFtZV9kaWcgMQogICAgZXh0cmFjdCAwIDMyIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZnJhbWVfYnVyeSAyCgp3aXRoZHJhd19hZnRlcl9pZl9lbHNlQDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjIxNgogICAgLy8gY29uc3QgZmVlOiBiaWd1aW50ID0gdG9XaXRoZHJhd0luY2x1ZGluZ0ZlZSAvIEJpZ1VpbnQoNDApCiAgICBmcmFtZV9kaWcgMgogICAgZHVwCiAgICBwdXNoYnl0ZXMgMHgyOAogICAgYi8KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MjE3CiAgICAvLyBjb25zdCB0b1dpdGhkcmF3TmV0OiBiaWd1aW50ID0gdG9XaXRoZHJhd0luY2x1ZGluZ0ZlZSAtIGZlZQogICAgZGlnIDEKICAgIHN3YXAKICAgIGItCiAgICBkdXAKICAgIGNvdmVyIDIKICAgIGZyYW1lX2J1cnkgMwogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoyMjAKICAgIC8vIGdhbWUuYmFsYW5jZS5uYXRpdmUgPj0gdG9XaXRoZHJhd0luY2x1ZGluZ0ZlZSwKICAgIGZyYW1lX2RpZyAxCiAgICBkdXAKICAgIGNvdmVyIDMKICAgIGV4dHJhY3QgMCAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGR1cAogICAgZGlnIDIKICAgIGI+PQogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoyMTktMjIyCiAgICAvLyBhc3NlcnQoCiAgICAvLyAgIGdhbWUuYmFsYW5jZS5uYXRpdmUgPj0gdG9XaXRoZHJhd0luY2x1ZGluZ0ZlZSwKICAgIC8vICAgJ0dhbWUgY3JlYXRvciBjYW4gd2l0aGRyYXcgZnJvbSB0aGUgZ2FtZSBvbmx5IHRoZSBnYW1lIGRlcG9zaXQnLAogICAgLy8gKQogICAgYXNzZXJ0IC8vIEdhbWUgY3JlYXRvciBjYW4gd2l0aGRyYXcgZnJvbSB0aGUgZ2FtZSBvbmx5IHRoZSBnYW1lIGRlcG9zaXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MjI0CiAgICAvLyB0aGlzLmdhbWVzKGtleSkudmFsdWUuYmFsYW5jZSA9IG5ldyBVaW50TjI1NihnYW1lLmJhbGFuY2UubmF0aXZlIC0gdG9XaXRoZHJhd0luY2x1ZGluZ0ZlZSkKICAgIHN3YXAKICAgIGItCiAgICBkdXAKICAgIGxlbgogICAgaW50Y18xIC8vIDMyCiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBpbnRjXzEgLy8gMzIKICAgIGJ6ZXJvCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMAogICAgc3dhcAogICAgZGlnIDEKICAgIGJ8CiAgICBmcmFtZV9kaWcgOQogICAgZHVwCiAgICBjb3ZlciAyCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgc3dhcAogICAgcmVwbGFjZTIgMAogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoxNTEKICAgIC8vIHB1YmxpYyBhbGxEZXBvc2l0cyA9IEJveE1hcDxVaW50TjY0LCBVaW50TjI1Nj4oeyBrZXlQcmVmaXg6ICdkJyB9KQogICAgYnl0ZWMgNCAvLyAiZCIKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjIyNQogICAgLy8gdGhpcy5hbGxEZXBvc2l0cyhhc3NldElkKS52YWx1ZSA9IG5ldyBVaW50TjI1Nih0aGlzLmFsbERlcG9zaXRzKGFzc2V0SWQpLnZhbHVlLm5hdGl2ZSAtIHRvV2l0aGRyYXdOZXQpCiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICB1bmNvdmVyIDMKICAgIGItCiAgICBkdXAKICAgIGxlbgogICAgaW50Y18xIC8vIDMyCiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICB1bmNvdmVyIDIKICAgIGJ8CiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjIyNwogICAgLy8gaWYgKGdhbWUuaXNOYXRpdmVUb2tlbi5uYXRpdmUpIHsKICAgIGludGMgNyAvLyAzMjAKICAgIGdldGJpdAogICAgYnl0ZWNfMCAvLyAweDAwCiAgICBpbnRjXzAgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGludGNfMCAvLyAwCiAgICBnZXRiaXQKICAgIGJ6IHdpdGhkcmF3X2FmdGVyX2lmX2Vsc2VANgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoyMjgtMjM1CiAgICAvLyBpdHhuCiAgICAvLyAgIC5wYXltZW50KHsKICAgIC8vICAgICBhbW91bnQ6IG5ldyBVaW50TjY0KHRvV2l0aGRyYXdOZXQpLm5hdGl2ZSwKICAgIC8vICAgICByZWNlaXZlcjogcmVjZWl2ZXIubmF0aXZlLAogICAgLy8gICAgIG5vdGU6ICd1c2VyIHdpdGhkcmF3YWwnLAogICAgLy8gICAgIGZlZTogMCwKICAgIC8vICAgfSkKICAgIC8vICAgLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjIzMAogICAgLy8gYW1vdW50OiBuZXcgVWludE42NCh0b1dpdGhkcmF3TmV0KS5uYXRpdmUsCiAgICBmcmFtZV9kaWcgMwogICAgZHVwCiAgICBsZW4KICAgIGludGNfMyAvLyA4CiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBpbnRjXzMgLy8gOAogICAgYnplcm8KICAgIGJ8CiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjIzMgogICAgLy8gbm90ZTogJ3VzZXIgd2l0aGRyYXdhbCcsCiAgICBieXRlYyAxMCAvLyAidXNlciB3aXRoZHJhd2FsIgogICAgaXR4bl9maWVsZCBOb3RlCiAgICBmcmFtZV9kaWcgLTQKICAgIGl0eG5fZmllbGQgUmVjZWl2ZXIKICAgIGl0eG5fZmllbGQgQW1vdW50CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjIyOC0yMzQKICAgIC8vIGl0eG4KICAgIC8vICAgLnBheW1lbnQoewogICAgLy8gICAgIGFtb3VudDogbmV3IFVpbnRONjQodG9XaXRoZHJhd05ldCkubmF0aXZlLAogICAgLy8gICAgIHJlY2VpdmVyOiByZWNlaXZlci5uYXRpdmUsCiAgICAvLyAgICAgbm90ZTogJ3VzZXIgd2l0aGRyYXdhbCcsCiAgICAvLyAgICAgZmVlOiAwLAogICAgLy8gICB9KQogICAgaW50Y18yIC8vIDEKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MjMzCiAgICAvLyBmZWU6IDAsCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MjI4LTIzNQogICAgLy8gaXR4bgogICAgLy8gICAucGF5bWVudCh7CiAgICAvLyAgICAgYW1vdW50OiBuZXcgVWludE42NCh0b1dpdGhkcmF3TmV0KS5uYXRpdmUsCiAgICAvLyAgICAgcmVjZWl2ZXI6IHJlY2VpdmVyLm5hdGl2ZSwKICAgIC8vICAgICBub3RlOiAndXNlciB3aXRoZHJhd2FsJywKICAgIC8vICAgICBmZWU6IDAsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKCndpdGhkcmF3X2FmdGVyX2lmX2Vsc2VANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MjM3CiAgICAvLyBpZiAoZ2FtZS5pc0FTQVRva2VuLm5hdGl2ZSkgewogICAgZnJhbWVfZGlnIDEKICAgIGludGMgNSAvLyAzMjEKICAgIGdldGJpdAogICAgYnl0ZWNfMCAvLyAweDAwCiAgICBpbnRjXzAgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGludGNfMCAvLyAwCiAgICBnZXRiaXQKICAgIGJ6IHdpdGhkcmF3X2FmdGVyX2lmX2Vsc2VAOQogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoyMzgtMjQ2CiAgICAvLyBpdHhuCiAgICAvLyAgIC5hc3NldFRyYW5zZmVyKHsKICAgIC8vICAgICB4ZmVyQXNzZXQ6IGdhbWUuYXNzZXRJZC5uYXRpdmUsCiAgICAvLyAgICAgYXNzZXRBbW91bnQ6IG5ldyBVaW50TjY0KHRvV2l0aGRyYXdOZXQpLm5hdGl2ZSwKICAgIC8vICAgICBhc3NldFJlY2VpdmVyOiByZWNlaXZlci5uYXRpdmUsCiAgICAvLyAgICAgbm90ZTogJ3VzZXIgd2l0aGRyYXdhbCcsCiAgICAvLyAgICAgZmVlOiAwLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MjQwCiAgICAvLyB4ZmVyQXNzZXQ6IGdhbWUuYXNzZXRJZC5uYXRpdmUsCiAgICBmcmFtZV9kaWcgMQogICAgaW50Y18xIC8vIDMyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoyNDEKICAgIC8vIGFzc2V0QW1vdW50OiBuZXcgVWludE42NCh0b1dpdGhkcmF3TmV0KS5uYXRpdmUsCiAgICBmcmFtZV9kaWcgMwogICAgZHVwCiAgICBsZW4KICAgIGludGNfMyAvLyA4CiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBpbnRjXzMgLy8gOAogICAgYnplcm8KICAgIGJ8CiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjI0MwogICAgLy8gbm90ZTogJ3VzZXIgd2l0aGRyYXdhbCcsCiAgICBieXRlYyAxMCAvLyAidXNlciB3aXRoZHJhd2FsIgogICAgaXR4bl9maWVsZCBOb3RlCiAgICBmcmFtZV9kaWcgLTQKICAgIGl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgogICAgaXR4bl9maWVsZCBBc3NldEFtb3VudAogICAgaXR4bl9maWVsZCBYZmVyQXNzZXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MjM4LTI0NQogICAgLy8gaXR4bgogICAgLy8gICAuYXNzZXRUcmFuc2Zlcih7CiAgICAvLyAgICAgeGZlckFzc2V0OiBnYW1lLmFzc2V0SWQubmF0aXZlLAogICAgLy8gICAgIGFzc2V0QW1vdW50OiBuZXcgVWludE42NCh0b1dpdGhkcmF3TmV0KS5uYXRpdmUsCiAgICAvLyAgICAgYXNzZXRSZWNlaXZlcjogcmVjZWl2ZXIubmF0aXZlLAogICAgLy8gICAgIG5vdGU6ICd1c2VyIHdpdGhkcmF3YWwnLAogICAgLy8gICAgIGZlZTogMCwKICAgIC8vICAgfSkKICAgIHB1c2hpbnQgNCAvLyA0CiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjI0NAogICAgLy8gZmVlOiAwLAogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjIzOC0yNDYKICAgIC8vIGl0eG4KICAgIC8vICAgLmFzc2V0VHJhbnNmZXIoewogICAgLy8gICAgIHhmZXJBc3NldDogZ2FtZS5hc3NldElkLm5hdGl2ZSwKICAgIC8vICAgICBhc3NldEFtb3VudDogbmV3IFVpbnRONjQodG9XaXRoZHJhd05ldCkubmF0aXZlLAogICAgLy8gICAgIGFzc2V0UmVjZWl2ZXI6IHJlY2VpdmVyLm5hdGl2ZSwKICAgIC8vICAgICBub3RlOiAndXNlciB3aXRoZHJhd2FsJywKICAgIC8vICAgICBmZWU6IDAsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKCndpdGhkcmF3X2FmdGVyX2lmX2Vsc2VAOToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MjQ4CiAgICAvLyBpZiAoZ2FtZS5pc0FyYzIwMFRva2VuLm5hdGl2ZSkgewogICAgZnJhbWVfZGlnIDEKICAgIGludGMgNiAvLyAzMjIKICAgIGdldGJpdAogICAgYnl0ZWNfMCAvLyAweDAwCiAgICBpbnRjXzAgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGludGNfMCAvLyAwCiAgICBnZXRiaXQKICAgIGJ6IHdpdGhkcmF3X2FmdGVyX2lmX2Vsc2VAMzAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MjUwLTI1NwogICAgLy8gaXR4bgogICAgLy8gICAuYXBwbGljYXRpb25DYWxsKHsKICAgIC8vICAgICBhcHBJZDogZ2FtZS5hc3NldElkLm5hdGl2ZSwKICAgIC8vICAgICBhcHBBcmdzOiBbbWV0aG9kU2VsZWN0b3IoJ2FyYzIwMF90cmFuc2ZlcihhZGRyZXNzLHVpbnQyNTYpYm9vbCcpLCByZWNlaXZlciwgbmV3IFVpbnROMjU2KHRvV2l0aGRyYXdOZXQpXSwKICAgIC8vICAgICBmZWU6IDAsCiAgICAvLyAgICAgbm90ZTogJ3VzZXIgd2l0aGRyYXdhbCcsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoyNTIKICAgIC8vIGFwcElkOiBnYW1lLmFzc2V0SWQubmF0aXZlLAogICAgZnJhbWVfZGlnIDEKICAgIGludGNfMSAvLyAzMgogICAgZXh0cmFjdF91aW50NjQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MjUzCiAgICAvLyBhcHBBcmdzOiBbbWV0aG9kU2VsZWN0b3IoJ2FyYzIwMF90cmFuc2ZlcihhZGRyZXNzLHVpbnQyNTYpYm9vbCcpLCByZWNlaXZlciwgbmV3IFVpbnROMjU2KHRvV2l0aGRyYXdOZXQpXSwKICAgIGZyYW1lX2RpZyAzCiAgICBkdXAKICAgIGxlbgogICAgaW50Y18xIC8vIDMyCiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBmcmFtZV9kaWcgMAogICAgYnwKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MjU1CiAgICAvLyBub3RlOiAndXNlciB3aXRoZHJhd2FsJywKICAgIGJ5dGVjIDEwIC8vICJ1c2VyIHdpdGhkcmF3YWwiCiAgICBpdHhuX2ZpZWxkIE5vdGUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MjUzCiAgICAvLyBhcHBBcmdzOiBbbWV0aG9kU2VsZWN0b3IoJ2FyYzIwMF90cmFuc2ZlcihhZGRyZXNzLHVpbnQyNTYpYm9vbCcpLCByZWNlaXZlciwgbmV3IFVpbnROMjU2KHRvV2l0aGRyYXdOZXQpXSwKICAgIGJ5dGVjIDExIC8vIG1ldGhvZCAiYXJjMjAwX3RyYW5zZmVyKGFkZHJlc3MsdWludDI1Nilib29sIgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGZyYW1lX2RpZyAtNAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MjUwLTI1NgogICAgLy8gaXR4bgogICAgLy8gICAuYXBwbGljYXRpb25DYWxsKHsKICAgIC8vICAgICBhcHBJZDogZ2FtZS5hc3NldElkLm5hdGl2ZSwKICAgIC8vICAgICBhcHBBcmdzOiBbbWV0aG9kU2VsZWN0b3IoJ2FyYzIwMF90cmFuc2ZlcihhZGRyZXNzLHVpbnQyNTYpYm9vbCcpLCByZWNlaXZlciwgbmV3IFVpbnROMjU2KHRvV2l0aGRyYXdOZXQpXSwKICAgIC8vICAgICBmZWU6IDAsCiAgICAvLyAgICAgbm90ZTogJ3VzZXIgd2l0aGRyYXdhbCcsCiAgICAvLyAgIH0pCiAgICBwdXNoaW50IDYgLy8gNgogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoyNTQKICAgIC8vIGZlZTogMCwKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoyNTAtMjU3CiAgICAvLyBpdHhuCiAgICAvLyAgIC5hcHBsaWNhdGlvbkNhbGwoewogICAgLy8gICAgIGFwcElkOiBnYW1lLmFzc2V0SWQubmF0aXZlLAogICAgLy8gICAgIGFwcEFyZ3M6IFttZXRob2RTZWxlY3RvcignYXJjMjAwX3RyYW5zZmVyKGFkZHJlc3MsdWludDI1Nilib29sJyksIHJlY2VpdmVyLCBuZXcgVWludE4yNTYodG9XaXRoZHJhd05ldCldLAogICAgLy8gICAgIGZlZTogMCwKICAgIC8vICAgICBub3RlOiAndXNlciB3aXRoZHJhd2FsJywKICAgIC8vICAgfSkKICAgIC8vICAgLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAoKd2l0aGRyYXdfYWZ0ZXJfaWZfZWxzZUAzMDoKICAgIHJldHN1YgoKd2l0aGRyYXdfZWxzZV9ib2R5QDEzOgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoyNjEKICAgIC8vIGlmIChHbG9iYWwuY3JlYXRvckFkZHJlc3MgPT09IFR4bi5zZW5kZXIpIHsKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgdHhuIFNlbmRlcgogICAgPT0KICAgIGFzc2VydCAvLyBUaGUgZ2FtZSBmb3IgdGhpcyBhc3NldCBkb2VzIG5vdCBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MjY0CiAgICAvLyBpZiAoYXNzZXRJZC5uYXRpdmUgPT09IDApIHsKICAgIGZyYW1lX2RpZyAtMgogICAgYnRvaQogICAgZHVwCiAgICBmcmFtZV9idXJ5IDYKICAgIGJueiB3aXRoZHJhd19lbHNlX2JvZHlAMTkKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MjY2CiAgICAvLyBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcy5iYWxhbmNlIC0KICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICBhY2N0X3BhcmFtc19nZXQgQWNjdEJhbGFuY2UKICAgIGFzc2VydCAvLyBhY2NvdW50IGZ1bmRlZAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoyNjcKICAgIC8vIEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLm1pbkJhbGFuY2UgLQogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgIGFjY3RfcGFyYW1zX2dldCBBY2N0TWluQmFsYW5jZQogICAgYXNzZXJ0IC8vIGFjY291bnQgZnVuZGVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjI2Ni0yNjcKICAgIC8vIEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLmJhbGFuY2UgLQogICAgLy8gR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MubWluQmFsYW5jZSAtCiAgICAtCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjE1MQogICAgLy8gcHVibGljIGFsbERlcG9zaXRzID0gQm94TWFwPFVpbnRONjQsIFVpbnROMjU2Pih7IGtleVByZWZpeDogJ2QnIH0pCiAgICBieXRlYyA0IC8vICJkIgogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MjY4CiAgICAvLyBuZXcgVWludE42NCh0aGlzLmFsbERlcG9zaXRzKGFzc2V0SWQpLnZhbHVlLm5hdGl2ZSkubmF0aXZlCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgaW50Y18wIC8vIDAKICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgaW50Y18zIC8vIDgKICAgIGJ6ZXJvCiAgICBzd2FwCiAgICBkaWcgMQogICAgYnwKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MjY1LTI2OAogICAgLy8gY29uc3QgbWF4V2l0aGRyYXdhYmxlQmFsYW5jZTogdWludDY0ID0KICAgIC8vICAgR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MuYmFsYW5jZSAtCiAgICAvLyAgIEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLm1pbkJhbGFuY2UgLQogICAgLy8gICBuZXcgVWludE42NCh0aGlzLmFsbERlcG9zaXRzKGFzc2V0SWQpLnZhbHVlLm5hdGl2ZSkubmF0aXZlCiAgICB1bmNvdmVyIDIKICAgIHN3YXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MjY2LTI2OAogICAgLy8gR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MuYmFsYW5jZSAtCiAgICAvLyBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcy5taW5CYWxhbmNlIC0KICAgIC8vIG5ldyBVaW50TjY0KHRoaXMuYWxsRGVwb3NpdHMoYXNzZXRJZCkudmFsdWUubmF0aXZlKS5uYXRpdmUKICAgIC0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MjY1LTI2OAogICAgLy8gY29uc3QgbWF4V2l0aGRyYXdhYmxlQmFsYW5jZTogdWludDY0ID0KICAgIC8vICAgR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MuYmFsYW5jZSAtCiAgICAvLyAgIEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLm1pbkJhbGFuY2UgLQogICAgLy8gICBuZXcgVWludE42NCh0aGlzLmFsbERlcG9zaXRzKGFzc2V0SWQpLnZhbHVlLm5hdGl2ZSkubmF0aXZlCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgNAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoyNjkKICAgIC8vIGFzc2VydChhbW91bnQubmF0aXZlIDw9IEJpZ1VpbnQobWF4V2l0aGRyYXdhYmxlQmFsYW5jZSksICdtYXhXaXRoZHJhd2FibGVCYWxhbmNlIGlzIGxlc3MgdGhlbiByZXF1ZXN0ZWQnKQogICAgaXRvYgogICAgZnJhbWVfZGlnIC0zCiAgICBiPj0KICAgIGFzc2VydCAvLyBtYXhXaXRoZHJhd2FibGVCYWxhbmNlIGlzIGxlc3MgdGhlbiByZXF1ZXN0ZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MjcwCiAgICAvLyBsZXQgdG9XaWRyYXc6IHVpbnQ2NCA9IG5ldyBVaW50TjY0KGFtb3VudC5uYXRpdmUpLm5hdGl2ZQogICAgZnJhbWVfZGlnIC0zCiAgICBifAogICAgYnRvaQogICAgZHVwCiAgICBmcmFtZV9idXJ5IDcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MjcxCiAgICAvLyBpZiAodG9XaWRyYXcgPT09IDApIHsKICAgIGJueiB3aXRoZHJhd19hZnRlcl9pZl9lbHNlQDE3CiAgICBmcmFtZV9kaWcgNAogICAgZnJhbWVfYnVyeSA3Cgp3aXRoZHJhd19hZnRlcl9pZl9lbHNlQDE3OgogICAgZnJhbWVfZGlnIDcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6Mjc1LTI4MgogICAgLy8gaXR4bgogICAgLy8gICAucGF5bWVudCh7CiAgICAvLyAgICAgYW1vdW50OiBuZXcgVWludE42NCh0b1dpZHJhdykubmF0aXZlLAogICAgLy8gICAgIHJlY2VpdmVyOiByZWNlaXZlci5uYXRpdmUsCiAgICAvLyAgICAgbm90ZTogJ2FkbWluIHdpdGhkcmF3YWwnLAogICAgLy8gICAgIGZlZTogMCwKICAgIC8vICAgfSkKICAgIC8vICAgLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjI3NwogICAgLy8gYW1vdW50OiBuZXcgVWludE42NCh0b1dpZHJhdykubmF0aXZlLAogICAgaXRvYgogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoyNzkKICAgIC8vIG5vdGU6ICdhZG1pbiB3aXRoZHJhd2FsJywKICAgIGJ5dGVjIDEyIC8vICJhZG1pbiB3aXRoZHJhd2FsIgogICAgaXR4bl9maWVsZCBOb3RlCiAgICBmcmFtZV9kaWcgLTQKICAgIGl0eG5fZmllbGQgUmVjZWl2ZXIKICAgIGl0eG5fZmllbGQgQW1vdW50CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjI3NS0yODEKICAgIC8vIGl0eG4KICAgIC8vICAgLnBheW1lbnQoewogICAgLy8gICAgIGFtb3VudDogbmV3IFVpbnRONjQodG9XaWRyYXcpLm5hdGl2ZSwKICAgIC8vICAgICByZWNlaXZlcjogcmVjZWl2ZXIubmF0aXZlLAogICAgLy8gICAgIG5vdGU6ICdhZG1pbiB3aXRoZHJhd2FsJywKICAgIC8vICAgICBmZWU6IDAsCiAgICAvLyAgIH0pCiAgICBpbnRjXzIgLy8gMQogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoyODAKICAgIC8vIGZlZTogMCwKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoyNzUtMjgyCiAgICAvLyBpdHhuCiAgICAvLyAgIC5wYXltZW50KHsKICAgIC8vICAgICBhbW91bnQ6IG5ldyBVaW50TjY0KHRvV2lkcmF3KS5uYXRpdmUsCiAgICAvLyAgICAgcmVjZWl2ZXI6IHJlY2VpdmVyLm5hdGl2ZSwKICAgIC8vICAgICBub3RlOiAnYWRtaW4gd2l0aGRyYXdhbCcsCiAgICAvLyAgICAgZmVlOiAwLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICByZXRzdWIKCndpdGhkcmF3X2Vsc2VfYm9keUAxOToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MjgzCiAgICAvLyB9IGVsc2UgaWYgKGlzQXJjMjAwVG9rZW4ubmF0aXZlKSB7CiAgICBmcmFtZV9kaWcgLTEKICAgIGludGNfMCAvLyAwCiAgICBnZXRiaXQKICAgIGJ6IHdpdGhkcmF3X2Vsc2VfYm9keUAyMgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoyOTgtMzA1CiAgICAvLyBpdHhuCiAgICAvLyAgIC5hcHBsaWNhdGlvbkNhbGwoewogICAgLy8gICAgIGFwcElkOiBhc3NldElkLm5hdGl2ZSwKICAgIC8vICAgICBhcHBBcmdzOiBbbWV0aG9kU2VsZWN0b3IoJ2FyYzIwMF90cmFuc2ZlcihhZGRyZXNzLHVpbnQyNTYpYm9vbCcpLCByZWNlaXZlciwgYW1vdW50XSwKICAgIC8vICAgICBmZWU6IDAsCiAgICAvLyAgICAgbm90ZTogJ2FkbWluIHdpdGhkcmF3YWwnLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MzAzCiAgICAvLyBub3RlOiAnYWRtaW4gd2l0aGRyYXdhbCcsCiAgICBieXRlYyAxMiAvLyAiYWRtaW4gd2l0aGRyYXdhbCIKICAgIGl0eG5fZmllbGQgTm90ZQogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czozMDEKICAgIC8vIGFwcEFyZ3M6IFttZXRob2RTZWxlY3RvcignYXJjMjAwX3RyYW5zZmVyKGFkZHJlc3MsdWludDI1Nilib29sJyksIHJlY2VpdmVyLCBhbW91bnRdLAogICAgYnl0ZWMgMTEgLy8gbWV0aG9kICJhcmMyMDBfdHJhbnNmZXIoYWRkcmVzcyx1aW50MjU2KWJvb2wiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgZnJhbWVfZGlnIC00CiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgZnJhbWVfZGlnIC0zCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgZnJhbWVfZGlnIDYKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25JRAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoyOTgtMzA0CiAgICAvLyBpdHhuCiAgICAvLyAgIC5hcHBsaWNhdGlvbkNhbGwoewogICAgLy8gICAgIGFwcElkOiBhc3NldElkLm5hdGl2ZSwKICAgIC8vICAgICBhcHBBcmdzOiBbbWV0aG9kU2VsZWN0b3IoJ2FyYzIwMF90cmFuc2ZlcihhZGRyZXNzLHVpbnQyNTYpYm9vbCcpLCByZWNlaXZlciwgYW1vdW50XSwKICAgIC8vICAgICBmZWU6IDAsCiAgICAvLyAgICAgbm90ZTogJ2FkbWluIHdpdGhkcmF3YWwnLAogICAgLy8gICB9KQogICAgcHVzaGludCA2IC8vIDYKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MzAyCiAgICAvLyBmZWU6IDAsCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6Mjk4LTMwNQogICAgLy8gaXR4bgogICAgLy8gICAuYXBwbGljYXRpb25DYWxsKHsKICAgIC8vICAgICBhcHBJZDogYXNzZXRJZC5uYXRpdmUsCiAgICAvLyAgICAgYXBwQXJnczogW21ldGhvZFNlbGVjdG9yKCdhcmMyMDBfdHJhbnNmZXIoYWRkcmVzcyx1aW50MjU2KWJvb2wnKSwgcmVjZWl2ZXIsIGFtb3VudF0sCiAgICAvLyAgICAgZmVlOiAwLAogICAgLy8gICAgIG5vdGU6ICdhZG1pbiB3aXRoZHJhd2FsJywKICAgIC8vICAgfSkKICAgIC8vICAgLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgcmV0c3ViCgp3aXRoZHJhd19lbHNlX2JvZHlAMjI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjMwOAogICAgLy8gY29uc3QgYmFsYW5jZSA9IEFzc2V0KGFzc2V0SWQubmF0aXZlKS5iYWxhbmNlKEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzKQogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgIGZyYW1lX2RpZyA2CiAgICBhc3NldF9ob2xkaW5nX2dldCBBc3NldEJhbGFuY2UKICAgIGFzc2VydCAvLyBhY2NvdW50IG9wdGVkIGludG8gYXNzZXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MTUxCiAgICAvLyBwdWJsaWMgYWxsRGVwb3NpdHMgPSBCb3hNYXA8VWludE42NCwgVWludE4yNTY+KHsga2V5UHJlZml4OiAnZCcgfSkKICAgIGJ5dGVjIDQgLy8gImQiCiAgICBmcmFtZV9kaWcgLTIKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czozMDkKICAgIC8vIGNvbnN0IG1heFdpdGhkcmF3YWJsZUJhbGFuY2U6IHVpbnQ2NCA9IGJhbGFuY2UgLSBuZXcgVWludE42NCh0aGlzLmFsbERlcG9zaXRzKGFzc2V0SWQpLnZhbHVlLm5hdGl2ZSkubmF0aXZlCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgaW50Y18wIC8vIDAKICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgaW50Y18zIC8vIDgKICAgIGJ6ZXJvCiAgICBzd2FwCiAgICBkaWcgMQogICAgYnwKICAgIGJ0b2kKICAgIHVuY292ZXIgMgogICAgc3dhcAogICAgLQogICAgZHVwCiAgICBmcmFtZV9idXJ5IDUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MzEwCiAgICAvLyBhc3NlcnQoYW1vdW50Lm5hdGl2ZSA8PSBCaWdVaW50KG1heFdpdGhkcmF3YWJsZUJhbGFuY2UpLCAnbWF4V2l0aGRyYXdhYmxlQmFsYW5jZSBpcyBsZXNzIHRoZW4gcmVxdWVzdGVkJykKICAgIGl0b2IKICAgIGZyYW1lX2RpZyAtMwogICAgYj49CiAgICBhc3NlcnQgLy8gbWF4V2l0aGRyYXdhYmxlQmFsYW5jZSBpcyBsZXNzIHRoZW4gcmVxdWVzdGVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjMxMQogICAgLy8gbGV0IHRvV2lkcmF3OiB1aW50NjQgPSBuZXcgVWludE42NChhbW91bnQubmF0aXZlKS5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMwogICAgYnwKICAgIGJ0b2kKICAgIGR1cAogICAgZnJhbWVfYnVyeSA4CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjMxMgogICAgLy8gaWYgKHRvV2lkcmF3ID09PSAwKSB7CiAgICBibnogd2l0aGRyYXdfYWZ0ZXJfaWZfZWxzZUAyNAogICAgZnJhbWVfZGlnIDUKICAgIGZyYW1lX2J1cnkgOAoKd2l0aGRyYXdfYWZ0ZXJfaWZfZWxzZUAyNDoKICAgIGZyYW1lX2RpZyA4CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjMxNi0zMjQKICAgIC8vIGl0eG4KICAgIC8vICAgLmFzc2V0VHJhbnNmZXIoewogICAgLy8gICAgIHhmZXJBc3NldDogYXNzZXRJZC5uYXRpdmUsCiAgICAvLyAgICAgYXNzZXRBbW91bnQ6IG5ldyBVaW50TjY0KHRvV2lkcmF3KS5uYXRpdmUsCiAgICAvLyAgICAgYXNzZXRSZWNlaXZlcjogcmVjZWl2ZXIubmF0aXZlLAogICAgLy8gICAgIG5vdGU6ICdhZG1pbiB3aXRoZHJhd2FsJywKICAgIC8vICAgICBmZWU6IDAsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czozMTkKICAgIC8vIGFzc2V0QW1vdW50OiBuZXcgVWludE42NCh0b1dpZHJhdykubmF0aXZlLAogICAgaXRvYgogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czozMjEKICAgIC8vIG5vdGU6ICdhZG1pbiB3aXRoZHJhd2FsJywKICAgIGJ5dGVjIDEyIC8vICJhZG1pbiB3aXRoZHJhd2FsIgogICAgaXR4bl9maWVsZCBOb3RlCiAgICBmcmFtZV9kaWcgLTQKICAgIGl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgogICAgaXR4bl9maWVsZCBBc3NldEFtb3VudAogICAgZnJhbWVfZGlnIDYKICAgIGl0eG5fZmllbGQgWGZlckFzc2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjMxNi0zMjMKICAgIC8vIGl0eG4KICAgIC8vICAgLmFzc2V0VHJhbnNmZXIoewogICAgLy8gICAgIHhmZXJBc3NldDogYXNzZXRJZC5uYXRpdmUsCiAgICAvLyAgICAgYXNzZXRBbW91bnQ6IG5ldyBVaW50TjY0KHRvV2lkcmF3KS5uYXRpdmUsCiAgICAvLyAgICAgYXNzZXRSZWNlaXZlcjogcmVjZWl2ZXIubmF0aXZlLAogICAgLy8gICAgIG5vdGU6ICdhZG1pbiB3aXRoZHJhd2FsJywKICAgIC8vICAgICBmZWU6IDAsCiAgICAvLyAgIH0pCiAgICBwdXNoaW50IDQgLy8gNAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czozMjIKICAgIC8vIGZlZTogMCwKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czozMTYtMzI0CiAgICAvLyBpdHhuCiAgICAvLyAgIC5hc3NldFRyYW5zZmVyKHsKICAgIC8vICAgICB4ZmVyQXNzZXQ6IGFzc2V0SWQubmF0aXZlLAogICAgLy8gICAgIGFzc2V0QW1vdW50OiBuZXcgVWludE42NCh0b1dpZHJhdykubmF0aXZlLAogICAgLy8gICAgIGFzc2V0UmVjZWl2ZXI6IHJlY2VpdmVyLm5hdGl2ZSwKICAgIC8vICAgICBub3RlOiAnYWRtaW4gd2l0aGRyYXdhbCcsCiAgICAvLyAgICAgZmVlOiAwLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjpBdm1TYXRvc2hpRGljZS5DcmVhdGVHYW1lV2l0aE5hdGl2ZVRva2VuKHR4bkRlcG9zaXQ6IHVpbnQ2NCwgd2luUmF0aW86IGJ5dGVzKSAtPiBieXRlczoKQ3JlYXRlR2FtZVdpdGhOYXRpdmVUb2tlbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MzM4LTMzOQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIHB1YmxpYyBDcmVhdGVHYW1lV2l0aE5hdGl2ZVRva2VuKHR4bkRlcG9zaXQ6IGd0eG4uUGF5bWVudFR4biwgd2luUmF0aW86IFVpbnRONjQpOiBHYW1lU3RydWN0IHsKICAgIHByb3RvIDIgMQogICAgaW50Y18wIC8vIDAKICAgIGR1cG4gMgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czozNDAKICAgIC8vIGNvbnN0IHNlbmRlciA9IG5ldyBhcmM0LkFkZHJlc3ModHhuRGVwb3NpdC5zZW5kZXIpCiAgICBmcmFtZV9kaWcgLTIKICAgIGd0eG5zIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czozNDIKICAgIC8vIGFzc2VydCh3aW5SYXRpby5uYXRpdmUgPD0gMV8wMDBfMDAwLCAnV2luIHByb2JhYmlsaXR5IG11c3QgYmUgYmVsb3cgMSAwMDAgMDAwJykKICAgIGZyYW1lX2RpZyAtMQogICAgYnRvaQogICAgaW50YyA0IC8vIDEwMDAwMDAKICAgIDw9CiAgICBhc3NlcnQgLy8gV2luIHByb2JhYmlsaXR5IG11c3QgYmUgYmVsb3cgMSAwMDAgMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjM0NAogICAgLy8gY29uc3QgZmVlOiB1aW50NjQgPSB0eG5EZXBvc2l0LmFtb3VudCAvIDQwIC8vMi41JQogICAgZnJhbWVfZGlnIC0yCiAgICBndHhucyBBbW91bnQKICAgIGR1cAogICAgcHVzaGludCA0MCAvLyA0MAogICAgLwogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czozNDUKICAgIC8vIGNvbnN0IGRlcG9zaXQ6IHVpbnQ2NCA9IHR4bkRlcG9zaXQuYW1vdW50IC0gZmVlCiAgICAtCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjM0NgogICAgLy8gbGV0IHByZXZEZXBvc2l0OiBVaW50TjI1NiA9IG5ldyBVaW50TjI1NigwKQogICAgYnl0ZWNfMSAvLyAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MTUxCiAgICAvLyBwdWJsaWMgYWxsRGVwb3NpdHMgPSBCb3hNYXA8VWludE42NCwgVWludE4yNTY+KHsga2V5UHJlZml4OiAnZCcgfSkKICAgIGJ5dGVjIDYgLy8gMHg2NDAwMDAwMDAwMDAwMDAwMDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MzQ3CiAgICAvLyBpZiAodGhpcy5hbGxEZXBvc2l0cyhhc3NldElkKS5leGlzdHMpIHsKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYnogQ3JlYXRlR2FtZVdpdGhOYXRpdmVUb2tlbl9hZnRlcl9pZl9lbHNlQDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MTUxCiAgICAvLyBwdWJsaWMgYWxsRGVwb3NpdHMgPSBCb3hNYXA8VWludE42NCwgVWludE4yNTY+KHsga2V5UHJlZml4OiAnZCcgfSkKICAgIGJ5dGVjIDYgLy8gMHg2NDAwMDAwMDAwMDAwMDAwMDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MzQ4CiAgICAvLyBwcmV2RGVwb3NpdCA9IHRoaXMuYWxsRGVwb3NpdHMoYXNzZXRJZCkudmFsdWUKICAgIGJveF9nZXQKICAgIHN3YXAKICAgIGZyYW1lX2J1cnkgNQogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKCkNyZWF0ZUdhbWVXaXRoTmF0aXZlVG9rZW5fYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czozNTEKICAgIC8vIHRoaXMuYWxsRGVwb3NpdHMoYXNzZXRJZCkudmFsdWUgPSBuZXcgVWludE4yNTYocHJldkRlcG9zaXQubmF0aXZlICsgQmlnVWludChkZXBvc2l0KSkKICAgIGZyYW1lX2RpZyA0CiAgICBpdG9iCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMQogICAgZnJhbWVfZGlnIDUKICAgIGIrCiAgICBkdXAKICAgIGxlbgogICAgaW50Y18xIC8vIDMyCiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBpbnRjXzEgLy8gMzIKICAgIGJ6ZXJvCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMAogICAgYnwKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MTUxCiAgICAvLyBwdWJsaWMgYWxsRGVwb3NpdHMgPSBCb3hNYXA8VWludE42NCwgVWludE4yNTY+KHsga2V5UHJlZml4OiAnZCcgfSkKICAgIGJ5dGVjIDYgLy8gMHg2NDAwMDAwMDAwMDAwMDAwMDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MzUxCiAgICAvLyB0aGlzLmFsbERlcG9zaXRzKGFzc2V0SWQpLnZhbHVlID0gbmV3IFVpbnROMjU2KHByZXZEZXBvc2l0Lm5hdGl2ZSArIEJpZ1VpbnQoZGVwb3NpdCkpCiAgICBzd2FwCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjM1MwogICAgLy8gYXNzZXJ0KHR4bkRlcG9zaXQucmVjZWl2ZXIgPT09IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLCAnUmVjZWl2ZXIgbXVzdCBiZSB0aGUgZ2FzIHN0YXRpb24gYXBwJykKICAgIGZyYW1lX2RpZyAtMgogICAgZ3R4bnMgUmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIFJlY2VpdmVyIG11c3QgYmUgdGhlIGdhcyBzdGF0aW9uIGFwcAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czozNDEKICAgIC8vIGNvbnN0IGFzc2V0SWQgPSBuZXcgVWludE42NCgwKQogICAgYnl0ZWNfMiAvLyAweDAwMDAwMDAwMDAwMDAwMDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MzU1LTM1OAogICAgLy8gY29uc3Qga2V5ID0gbmV3IEFkZHJlc3NBc3NldFN0cnVjdCh7CiAgICAvLyAgIGFzc2V0SWQ6IGFzc2V0SWQsCiAgICAvLyAgIG93bmVyOiBzZW5kZXIsCiAgICAvLyB9KQogICAgZnJhbWVfZGlnIDMKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoxNDkKICAgIC8vIHB1YmxpYyBnYW1lcyA9IEJveE1hcDxBZGRyZXNzQXNzZXRTdHJ1Y3QsIEdhbWVTdHJ1Y3Q+KHsga2V5UHJlZml4OiAnZycgfSkKICAgIGJ5dGVjIDUgLy8gImciCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgZnJhbWVfYnVyeSAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjM1OQogICAgLy8gaWYgKHRoaXMuZ2FtZXMoa2V5KS5leGlzdHMpIHsKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYnogQ3JlYXRlR2FtZVdpdGhOYXRpdmVUb2tlbl9lbHNlX2JvZHlANAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czozNjAKICAgIC8vIGFzc2VydCh0aGlzLmdhbWVzKGtleSkudmFsdWUuaXNOYXRpdmVUb2tlbiA9PT0gbmV3IEJvb2wodHJ1ZSksICdUaGUgcHJldmlvdXMgZ2FtZSB3YXMgbm90IGZvciB0aGUgbmF0aXZlIHRva2VuJykKICAgIGZyYW1lX2RpZyAyCiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBpbnRjIDcgLy8gMzIwCiAgICBnZXRiaXQKICAgIGJ5dGVjXzAgLy8gMHgwMAogICAgaW50Y18wIC8vIDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBieXRlYyA4IC8vIDB4ODAKICAgID09CiAgICBhc3NlcnQgLy8gVGhlIHByZXZpb3VzIGdhbWUgd2FzIG5vdCBmb3IgdGhlIG5hdGl2ZSB0b2tlbgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czozNjEKICAgIC8vIGFzc2VydCh0aGlzLmdhbWVzKGtleSkudmFsdWUuaXNBU0FUb2tlbiA9PT0gbmV3IEJvb2woZmFsc2UpLCAnVGhlIHByZXZpb3VzIGdhbWUgd2FzIEFTQSB0b2tlbicpCiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBpbnRjIDUgLy8gMzIxCiAgICBnZXRiaXQKICAgIGJ5dGVjXzAgLy8gMHgwMAogICAgaW50Y18wIC8vIDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBieXRlY18wIC8vIDB4MDAKICAgID09CiAgICBhc3NlcnQgLy8gVGhlIHByZXZpb3VzIGdhbWUgd2FzIEFTQSB0b2tlbgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czozNjIKICAgIC8vIGFzc2VydCh0aGlzLmdhbWVzKGtleSkudmFsdWUuYXNzZXRJZCA9PT0gYXNzZXRJZCwgJ1RoZSBwcmV2aW91cyBnYW1lIHdhcyBub3QgZm9yIHRoZSBuYXRpdmUgdG9rZW4nKQogICAgZHVwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgZXh0cmFjdCAzMiA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czozNDEKICAgIC8vIGNvbnN0IGFzc2V0SWQgPSBuZXcgVWludE42NCgwKQogICAgYnl0ZWNfMiAvLyAweDAwMDAwMDAwMDAwMDAwMDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MzYyCiAgICAvLyBhc3NlcnQodGhpcy5nYW1lcyhrZXkpLnZhbHVlLmFzc2V0SWQgPT09IGFzc2V0SWQsICdUaGUgcHJldmlvdXMgZ2FtZSB3YXMgbm90IGZvciB0aGUgbmF0aXZlIHRva2VuJykKICAgID09CiAgICBhc3NlcnQgLy8gVGhlIHByZXZpb3VzIGdhbWUgd2FzIG5vdCBmb3IgdGhlIG5hdGl2ZSB0b2tlbgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czozNjUKICAgIC8vIGNvbnN0IG9sZEJhbGFuY2UgPSB0aGlzLmdhbWVzKGtleSkudmFsdWUuYmFsYW5jZQogICAgZHVwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgZXh0cmFjdCAwIDMyIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czozNjYKICAgIC8vIHRoaXMuZ2FtZXMoa2V5KS52YWx1ZS5iYWxhbmNlID0gbmV3IFVpbnROMjU2KG9sZEJhbGFuY2UubmF0aXZlICsgQmlnVWludChkZXBvc2l0KSkKICAgIGZyYW1lX2RpZyAxCiAgICBiKwogICAgZHVwCiAgICBsZW4KICAgIGludGNfMSAvLyAzMgogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgZnJhbWVfZGlnIDAKICAgIGJ8CiAgICBkaWcgMQogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIHN3YXAKICAgIHJlcGxhY2UyIDAKICAgIGRpZyAxCiAgICBzd2FwCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjM2NwogICAgLy8gdGhpcy5nYW1lcyhrZXkpLnZhbHVlLndpblJhdGlvID0gd2luUmF0aW8KICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIGZyYW1lX2RpZyAtMQogICAgcmVwbGFjZTIgMTQ1CiAgICBib3hfcHV0CgpDcmVhdGVHYW1lV2l0aE5hdGl2ZVRva2VuX2FmdGVyX2lmX2Vsc2VANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MzkxCiAgICAvLyByZXR1cm4gdGhpcy5nYW1lcyhrZXkpLnZhbHVlCiAgICBmcmFtZV9kaWcgMgogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgpDcmVhdGVHYW1lV2l0aE5hdGl2ZVRva2VuX2Vsc2VfYm9keUA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czozNzEKICAgIC8vIGJhbGFuY2U6IG5ldyBVaW50TjI1NihCaWdVaW50KGRlcG9zaXQpKSwKICAgIGZyYW1lX2RpZyAxCiAgICBkdXAKICAgIGxlbgogICAgaW50Y18xIC8vIDMyCiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBmcmFtZV9kaWcgMAogICAgYnwKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6Mzc3CiAgICAvLyBjcmVhdGVkQXRUaW1lOiBuZXcgVWludE42NChHbG9iYWwubGF0ZXN0VGltZXN0YW1wKSwKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6Mzc4CiAgICAvLyBjcmVhdGVkQXRSb3VuZDogbmV3IFVpbnRONjQoR2xvYmFsLnJvdW5kKSwKICAgIGdsb2JhbCBSb3VuZAogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czozNzAtMzg4CiAgICAvLyBjb25zdCBuZXdWYWx1ZSA9IG5ldyBHYW1lU3RydWN0KHsKICAgIC8vICAgYmFsYW5jZTogbmV3IFVpbnROMjU2KEJpZ1VpbnQoZGVwb3NpdCkpLAogICAgLy8gICBhc3NldElkOiBhc3NldElkLAogICAgLy8gICBpc0FyYzIwMFRva2VuOiBuZXcgQm9vbChmYWxzZSksCiAgICAvLyAgIGlzTmF0aXZlVG9rZW46IG5ldyBCb29sKHRydWUpLAogICAgLy8gICBpc0FTQVRva2VuOiBuZXcgQm9vbChmYWxzZSksCiAgICAvLyAKICAgIC8vICAgY3JlYXRlZEF0VGltZTogbmV3IFVpbnRONjQoR2xvYmFsLmxhdGVzdFRpbWVzdGFtcCksCiAgICAvLyAgIGNyZWF0ZWRBdFJvdW5kOiBuZXcgVWludE42NChHbG9iYWwucm91bmQpLAogICAgLy8gCiAgICAvLyAgIGxhc3RQbGF5ZWRUaW1lOiBuZXcgVWludE42NCgwKSwKICAgIC8vICAgbGFzdFdpblRpbWU6IG5ldyBVaW50TjY0KDApLAogICAgLy8gICBsYXN0V2luQW1vdW50OiBuZXcgVWludE4yNTYoMCksCiAgICAvLyAgIGJpZ2dlc3RXaW5BbW91bnQ6IG5ldyBVaW50TjI1NigwKSwKICAgIC8vICAgYmlnZ2VzdFdpblRpbWU6IG5ldyBVaW50TjY0KDApLAogICAgLy8gCiAgICAvLyAgIHdpblJhdGlvOiB3aW5SYXRpbywKICAgIC8vICAgb3duZXI6IHNlbmRlciwKICAgIC8vIH0pCiAgICB1bmNvdmVyIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MzQxCiAgICAvLyBjb25zdCBhc3NldElkID0gbmV3IFVpbnRONjQoMCkKICAgIGJ5dGVjXzIgLy8gMHgwMDAwMDAwMDAwMDAwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjM3MC0zODgKICAgIC8vIGNvbnN0IG5ld1ZhbHVlID0gbmV3IEdhbWVTdHJ1Y3QoewogICAgLy8gICBiYWxhbmNlOiBuZXcgVWludE4yNTYoQmlnVWludChkZXBvc2l0KSksCiAgICAvLyAgIGFzc2V0SWQ6IGFzc2V0SWQsCiAgICAvLyAgIGlzQXJjMjAwVG9rZW46IG5ldyBCb29sKGZhbHNlKSwKICAgIC8vICAgaXNOYXRpdmVUb2tlbjogbmV3IEJvb2wodHJ1ZSksCiAgICAvLyAgIGlzQVNBVG9rZW46IG5ldyBCb29sKGZhbHNlKSwKICAgIC8vIAogICAgLy8gICBjcmVhdGVkQXRUaW1lOiBuZXcgVWludE42NChHbG9iYWwubGF0ZXN0VGltZXN0YW1wKSwKICAgIC8vICAgY3JlYXRlZEF0Um91bmQ6IG5ldyBVaW50TjY0KEdsb2JhbC5yb3VuZCksCiAgICAvLyAKICAgIC8vICAgbGFzdFBsYXllZFRpbWU6IG5ldyBVaW50TjY0KDApLAogICAgLy8gICBsYXN0V2luVGltZTogbmV3IFVpbnRONjQoMCksCiAgICAvLyAgIGxhc3RXaW5BbW91bnQ6IG5ldyBVaW50TjI1NigwKSwKICAgIC8vICAgYmlnZ2VzdFdpbkFtb3VudDogbmV3IFVpbnROMjU2KDApLAogICAgLy8gICBiaWdnZXN0V2luVGltZTogbmV3IFVpbnRONjQoMCksCiAgICAvLyAKICAgIC8vICAgd2luUmF0aW86IHdpblJhdGlvLAogICAgLy8gICBvd25lcjogc2VuZGVyLAogICAgLy8gfSkKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czozNzQKICAgIC8vIGlzTmF0aXZlVG9rZW46IG5ldyBCb29sKHRydWUpLAogICAgYnl0ZWMgOCAvLyAweDgwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjM3MC0zODgKICAgIC8vIGNvbnN0IG5ld1ZhbHVlID0gbmV3IEdhbWVTdHJ1Y3QoewogICAgLy8gICBiYWxhbmNlOiBuZXcgVWludE4yNTYoQmlnVWludChkZXBvc2l0KSksCiAgICAvLyAgIGFzc2V0SWQ6IGFzc2V0SWQsCiAgICAvLyAgIGlzQXJjMjAwVG9rZW46IG5ldyBCb29sKGZhbHNlKSwKICAgIC8vICAgaXNOYXRpdmVUb2tlbjogbmV3IEJvb2wodHJ1ZSksCiAgICAvLyAgIGlzQVNBVG9rZW46IG5ldyBCb29sKGZhbHNlKSwKICAgIC8vIAogICAgLy8gICBjcmVhdGVkQXRUaW1lOiBuZXcgVWludE42NChHbG9iYWwubGF0ZXN0VGltZXN0YW1wKSwKICAgIC8vICAgY3JlYXRlZEF0Um91bmQ6IG5ldyBVaW50TjY0KEdsb2JhbC5yb3VuZCksCiAgICAvLyAKICAgIC8vICAgbGFzdFBsYXllZFRpbWU6IG5ldyBVaW50TjY0KDApLAogICAgLy8gICBsYXN0V2luVGltZTogbmV3IFVpbnRONjQoMCksCiAgICAvLyAgIGxhc3RXaW5BbW91bnQ6IG5ldyBVaW50TjI1NigwKSwKICAgIC8vICAgYmlnZ2VzdFdpbkFtb3VudDogbmV3IFVpbnROMjU2KDApLAogICAgLy8gICBiaWdnZXN0V2luVGltZTogbmV3IFVpbnRONjQoMCksCiAgICAvLyAKICAgIC8vICAgd2luUmF0aW86IHdpblJhdGlvLAogICAgLy8gICBvd25lcjogc2VuZGVyLAogICAgLy8gfSkKICAgIGNvbmNhdAogICAgaW50YyA1IC8vIDMyMQogICAgaW50Y18wIC8vIDAKICAgIHNldGJpdAogICAgaW50YyA2IC8vIDMyMgogICAgaW50Y18wIC8vIDAKICAgIHNldGJpdAogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czozODAKICAgIC8vIGxhc3RQbGF5ZWRUaW1lOiBuZXcgVWludE42NCgwKSwKICAgIGJ5dGVjXzIgLy8gMHgwMDAwMDAwMDAwMDAwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjM3MC0zODgKICAgIC8vIGNvbnN0IG5ld1ZhbHVlID0gbmV3IEdhbWVTdHJ1Y3QoewogICAgLy8gICBiYWxhbmNlOiBuZXcgVWludE4yNTYoQmlnVWludChkZXBvc2l0KSksCiAgICAvLyAgIGFzc2V0SWQ6IGFzc2V0SWQsCiAgICAvLyAgIGlzQXJjMjAwVG9rZW46IG5ldyBCb29sKGZhbHNlKSwKICAgIC8vICAgaXNOYXRpdmVUb2tlbjogbmV3IEJvb2wodHJ1ZSksCiAgICAvLyAgIGlzQVNBVG9rZW46IG5ldyBCb29sKGZhbHNlKSwKICAgIC8vIAogICAgLy8gICBjcmVhdGVkQXRUaW1lOiBuZXcgVWludE42NChHbG9iYWwubGF0ZXN0VGltZXN0YW1wKSwKICAgIC8vICAgY3JlYXRlZEF0Um91bmQ6IG5ldyBVaW50TjY0KEdsb2JhbC5yb3VuZCksCiAgICAvLyAKICAgIC8vICAgbGFzdFBsYXllZFRpbWU6IG5ldyBVaW50TjY0KDApLAogICAgLy8gICBsYXN0V2luVGltZTogbmV3IFVpbnRONjQoMCksCiAgICAvLyAgIGxhc3RXaW5BbW91bnQ6IG5ldyBVaW50TjI1NigwKSwKICAgIC8vICAgYmlnZ2VzdFdpbkFtb3VudDogbmV3IFVpbnROMjU2KDApLAogICAgLy8gICBiaWdnZXN0V2luVGltZTogbmV3IFVpbnRONjQoMCksCiAgICAvLyAKICAgIC8vICAgd2luUmF0aW86IHdpblJhdGlvLAogICAgLy8gICBvd25lcjogc2VuZGVyLAogICAgLy8gfSkKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czozODEKICAgIC8vIGxhc3RXaW5UaW1lOiBuZXcgVWludE42NCgwKSwKICAgIGJ5dGVjXzIgLy8gMHgwMDAwMDAwMDAwMDAwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjM3MC0zODgKICAgIC8vIGNvbnN0IG5ld1ZhbHVlID0gbmV3IEdhbWVTdHJ1Y3QoewogICAgLy8gICBiYWxhbmNlOiBuZXcgVWludE4yNTYoQmlnVWludChkZXBvc2l0KSksCiAgICAvLyAgIGFzc2V0SWQ6IGFzc2V0SWQsCiAgICAvLyAgIGlzQXJjMjAwVG9rZW46IG5ldyBCb29sKGZhbHNlKSwKICAgIC8vICAgaXNOYXRpdmVUb2tlbjogbmV3IEJvb2wodHJ1ZSksCiAgICAvLyAgIGlzQVNBVG9rZW46IG5ldyBCb29sKGZhbHNlKSwKICAgIC8vIAogICAgLy8gICBjcmVhdGVkQXRUaW1lOiBuZXcgVWludE42NChHbG9iYWwubGF0ZXN0VGltZXN0YW1wKSwKICAgIC8vICAgY3JlYXRlZEF0Um91bmQ6IG5ldyBVaW50TjY0KEdsb2JhbC5yb3VuZCksCiAgICAvLyAKICAgIC8vICAgbGFzdFBsYXllZFRpbWU6IG5ldyBVaW50TjY0KDApLAogICAgLy8gICBsYXN0V2luVGltZTogbmV3IFVpbnRONjQoMCksCiAgICAvLyAgIGxhc3RXaW5BbW91bnQ6IG5ldyBVaW50TjI1NigwKSwKICAgIC8vICAgYmlnZ2VzdFdpbkFtb3VudDogbmV3IFVpbnROMjU2KDApLAogICAgLy8gICBiaWdnZXN0V2luVGltZTogbmV3IFVpbnRONjQoMCksCiAgICAvLyAKICAgIC8vICAgd2luUmF0aW86IHdpblJhdGlvLAogICAgLy8gICBvd25lcjogc2VuZGVyLAogICAgLy8gfSkKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czozODIKICAgIC8vIGxhc3RXaW5BbW91bnQ6IG5ldyBVaW50TjI1NigwKSwKICAgIGJ5dGVjXzEgLy8gMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjM3MC0zODgKICAgIC8vIGNvbnN0IG5ld1ZhbHVlID0gbmV3IEdhbWVTdHJ1Y3QoewogICAgLy8gICBiYWxhbmNlOiBuZXcgVWludE4yNTYoQmlnVWludChkZXBvc2l0KSksCiAgICAvLyAgIGFzc2V0SWQ6IGFzc2V0SWQsCiAgICAvLyAgIGlzQXJjMjAwVG9rZW46IG5ldyBCb29sKGZhbHNlKSwKICAgIC8vICAgaXNOYXRpdmVUb2tlbjogbmV3IEJvb2wodHJ1ZSksCiAgICAvLyAgIGlzQVNBVG9rZW46IG5ldyBCb29sKGZhbHNlKSwKICAgIC8vIAogICAgLy8gICBjcmVhdGVkQXRUaW1lOiBuZXcgVWludE42NChHbG9iYWwubGF0ZXN0VGltZXN0YW1wKSwKICAgIC8vICAgY3JlYXRlZEF0Um91bmQ6IG5ldyBVaW50TjY0KEdsb2JhbC5yb3VuZCksCiAgICAvLyAKICAgIC8vICAgbGFzdFBsYXllZFRpbWU6IG5ldyBVaW50TjY0KDApLAogICAgLy8gICBsYXN0V2luVGltZTogbmV3IFVpbnRONjQoMCksCiAgICAvLyAgIGxhc3RXaW5BbW91bnQ6IG5ldyBVaW50TjI1NigwKSwKICAgIC8vICAgYmlnZ2VzdFdpbkFtb3VudDogbmV3IFVpbnROMjU2KDApLAogICAgLy8gICBiaWdnZXN0V2luVGltZTogbmV3IFVpbnRONjQoMCksCiAgICAvLyAKICAgIC8vICAgd2luUmF0aW86IHdpblJhdGlvLAogICAgLy8gICBvd25lcjogc2VuZGVyLAogICAgLy8gfSkKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czozODQKICAgIC8vIGJpZ2dlc3RXaW5UaW1lOiBuZXcgVWludE42NCgwKSwKICAgIGJ5dGVjXzIgLy8gMHgwMDAwMDAwMDAwMDAwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjM3MC0zODgKICAgIC8vIGNvbnN0IG5ld1ZhbHVlID0gbmV3IEdhbWVTdHJ1Y3QoewogICAgLy8gICBiYWxhbmNlOiBuZXcgVWludE4yNTYoQmlnVWludChkZXBvc2l0KSksCiAgICAvLyAgIGFzc2V0SWQ6IGFzc2V0SWQsCiAgICAvLyAgIGlzQXJjMjAwVG9rZW46IG5ldyBCb29sKGZhbHNlKSwKICAgIC8vICAgaXNOYXRpdmVUb2tlbjogbmV3IEJvb2wodHJ1ZSksCiAgICAvLyAgIGlzQVNBVG9rZW46IG5ldyBCb29sKGZhbHNlKSwKICAgIC8vIAogICAgLy8gICBjcmVhdGVkQXRUaW1lOiBuZXcgVWludE42NChHbG9iYWwubGF0ZXN0VGltZXN0YW1wKSwKICAgIC8vICAgY3JlYXRlZEF0Um91bmQ6IG5ldyBVaW50TjY0KEdsb2JhbC5yb3VuZCksCiAgICAvLyAKICAgIC8vICAgbGFzdFBsYXllZFRpbWU6IG5ldyBVaW50TjY0KDApLAogICAgLy8gICBsYXN0V2luVGltZTogbmV3IFVpbnRONjQoMCksCiAgICAvLyAgIGxhc3RXaW5BbW91bnQ6IG5ldyBVaW50TjI1NigwKSwKICAgIC8vICAgYmlnZ2VzdFdpbkFtb3VudDogbmV3IFVpbnROMjU2KDApLAogICAgLy8gICBiaWdnZXN0V2luVGltZTogbmV3IFVpbnRONjQoMCksCiAgICAvLyAKICAgIC8vICAgd2luUmF0aW86IHdpblJhdGlvLAogICAgLy8gICBvd25lcjogc2VuZGVyLAogICAgLy8gfSkKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czozODMKICAgIC8vIGJpZ2dlc3RXaW5BbW91bnQ6IG5ldyBVaW50TjI1NigwKSwKICAgIGJ5dGVjXzEgLy8gMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjM3MC0zODgKICAgIC8vIGNvbnN0IG5ld1ZhbHVlID0gbmV3IEdhbWVTdHJ1Y3QoewogICAgLy8gICBiYWxhbmNlOiBuZXcgVWludE4yNTYoQmlnVWludChkZXBvc2l0KSksCiAgICAvLyAgIGFzc2V0SWQ6IGFzc2V0SWQsCiAgICAvLyAgIGlzQXJjMjAwVG9rZW46IG5ldyBCb29sKGZhbHNlKSwKICAgIC8vICAgaXNOYXRpdmVUb2tlbjogbmV3IEJvb2wodHJ1ZSksCiAgICAvLyAgIGlzQVNBVG9rZW46IG5ldyBCb29sKGZhbHNlKSwKICAgIC8vIAogICAgLy8gICBjcmVhdGVkQXRUaW1lOiBuZXcgVWludE42NChHbG9iYWwubGF0ZXN0VGltZXN0YW1wKSwKICAgIC8vICAgY3JlYXRlZEF0Um91bmQ6IG5ldyBVaW50TjY0KEdsb2JhbC5yb3VuZCksCiAgICAvLyAKICAgIC8vICAgbGFzdFBsYXllZFRpbWU6IG5ldyBVaW50TjY0KDApLAogICAgLy8gICBsYXN0V2luVGltZTogbmV3IFVpbnRONjQoMCksCiAgICAvLyAgIGxhc3RXaW5BbW91bnQ6IG5ldyBVaW50TjI1NigwKSwKICAgIC8vICAgYmlnZ2VzdFdpbkFtb3VudDogbmV3IFVpbnROMjU2KDApLAogICAgLy8gICBiaWdnZXN0V2luVGltZTogbmV3IFVpbnRONjQoMCksCiAgICAvLyAKICAgIC8vICAgd2luUmF0aW86IHdpblJhdGlvLAogICAgLy8gICBvd25lcjogc2VuZGVyLAogICAgLy8gfSkKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAzCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6Mzg5CiAgICAvLyB0aGlzLmdhbWVzKGtleSkudmFsdWUgPSBuZXdWYWx1ZS5jb3B5KCkKICAgIGZyYW1lX2RpZyAyCiAgICBzd2FwCiAgICBib3hfcHV0CiAgICBiIENyZWF0ZUdhbWVXaXRoTmF0aXZlVG9rZW5fYWZ0ZXJfaWZfZWxzZUA1CgoKLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo6QXZtU2F0b3NoaURpY2UuT3B0SW5Ub0FTQSh0eG5EZXBvc2l0OiB1aW50NjQsIGFzc2V0SWQ6IGJ5dGVzKSAtPiB2b2lkOgpPcHRJblRvQVNBOgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czozOTktNDAwCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gcHVibGljIE9wdEluVG9BU0EodHhuRGVwb3NpdDogZ3R4bi5QYXltZW50VHhuLCBhc3NldElkOiBVaW50TjY0KSB7CiAgICBwcm90byAyIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NDAyCiAgICAvLyB0eG5EZXBvc2l0LnJlY2VpdmVyID09PSBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcywKICAgIGZyYW1lX2RpZyAtMgogICAgZ3R4bnMgUmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo0MDEtNDA0CiAgICAvLyBhc3NlcnQoCiAgICAvLyAgIHR4bkRlcG9zaXQucmVjZWl2ZXIgPT09IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLAogICAgLy8gICAnUmVjZWl2ZXIgb2YgdGhlIG9wdGluIGZlZSBtdXN0IGJlIHRoZSBjdXJyZW50IHNtYXJ0IGNvbnRyYWN0JywKICAgIC8vICkKICAgIGFzc2VydCAvLyBSZWNlaXZlciBvZiB0aGUgb3B0aW4gZmVlIG11c3QgYmUgdGhlIGN1cnJlbnQgc21hcnQgY29udHJhY3QKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NDA1CiAgICAvLyBhc3NlcnQodHhuRGVwb3NpdC5hbW91bnQgPT09IDEwXzAwMF8wMDAsICdPcHQgaW4gZmVlIGZvciBuZXcgYXNzZXQgaXMgMTAgbmF0aXZlIHRva2VucycpCiAgICBmcmFtZV9kaWcgLTIKICAgIGd0eG5zIEFtb3VudAogICAgcHVzaGludCAxMDAwMDAwMCAvLyAxMDAwMDAwMAogICAgPT0KICAgIGFzc2VydCAvLyBPcHQgaW4gZmVlIGZvciBuZXcgYXNzZXQgaXMgMTAgbmF0aXZlIHRva2VucwogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo0MDcKICAgIC8vIGlmICghR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MuaXNPcHRlZEluKEFzc2V0KGFzc2V0SWQubmF0aXZlKSkpIHsKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIGR1cAogICAgY292ZXIgMgogICAgYXNzZXRfaG9sZGluZ19nZXQgQXNzZXRCYWxhbmNlCiAgICBidXJ5IDEKICAgIGJueiBPcHRJblRvQVNBX2FmdGVyX2lmX2Vsc2VAMwogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo0MDgtNDE1CiAgICAvLyBpdHhuCiAgICAvLyAgIC5hc3NldFRyYW5zZmVyKHsKICAgIC8vICAgICB4ZmVyQXNzZXQ6IGFzc2V0SWQubmF0aXZlLAogICAgLy8gICAgIGFzc2V0QW1vdW50OiAwLAogICAgLy8gICAgIGFzc2V0UmVjZWl2ZXI6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLAogICAgLy8gICAgIGZlZTogMCwKICAgIC8vICAgfSkKICAgIC8vICAgLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjQxMgogICAgLy8gYXNzZXRSZWNlaXZlcjogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MsCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjQxMQogICAgLy8gYXNzZXRBbW91bnQ6IDAsCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBBc3NldEFtb3VudAogICAgZnJhbWVfZGlnIDAKICAgIGl0eG5fZmllbGQgWGZlckFzc2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjQwOC00MTQKICAgIC8vIGl0eG4KICAgIC8vICAgLmFzc2V0VHJhbnNmZXIoewogICAgLy8gICAgIHhmZXJBc3NldDogYXNzZXRJZC5uYXRpdmUsCiAgICAvLyAgICAgYXNzZXRBbW91bnQ6IDAsCiAgICAvLyAgICAgYXNzZXRSZWNlaXZlcjogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MsCiAgICAvLyAgICAgZmVlOiAwLAogICAgLy8gICB9KQogICAgcHVzaGludCA0IC8vIDQKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NDEzCiAgICAvLyBmZWU6IDAsCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NDA4LTQxNQogICAgLy8gaXR4bgogICAgLy8gICAuYXNzZXRUcmFuc2Zlcih7CiAgICAvLyAgICAgeGZlckFzc2V0OiBhc3NldElkLm5hdGl2ZSwKICAgIC8vICAgICBhc3NldEFtb3VudDogMCwKICAgIC8vICAgICBhc3NldFJlY2VpdmVyOiBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcywKICAgIC8vICAgICBmZWU6IDAsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKCk9wdEluVG9BU0FfYWZ0ZXJfaWZfZWxzZUAzOgogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo6QXZtU2F0b3NoaURpY2UuQ3JlYXRlR2FtZVdpdGhBU0FUb2tlbih0eG5EZXBvc2l0OiB1aW50NjQsIHdpblJhdGlvOiBieXRlcykgLT4gYnl0ZXM6CkNyZWF0ZUdhbWVXaXRoQVNBVG9rZW46CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjQyNS00MjYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBwdWJsaWMgQ3JlYXRlR2FtZVdpdGhBU0FUb2tlbih0eG5EZXBvc2l0OiBndHhuLkFzc2V0VHJhbnNmZXJUeG4sIHdpblJhdGlvOiBVaW50TjY0KTogR2FtZVN0cnVjdCB7CiAgICBwcm90byAyIDEKICAgIGludGNfMCAvLyAwCiAgICBkdXBuIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NDI3CiAgICAvLyBjb25zdCBzZW5kZXIgPSBuZXcgYXJjNC5BZGRyZXNzKHR4bkRlcG9zaXQuc2VuZGVyKQogICAgZnJhbWVfZGlnIC0yCiAgICBndHhucyBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NDI4CiAgICAvLyBhc3NlcnQod2luUmF0aW8ubmF0aXZlIDw9IDFfMDAwXzAwMCwgJ1dpbiBwcm9iYWJpbGl0eSBtdXN0IGJlIGJlbG93IDEgMDAwIDAwMCcpCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIGludGMgNCAvLyAxMDAwMDAwCiAgICA8PQogICAgYXNzZXJ0IC8vIFdpbiBwcm9iYWJpbGl0eSBtdXN0IGJlIGJlbG93IDEgMDAwIDAwMAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo0MjkKICAgIC8vIGNvbnN0IGFzc2V0SWQgPSBuZXcgVWludE42NCh0eG5EZXBvc2l0LnhmZXJBc3NldC5pZCkKICAgIGZyYW1lX2RpZyAtMgogICAgZ3R4bnMgWGZlckFzc2V0CiAgICBpdG9iCiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NDMxCiAgICAvLyBjb25zdCBmZWU6IHVpbnQ2NCA9IHR4bkRlcG9zaXQuYXNzZXRBbW91bnQgLyA0MCAvLzIuNSUKICAgIGZyYW1lX2RpZyAtMgogICAgZ3R4bnMgQXNzZXRBbW91bnQKICAgIGR1cAogICAgcHVzaGludCA0MCAvLyA0MAogICAgLwogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo0MzIKICAgIC8vIGNvbnN0IGRlcG9zaXQ6IHVpbnQ2NCA9IHR4bkRlcG9zaXQuYXNzZXRBbW91bnQgLSBmZWUKICAgIC0KICAgIHN3YXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NDMzCiAgICAvLyBsZXQgcHJldkRlcG9zaXQ6IFVpbnROMjU2ID0gbmV3IFVpbnROMjU2KDApCiAgICBieXRlY18xIC8vIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAogICAgc3dhcAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoxNTEKICAgIC8vIHB1YmxpYyBhbGxEZXBvc2l0cyA9IEJveE1hcDxVaW50TjY0LCBVaW50TjI1Nj4oeyBrZXlQcmVmaXg6ICdkJyB9KQogICAgYnl0ZWMgNCAvLyAiZCIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZHVwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjQzNAogICAgLy8gaWYgKHRoaXMuYWxsRGVwb3NpdHMoYXNzZXRJZCkuZXhpc3RzKSB7CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGJ6IENyZWF0ZUdhbWVXaXRoQVNBVG9rZW5fYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjQzNQogICAgLy8gcHJldkRlcG9zaXQgPSB0aGlzLmFsbERlcG9zaXRzKGFzc2V0SWQpLnZhbHVlCiAgICBmcmFtZV9kaWcgNwogICAgYm94X2dldAogICAgc3dhcAogICAgZnJhbWVfYnVyeSA2CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQoKQ3JlYXRlR2FtZVdpdGhBU0FUb2tlbl9hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjQzOAogICAgLy8gdGhpcy5hbGxEZXBvc2l0cyhhc3NldElkKS52YWx1ZSA9IG5ldyBVaW50TjI1NihwcmV2RGVwb3NpdC5uYXRpdmUgKyBCaWdVaW50KGRlcG9zaXQpKQogICAgZnJhbWVfZGlnIDUKICAgIGl0b2IKICAgIGR1cAogICAgZnJhbWVfYnVyeSAxCiAgICBmcmFtZV9kaWcgNgogICAgYisKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzEgLy8gMzIKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGludGNfMSAvLyAzMgogICAgYnplcm8KICAgIGR1cAogICAgZnJhbWVfYnVyeSAwCiAgICBifAogICAgZnJhbWVfZGlnIDcKICAgIHN3YXAKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NDQwCiAgICAvLyBhc3NlcnQodHhuRGVwb3NpdC5hc3NldFJlY2VpdmVyID09PSBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcywgJ1JlY2VpdmVyIG11c3QgYmUgdGhlIGdhcyBzdGF0aW9uIGFwcCcpCiAgICBmcmFtZV9kaWcgLTIKICAgIGd0eG5zIEFzc2V0UmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIFJlY2VpdmVyIG11c3QgYmUgdGhlIGdhcyBzdGF0aW9uIGFwcAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo0NDItNDQ1CiAgICAvLyBjb25zdCBrZXkgPSBuZXcgQWRkcmVzc0Fzc2V0U3RydWN0KHsKICAgIC8vICAgYXNzZXRJZDogYXNzZXRJZCwKICAgIC8vICAgb3duZXI6IHNlbmRlciwKICAgIC8vIH0pCiAgICBmcmFtZV9kaWcgNAogICAgZnJhbWVfZGlnIDMKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoxNDkKICAgIC8vIHB1YmxpYyBnYW1lcyA9IEJveE1hcDxBZGRyZXNzQXNzZXRTdHJ1Y3QsIEdhbWVTdHJ1Y3Q+KHsga2V5UHJlZml4OiAnZycgfSkKICAgIGJ5dGVjIDUgLy8gImciCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgZnJhbWVfYnVyeSAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjQ0NgogICAgLy8gaWYgKHRoaXMuZ2FtZXMoa2V5KS5leGlzdHMpIHsKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYnogQ3JlYXRlR2FtZVdpdGhBU0FUb2tlbl9lbHNlX2JvZHlANAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo0NDcKICAgIC8vIGFzc2VydCh0aGlzLmdhbWVzKGtleSkudmFsdWUuaXNOYXRpdmVUb2tlbiA9PT0gbmV3IEJvb2woZmFsc2UpLCAnVGhlIHByZXZpb3VzIGdhbWUgd2FzIGZvciB0aGUgbmF0aXZlIHRva2VuJykKICAgIGZyYW1lX2RpZyAyCiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBpbnRjIDcgLy8gMzIwCiAgICBnZXRiaXQKICAgIGJ5dGVjXzAgLy8gMHgwMAogICAgaW50Y18wIC8vIDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBieXRlY18wIC8vIDB4MDAKICAgID09CiAgICBhc3NlcnQgLy8gVGhlIHByZXZpb3VzIGdhbWUgd2FzIGZvciB0aGUgbmF0aXZlIHRva2VuCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjQ0OAogICAgLy8gYXNzZXJ0KHRoaXMuZ2FtZXMoa2V5KS52YWx1ZS5pc0FyYzIwMFRva2VuID09PSBuZXcgQm9vbChmYWxzZSksICdUaGUgcHJldmlvdXMgZ2FtZSB3YXMgZm9yIHRoZSBhcmMyMDAgdG9rZW4nKQogICAgZHVwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgaW50YyA2IC8vIDMyMgogICAgZ2V0Yml0CiAgICBieXRlY18wIC8vIDB4MDAKICAgIGludGNfMCAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgYnl0ZWNfMCAvLyAweDAwCiAgICA9PQogICAgYXNzZXJ0IC8vIFRoZSBwcmV2aW91cyBnYW1lIHdhcyBmb3IgdGhlIGFyYzIwMCB0b2tlbgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo0NDkKICAgIC8vIGFzc2VydCh0aGlzLmdhbWVzKGtleSkudmFsdWUuaXNBU0FUb2tlbiA9PT0gbmV3IEJvb2wodHJ1ZSksICdUaGUgcHJldmlvdXMgZ2FtZSB3YXMgbm90IGZvciB0aGUgQVNBIHRva2VuJykKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIGludGMgNSAvLyAzMjEKICAgIGdldGJpdAogICAgYnl0ZWNfMCAvLyAweDAwCiAgICBpbnRjXzAgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGJ5dGVjIDggLy8gMHg4MAogICAgPT0KICAgIGFzc2VydCAvLyBUaGUgcHJldmlvdXMgZ2FtZSB3YXMgbm90IGZvciB0aGUgQVNBIHRva2VuCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjQ1MAogICAgLy8gYXNzZXJ0KHRoaXMuZ2FtZXMoa2V5KS52YWx1ZS5hc3NldElkID09PSBhc3NldElkLCAnVGhlIHByZXZpb3VzIGdhbWUgd2FzIG5vdCBmb3IgdGhlIHNhbWUgdG9rZW4nKQogICAgZHVwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgZXh0cmFjdCAzMiA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZnJhbWVfZGlnIDQKICAgID09CiAgICBhc3NlcnQgLy8gVGhlIHByZXZpb3VzIGdhbWUgd2FzIG5vdCBmb3IgdGhlIHNhbWUgdG9rZW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NDUzCiAgICAvLyBjb25zdCBvbGRCYWxhbmNlID0gdGhpcy5nYW1lcyhrZXkpLnZhbHVlLmJhbGFuY2UKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIGV4dHJhY3QgMCAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NDU0CiAgICAvLyB0aGlzLmdhbWVzKGtleSkudmFsdWUuYmFsYW5jZSA9IG5ldyBVaW50TjI1NihvbGRCYWxhbmNlLm5hdGl2ZSArIEJpZ1VpbnQoZGVwb3NpdCkpCiAgICBmcmFtZV9kaWcgMQogICAgYisKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzEgLy8gMzIKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGZyYW1lX2RpZyAwCiAgICBifAogICAgZGlnIDEKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBzd2FwCiAgICByZXBsYWNlMiAwCiAgICBkaWcgMQogICAgc3dhcAogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo0NTUKICAgIC8vIHRoaXMuZ2FtZXMoa2V5KS52YWx1ZS53aW5SYXRpbyA9IHdpblJhdGlvCiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBmcmFtZV9kaWcgLTEKICAgIHJlcGxhY2UyIDE0NQogICAgYm94X3B1dAoKQ3JlYXRlR2FtZVdpdGhBU0FUb2tlbl9hZnRlcl9pZl9lbHNlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjQ3OQogICAgLy8gcmV0dXJuIHRoaXMuZ2FtZXMoa2V5KS52YWx1ZQogICAgZnJhbWVfZGlnIDIKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKQ3JlYXRlR2FtZVdpdGhBU0FUb2tlbl9lbHNlX2JvZHlANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NDU5CiAgICAvLyBiYWxhbmNlOiBuZXcgVWludE4yNTYoQmlnVWludChkZXBvc2l0KSksCiAgICBmcmFtZV9kaWcgMQogICAgZHVwCiAgICBsZW4KICAgIGludGNfMSAvLyAzMgogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgZnJhbWVfZGlnIDAKICAgIGJ8CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjQ2NQogICAgLy8gY3JlYXRlZEF0VGltZTogbmV3IFVpbnRONjQoR2xvYmFsLmxhdGVzdFRpbWVzdGFtcCksCiAgICBnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjQ2NgogICAgLy8gY3JlYXRlZEF0Um91bmQ6IG5ldyBVaW50TjY0KEdsb2JhbC5yb3VuZCksCiAgICBnbG9iYWwgUm91bmQKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NDU4LTQ3NgogICAgLy8gY29uc3QgbmV3VmFsdWUgPSBuZXcgR2FtZVN0cnVjdCh7CiAgICAvLyAgIGJhbGFuY2U6IG5ldyBVaW50TjI1NihCaWdVaW50KGRlcG9zaXQpKSwKICAgIC8vICAgYXNzZXRJZDogYXNzZXRJZCwKICAgIC8vICAgaXNBcmMyMDBUb2tlbjogbmV3IEJvb2woZmFsc2UpLAogICAgLy8gICBpc05hdGl2ZVRva2VuOiBuZXcgQm9vbChmYWxzZSksCiAgICAvLyAgIGlzQVNBVG9rZW46IG5ldyBCb29sKHRydWUpLAogICAgLy8gCiAgICAvLyAgIGNyZWF0ZWRBdFRpbWU6IG5ldyBVaW50TjY0KEdsb2JhbC5sYXRlc3RUaW1lc3RhbXApLAogICAgLy8gICBjcmVhdGVkQXRSb3VuZDogbmV3IFVpbnRONjQoR2xvYmFsLnJvdW5kKSwKICAgIC8vIAogICAgLy8gICBsYXN0UGxheWVkVGltZTogbmV3IFVpbnRONjQoMCksCiAgICAvLyAgIGxhc3RXaW5UaW1lOiBuZXcgVWludE42NCgwKSwKICAgIC8vICAgbGFzdFdpbkFtb3VudDogbmV3IFVpbnROMjU2KDApLAogICAgLy8gICBiaWdnZXN0V2luQW1vdW50OiBuZXcgVWludE4yNTYoMCksCiAgICAvLyAgIGJpZ2dlc3RXaW5UaW1lOiBuZXcgVWludE42NCgwKSwKICAgIC8vIAogICAgLy8gICB3aW5SYXRpbzogd2luUmF0aW8sCiAgICAvLyAgIG93bmVyOiBzZW5kZXIsCiAgICAvLyB9KQogICAgdW5jb3ZlciAyCiAgICBmcmFtZV9kaWcgNAogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjQ2MgogICAgLy8gaXNOYXRpdmVUb2tlbjogbmV3IEJvb2woZmFsc2UpLAogICAgYnl0ZWNfMCAvLyAweDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjQ1OC00NzYKICAgIC8vIGNvbnN0IG5ld1ZhbHVlID0gbmV3IEdhbWVTdHJ1Y3QoewogICAgLy8gICBiYWxhbmNlOiBuZXcgVWludE4yNTYoQmlnVWludChkZXBvc2l0KSksCiAgICAvLyAgIGFzc2V0SWQ6IGFzc2V0SWQsCiAgICAvLyAgIGlzQXJjMjAwVG9rZW46IG5ldyBCb29sKGZhbHNlKSwKICAgIC8vICAgaXNOYXRpdmVUb2tlbjogbmV3IEJvb2woZmFsc2UpLAogICAgLy8gICBpc0FTQVRva2VuOiBuZXcgQm9vbCh0cnVlKSwKICAgIC8vIAogICAgLy8gICBjcmVhdGVkQXRUaW1lOiBuZXcgVWludE42NChHbG9iYWwubGF0ZXN0VGltZXN0YW1wKSwKICAgIC8vICAgY3JlYXRlZEF0Um91bmQ6IG5ldyBVaW50TjY0KEdsb2JhbC5yb3VuZCksCiAgICAvLyAKICAgIC8vICAgbGFzdFBsYXllZFRpbWU6IG5ldyBVaW50TjY0KDApLAogICAgLy8gICBsYXN0V2luVGltZTogbmV3IFVpbnRONjQoMCksCiAgICAvLyAgIGxhc3RXaW5BbW91bnQ6IG5ldyBVaW50TjI1NigwKSwKICAgIC8vICAgYmlnZ2VzdFdpbkFtb3VudDogbmV3IFVpbnROMjU2KDApLAogICAgLy8gICBiaWdnZXN0V2luVGltZTogbmV3IFVpbnRONjQoMCksCiAgICAvLyAKICAgIC8vICAgd2luUmF0aW86IHdpblJhdGlvLAogICAgLy8gICBvd25lcjogc2VuZGVyLAogICAgLy8gfSkKICAgIGNvbmNhdAogICAgaW50YyA1IC8vIDMyMQogICAgaW50Y18yIC8vIDEKICAgIHNldGJpdAogICAgaW50YyA2IC8vIDMyMgogICAgaW50Y18wIC8vIDAKICAgIHNldGJpdAogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo0NjgKICAgIC8vIGxhc3RQbGF5ZWRUaW1lOiBuZXcgVWludE42NCgwKSwKICAgIGJ5dGVjXzIgLy8gMHgwMDAwMDAwMDAwMDAwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjQ1OC00NzYKICAgIC8vIGNvbnN0IG5ld1ZhbHVlID0gbmV3IEdhbWVTdHJ1Y3QoewogICAgLy8gICBiYWxhbmNlOiBuZXcgVWludE4yNTYoQmlnVWludChkZXBvc2l0KSksCiAgICAvLyAgIGFzc2V0SWQ6IGFzc2V0SWQsCiAgICAvLyAgIGlzQXJjMjAwVG9rZW46IG5ldyBCb29sKGZhbHNlKSwKICAgIC8vICAgaXNOYXRpdmVUb2tlbjogbmV3IEJvb2woZmFsc2UpLAogICAgLy8gICBpc0FTQVRva2VuOiBuZXcgQm9vbCh0cnVlKSwKICAgIC8vIAogICAgLy8gICBjcmVhdGVkQXRUaW1lOiBuZXcgVWludE42NChHbG9iYWwubGF0ZXN0VGltZXN0YW1wKSwKICAgIC8vICAgY3JlYXRlZEF0Um91bmQ6IG5ldyBVaW50TjY0KEdsb2JhbC5yb3VuZCksCiAgICAvLyAKICAgIC8vICAgbGFzdFBsYXllZFRpbWU6IG5ldyBVaW50TjY0KDApLAogICAgLy8gICBsYXN0V2luVGltZTogbmV3IFVpbnRONjQoMCksCiAgICAvLyAgIGxhc3RXaW5BbW91bnQ6IG5ldyBVaW50TjI1NigwKSwKICAgIC8vICAgYmlnZ2VzdFdpbkFtb3VudDogbmV3IFVpbnROMjU2KDApLAogICAgLy8gICBiaWdnZXN0V2luVGltZTogbmV3IFVpbnRONjQoMCksCiAgICAvLyAKICAgIC8vICAgd2luUmF0aW86IHdpblJhdGlvLAogICAgLy8gICBvd25lcjogc2VuZGVyLAogICAgLy8gfSkKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo0NjkKICAgIC8vIGxhc3RXaW5UaW1lOiBuZXcgVWludE42NCgwKSwKICAgIGJ5dGVjXzIgLy8gMHgwMDAwMDAwMDAwMDAwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjQ1OC00NzYKICAgIC8vIGNvbnN0IG5ld1ZhbHVlID0gbmV3IEdhbWVTdHJ1Y3QoewogICAgLy8gICBiYWxhbmNlOiBuZXcgVWludE4yNTYoQmlnVWludChkZXBvc2l0KSksCiAgICAvLyAgIGFzc2V0SWQ6IGFzc2V0SWQsCiAgICAvLyAgIGlzQXJjMjAwVG9rZW46IG5ldyBCb29sKGZhbHNlKSwKICAgIC8vICAgaXNOYXRpdmVUb2tlbjogbmV3IEJvb2woZmFsc2UpLAogICAgLy8gICBpc0FTQVRva2VuOiBuZXcgQm9vbCh0cnVlKSwKICAgIC8vIAogICAgLy8gICBjcmVhdGVkQXRUaW1lOiBuZXcgVWludE42NChHbG9iYWwubGF0ZXN0VGltZXN0YW1wKSwKICAgIC8vICAgY3JlYXRlZEF0Um91bmQ6IG5ldyBVaW50TjY0KEdsb2JhbC5yb3VuZCksCiAgICAvLyAKICAgIC8vICAgbGFzdFBsYXllZFRpbWU6IG5ldyBVaW50TjY0KDApLAogICAgLy8gICBsYXN0V2luVGltZTogbmV3IFVpbnRONjQoMCksCiAgICAvLyAgIGxhc3RXaW5BbW91bnQ6IG5ldyBVaW50TjI1NigwKSwKICAgIC8vICAgYmlnZ2VzdFdpbkFtb3VudDogbmV3IFVpbnROMjU2KDApLAogICAgLy8gICBiaWdnZXN0V2luVGltZTogbmV3IFVpbnRONjQoMCksCiAgICAvLyAKICAgIC8vICAgd2luUmF0aW86IHdpblJhdGlvLAogICAgLy8gICBvd25lcjogc2VuZGVyLAogICAgLy8gfSkKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo0NzAKICAgIC8vIGxhc3RXaW5BbW91bnQ6IG5ldyBVaW50TjI1NigwKSwKICAgIGJ5dGVjXzEgLy8gMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjQ1OC00NzYKICAgIC8vIGNvbnN0IG5ld1ZhbHVlID0gbmV3IEdhbWVTdHJ1Y3QoewogICAgLy8gICBiYWxhbmNlOiBuZXcgVWludE4yNTYoQmlnVWludChkZXBvc2l0KSksCiAgICAvLyAgIGFzc2V0SWQ6IGFzc2V0SWQsCiAgICAvLyAgIGlzQXJjMjAwVG9rZW46IG5ldyBCb29sKGZhbHNlKSwKICAgIC8vICAgaXNOYXRpdmVUb2tlbjogbmV3IEJvb2woZmFsc2UpLAogICAgLy8gICBpc0FTQVRva2VuOiBuZXcgQm9vbCh0cnVlKSwKICAgIC8vIAogICAgLy8gICBjcmVhdGVkQXRUaW1lOiBuZXcgVWludE42NChHbG9iYWwubGF0ZXN0VGltZXN0YW1wKSwKICAgIC8vICAgY3JlYXRlZEF0Um91bmQ6IG5ldyBVaW50TjY0KEdsb2JhbC5yb3VuZCksCiAgICAvLyAKICAgIC8vICAgbGFzdFBsYXllZFRpbWU6IG5ldyBVaW50TjY0KDApLAogICAgLy8gICBsYXN0V2luVGltZTogbmV3IFVpbnRONjQoMCksCiAgICAvLyAgIGxhc3RXaW5BbW91bnQ6IG5ldyBVaW50TjI1NigwKSwKICAgIC8vICAgYmlnZ2VzdFdpbkFtb3VudDogbmV3IFVpbnROMjU2KDApLAogICAgLy8gICBiaWdnZXN0V2luVGltZTogbmV3IFVpbnRONjQoMCksCiAgICAvLyAKICAgIC8vICAgd2luUmF0aW86IHdpblJhdGlvLAogICAgLy8gICBvd25lcjogc2VuZGVyLAogICAgLy8gfSkKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo0NzIKICAgIC8vIGJpZ2dlc3RXaW5UaW1lOiBuZXcgVWludE42NCgwKSwKICAgIGJ5dGVjXzIgLy8gMHgwMDAwMDAwMDAwMDAwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjQ1OC00NzYKICAgIC8vIGNvbnN0IG5ld1ZhbHVlID0gbmV3IEdhbWVTdHJ1Y3QoewogICAgLy8gICBiYWxhbmNlOiBuZXcgVWludE4yNTYoQmlnVWludChkZXBvc2l0KSksCiAgICAvLyAgIGFzc2V0SWQ6IGFzc2V0SWQsCiAgICAvLyAgIGlzQXJjMjAwVG9rZW46IG5ldyBCb29sKGZhbHNlKSwKICAgIC8vICAgaXNOYXRpdmVUb2tlbjogbmV3IEJvb2woZmFsc2UpLAogICAgLy8gICBpc0FTQVRva2VuOiBuZXcgQm9vbCh0cnVlKSwKICAgIC8vIAogICAgLy8gICBjcmVhdGVkQXRUaW1lOiBuZXcgVWludE42NChHbG9iYWwubGF0ZXN0VGltZXN0YW1wKSwKICAgIC8vICAgY3JlYXRlZEF0Um91bmQ6IG5ldyBVaW50TjY0KEdsb2JhbC5yb3VuZCksCiAgICAvLyAKICAgIC8vICAgbGFzdFBsYXllZFRpbWU6IG5ldyBVaW50TjY0KDApLAogICAgLy8gICBsYXN0V2luVGltZTogbmV3IFVpbnRONjQoMCksCiAgICAvLyAgIGxhc3RXaW5BbW91bnQ6IG5ldyBVaW50TjI1NigwKSwKICAgIC8vICAgYmlnZ2VzdFdpbkFtb3VudDogbmV3IFVpbnROMjU2KDApLAogICAgLy8gICBiaWdnZXN0V2luVGltZTogbmV3IFVpbnRONjQoMCksCiAgICAvLyAKICAgIC8vICAgd2luUmF0aW86IHdpblJhdGlvLAogICAgLy8gICBvd25lcjogc2VuZGVyLAogICAgLy8gfSkKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo0NzEKICAgIC8vIGJpZ2dlc3RXaW5BbW91bnQ6IG5ldyBVaW50TjI1NigwKSwKICAgIGJ5dGVjXzEgLy8gMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjQ1OC00NzYKICAgIC8vIGNvbnN0IG5ld1ZhbHVlID0gbmV3IEdhbWVTdHJ1Y3QoewogICAgLy8gICBiYWxhbmNlOiBuZXcgVWludE4yNTYoQmlnVWludChkZXBvc2l0KSksCiAgICAvLyAgIGFzc2V0SWQ6IGFzc2V0SWQsCiAgICAvLyAgIGlzQXJjMjAwVG9rZW46IG5ldyBCb29sKGZhbHNlKSwKICAgIC8vICAgaXNOYXRpdmVUb2tlbjogbmV3IEJvb2woZmFsc2UpLAogICAgLy8gICBpc0FTQVRva2VuOiBuZXcgQm9vbCh0cnVlKSwKICAgIC8vIAogICAgLy8gICBjcmVhdGVkQXRUaW1lOiBuZXcgVWludE42NChHbG9iYWwubGF0ZXN0VGltZXN0YW1wKSwKICAgIC8vICAgY3JlYXRlZEF0Um91bmQ6IG5ldyBVaW50TjY0KEdsb2JhbC5yb3VuZCksCiAgICAvLyAKICAgIC8vICAgbGFzdFBsYXllZFRpbWU6IG5ldyBVaW50TjY0KDApLAogICAgLy8gICBsYXN0V2luVGltZTogbmV3IFVpbnRONjQoMCksCiAgICAvLyAgIGxhc3RXaW5BbW91bnQ6IG5ldyBVaW50TjI1NigwKSwKICAgIC8vICAgYmlnZ2VzdFdpbkFtb3VudDogbmV3IFVpbnROMjU2KDApLAogICAgLy8gICBiaWdnZXN0V2luVGltZTogbmV3IFVpbnRONjQoMCksCiAgICAvLyAKICAgIC8vICAgd2luUmF0aW86IHdpblJhdGlvLAogICAgLy8gICBvd25lcjogc2VuZGVyLAogICAgLy8gfSkKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAzCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NDc3CiAgICAvLyB0aGlzLmdhbWVzKGtleSkudmFsdWUgPSBuZXdWYWx1ZS5jb3B5KCkKICAgIGZyYW1lX2RpZyAyCiAgICBzd2FwCiAgICBib3hfcHV0CiAgICBiIENyZWF0ZUdhbWVXaXRoQVNBVG9rZW5fYWZ0ZXJfaWZfZWxzZUA1CgoKLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo6QXZtU2F0b3NoaURpY2UuQ3JlYXRlR2FtZVdpdGhBcmMyMDBUb2tlbihhc3NldElkOiBieXRlcywgYW1vdW50OiBieXRlcywgd2luUmF0aW86IGJ5dGVzKSAtPiBieXRlczoKQ3JlYXRlR2FtZVdpdGhBcmMyMDBUb2tlbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NDg4LTQ4OQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIHB1YmxpYyBDcmVhdGVHYW1lV2l0aEFyYzIwMFRva2VuKGFzc2V0SWQ6IFVpbnRONjQsIGFtb3VudDogVWludE4yNTYsIHdpblJhdGlvOiBVaW50TjY0KTogR2FtZVN0cnVjdCB7CiAgICBwcm90byAzIDEKICAgIGludGNfMCAvLyAwCiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NDkwCiAgICAvLyBjb25zdCBzZW5kZXIgPSBuZXcgYXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjQ5MQogICAgLy8gYXNzZXJ0KHdpblJhdGlvLm5hdGl2ZSA8PSAxXzAwMF8wMDAsICdXaW4gcHJvYmFiaWxpdHkgbXVzdCBiZSBiZWxvdyAxIDAwMCAwMDAnKQogICAgZnJhbWVfZGlnIC0xCiAgICBidG9pCiAgICBpbnRjIDQgLy8gMTAwMDAwMAogICAgPD0KICAgIGFzc2VydCAvLyBXaW4gcHJvYmFiaWxpdHkgbXVzdCBiZSBiZWxvdyAxIDAwMCAwMDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NDkzCiAgICAvLyBjb25zdCBmZWU6IGJpZ3VpbnQgPSBhbW91bnQubmF0aXZlIC8gQmlnVWludCg0MCkgLy8yLjUlCiAgICBmcmFtZV9kaWcgLTIKICAgIHB1c2hieXRlcyAweDI4CiAgICBiLwogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo0OTQKICAgIC8vIGNvbnN0IGRlcG9zaXQ6IGJpZ3VpbnQgPSBhbW91bnQubmF0aXZlIC0gZmVlCiAgICBmcmFtZV9kaWcgLTIKICAgIHN3YXAKICAgIGItCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjQ5NQogICAgLy8gbGV0IHByZXZEZXBvc2l0OiBVaW50TjI1NiA9IG5ldyBVaW50TjI1NigwKQogICAgYnl0ZWNfMSAvLyAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MTUxCiAgICAvLyBwdWJsaWMgYWxsRGVwb3NpdHMgPSBCb3hNYXA8VWludE42NCwgVWludE4yNTY+KHsga2V5UHJlZml4OiAnZCcgfSkKICAgIGJ5dGVjIDQgLy8gImQiCiAgICBmcmFtZV9kaWcgLTMKICAgIGNvbmNhdAogICAgZHVwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjQ5NgogICAgLy8gaWYgKHRoaXMuYWxsRGVwb3NpdHMoYXNzZXRJZCkuZXhpc3RzKSB7CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGJ6IENyZWF0ZUdhbWVXaXRoQXJjMjAwVG9rZW5fYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjQ5NwogICAgLy8gcHJldkRlcG9zaXQgPSB0aGlzLmFsbERlcG9zaXRzKGFzc2V0SWQpLnZhbHVlCiAgICBmcmFtZV9kaWcgNQogICAgYm94X2dldAogICAgc3dhcAogICAgZnJhbWVfYnVyeSA0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQoKQ3JlYXRlR2FtZVdpdGhBcmMyMDBUb2tlbl9hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjUwMAogICAgLy8gdGhpcy5hbGxEZXBvc2l0cyhhc3NldElkKS52YWx1ZSA9IG5ldyBVaW50TjI1NihwcmV2RGVwb3NpdC5uYXRpdmUgKyBCaWdVaW50KGRlcG9zaXQpKQogICAgZnJhbWVfZGlnIDQKICAgIGZyYW1lX2RpZyAzCiAgICBiKwogICAgZHVwCiAgICBsZW4KICAgIGludGNfMSAvLyAzMgogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgaW50Y18xIC8vIDMyCiAgICBiemVybwogICAgZHVwCiAgICBmcmFtZV9idXJ5IDAKICAgIGJ8CiAgICBmcmFtZV9kaWcgNQogICAgc3dhcAogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo1MDMtNTEzCiAgICAvLyBpdHhuCiAgICAvLyAgIC5hcHBsaWNhdGlvbkNhbGwoewogICAgLy8gICAgIGFwcElkOiBhc3NldElkLm5hdGl2ZSwKICAgIC8vICAgICBhcHBBcmdzOiBbCiAgICAvLyAgICAgICBtZXRob2RTZWxlY3RvcignYXJjMjAwX3RyYW5zZmVyRnJvbShhZGRyZXNzLGFkZHJlc3MsdWludDI1Nilib29sJyksCiAgICAvLyAgICAgICBuZXcgQWRkcmVzcyhUeG4uc2VuZGVyKSwKICAgIC8vICAgICAgIG5ldyBBZGRyZXNzKEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzKSwKICAgIC8vICAgICAgIGFtb3VudCwKICAgIC8vICAgICBdLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NTA1CiAgICAvLyBhcHBJZDogYXNzZXRJZC5uYXRpdmUsCiAgICBmcmFtZV9kaWcgLTMKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NTA4CiAgICAvLyBuZXcgQWRkcmVzcyhUeG4uc2VuZGVyKSwKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NTA5CiAgICAvLyBuZXcgQWRkcmVzcyhHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcyksCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo1MDcKICAgIC8vIG1ldGhvZFNlbGVjdG9yKCdhcmMyMDBfdHJhbnNmZXJGcm9tKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KWJvb2wnKSwKICAgIGJ5dGVjIDE2IC8vIG1ldGhvZCAiYXJjMjAwX3RyYW5zZmVyRnJvbShhZGRyZXNzLGFkZHJlc3MsdWludDI1Nilib29sIgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIHN3YXAKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgZnJhbWVfZGlnIC0yCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjUwMy01MTIKICAgIC8vIGl0eG4KICAgIC8vICAgLmFwcGxpY2F0aW9uQ2FsbCh7CiAgICAvLyAgICAgYXBwSWQ6IGFzc2V0SWQubmF0aXZlLAogICAgLy8gICAgIGFwcEFyZ3M6IFsKICAgIC8vICAgICAgIG1ldGhvZFNlbGVjdG9yKCdhcmMyMDBfdHJhbnNmZXJGcm9tKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KWJvb2wnKSwKICAgIC8vICAgICAgIG5ldyBBZGRyZXNzKFR4bi5zZW5kZXIpLAogICAgLy8gICAgICAgbmV3IEFkZHJlc3MoR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MpLAogICAgLy8gICAgICAgYW1vdW50LAogICAgLy8gICAgIF0sCiAgICAvLyAgIH0pCiAgICBwdXNoaW50IDYgLy8gNgogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjUwMy01MTMKICAgIC8vIGl0eG4KICAgIC8vICAgLmFwcGxpY2F0aW9uQ2FsbCh7CiAgICAvLyAgICAgYXBwSWQ6IGFzc2V0SWQubmF0aXZlLAogICAgLy8gICAgIGFwcEFyZ3M6IFsKICAgIC8vICAgICAgIG1ldGhvZFNlbGVjdG9yKCdhcmMyMDBfdHJhbnNmZXJGcm9tKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KWJvb2wnKSwKICAgIC8vICAgICAgIG5ldyBBZGRyZXNzKFR4bi5zZW5kZXIpLAogICAgLy8gICAgICAgbmV3IEFkZHJlc3MoR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MpLAogICAgLy8gICAgICAgYW1vdW50LAogICAgLy8gICAgIF0sCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NTE1LTUxOAogICAgLy8gY29uc3Qga2V5ID0gbmV3IEFkZHJlc3NBc3NldFN0cnVjdCh7CiAgICAvLyAgIGFzc2V0SWQ6IGFzc2V0SWQsCiAgICAvLyAgIG93bmVyOiBzZW5kZXIsCiAgICAvLyB9KQogICAgZnJhbWVfZGlnIC0zCiAgICBmcmFtZV9kaWcgMgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjE0OQogICAgLy8gcHVibGljIGdhbWVzID0gQm94TWFwPEFkZHJlc3NBc3NldFN0cnVjdCwgR2FtZVN0cnVjdD4oeyBrZXlQcmVmaXg6ICdnJyB9KQogICAgYnl0ZWMgNSAvLyAiZyIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZHVwCiAgICBmcmFtZV9idXJ5IDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NTE5CiAgICAvLyBpZiAodGhpcy5nYW1lcyhrZXkpLmV4aXN0cykgewogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBieiBDcmVhdGVHYW1lV2l0aEFyYzIwMFRva2VuX2Vsc2VfYm9keUA1CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjUyMAogICAgLy8gYXNzZXJ0KHRoaXMuZ2FtZXMoa2V5KS52YWx1ZS5pc05hdGl2ZVRva2VuID09PSBuZXcgQm9vbChmYWxzZSksICdUaGUgcHJldmlvdXMgZ2FtZSB3YXMgZm9yIHRoZSBuYXRpdmUgdG9rZW4nKQogICAgZnJhbWVfZGlnIDEKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIGludGMgNyAvLyAzMjAKICAgIGdldGJpdAogICAgYnl0ZWNfMCAvLyAweDAwCiAgICBpbnRjXzAgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGJ5dGVjXzAgLy8gMHgwMAogICAgPT0KICAgIGFzc2VydCAvLyBUaGUgcHJldmlvdXMgZ2FtZSB3YXMgZm9yIHRoZSBuYXRpdmUgdG9rZW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NTIxCiAgICAvLyBhc3NlcnQodGhpcy5nYW1lcyhrZXkpLnZhbHVlLmlzQXJjMjAwVG9rZW4gPT09IG5ldyBCb29sKHRydWUpLCAnVGhlIHByZXZpb3VzIGdhbWUgd2FzIE5PVCBmb3IgdGhlIGFyYzIwMCB0b2tlbicpCiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBpbnRjIDYgLy8gMzIyCiAgICBnZXRiaXQKICAgIGJ5dGVjXzAgLy8gMHgwMAogICAgaW50Y18wIC8vIDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBieXRlYyA4IC8vIDB4ODAKICAgID09CiAgICBhc3NlcnQgLy8gVGhlIHByZXZpb3VzIGdhbWUgd2FzIE5PVCBmb3IgdGhlIGFyYzIwMCB0b2tlbgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo1MjIKICAgIC8vIGFzc2VydCh0aGlzLmdhbWVzKGtleSkudmFsdWUuaXNBU0FUb2tlbiA9PT0gbmV3IEJvb2woZmFsc2UpLCAnVGhlIHByZXZpb3VzIGdhbWUgd2FzIGZvciB0aGUgQVNBIHRva2VuJykKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIGludGMgNSAvLyAzMjEKICAgIGdldGJpdAogICAgYnl0ZWNfMCAvLyAweDAwCiAgICBpbnRjXzAgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGJ5dGVjXzAgLy8gMHgwMAogICAgPT0KICAgIGFzc2VydCAvLyBUaGUgcHJldmlvdXMgZ2FtZSB3YXMgZm9yIHRoZSBBU0EgdG9rZW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NTIzCiAgICAvLyBhc3NlcnQodGhpcy5nYW1lcyhrZXkpLnZhbHVlLmFzc2V0SWQgPT09IGFzc2V0SWQsICdUaGUgcHJldmlvdXMgZ2FtZSB3YXMgbm90IGZvciB0aGUgc2FtZSB0b2tlbicpCiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBleHRyYWN0IDMyIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBmcmFtZV9kaWcgLTMKICAgID09CiAgICBhc3NlcnQgLy8gVGhlIHByZXZpb3VzIGdhbWUgd2FzIG5vdCBmb3IgdGhlIHNhbWUgdG9rZW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NTI2CiAgICAvLyBjb25zdCBvbGRCYWxhbmNlID0gdGhpcy5nYW1lcyhrZXkpLnZhbHVlLmJhbGFuY2UKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIGV4dHJhY3QgMCAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NTI3CiAgICAvLyB0aGlzLmdhbWVzKGtleSkudmFsdWUuYmFsYW5jZSA9IG5ldyBVaW50TjI1NihvbGRCYWxhbmNlLm5hdGl2ZSArIEJpZ1VpbnQoZGVwb3NpdCkpCiAgICBmcmFtZV9kaWcgMwogICAgYisKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzEgLy8gMzIKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGZyYW1lX2RpZyAwCiAgICBifAogICAgZGlnIDEKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBzd2FwCiAgICByZXBsYWNlMiAwCiAgICBkaWcgMQogICAgc3dhcAogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo1MjgKICAgIC8vIHRoaXMuZ2FtZXMoa2V5KS52YWx1ZS53aW5SYXRpbyA9IHdpblJhdGlvCiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBmcmFtZV9kaWcgLTEKICAgIHJlcGxhY2UyIDE0NQogICAgYm94X3B1dAoKQ3JlYXRlR2FtZVdpdGhBcmMyMDBUb2tlbl9hZnRlcl9pZl9lbHNlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjU1MgogICAgLy8gcmV0dXJuIHRoaXMuZ2FtZXMoa2V5KS52YWx1ZQogICAgZnJhbWVfZGlnIDEKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKQ3JlYXRlR2FtZVdpdGhBcmMyMDBUb2tlbl9lbHNlX2JvZHlANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NTMyCiAgICAvLyBiYWxhbmNlOiBuZXcgVWludE4yNTYoZGVwb3NpdCksCiAgICBmcmFtZV9kaWcgMwogICAgZHVwCiAgICBsZW4KICAgIGludGNfMSAvLyAzMgogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgZnJhbWVfZGlnIDAKICAgIGJ8CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjUzOAogICAgLy8gY3JlYXRlZEF0VGltZTogbmV3IFVpbnRONjQoR2xvYmFsLmxhdGVzdFRpbWVzdGFtcCksCiAgICBnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjUzOQogICAgLy8gY3JlYXRlZEF0Um91bmQ6IG5ldyBVaW50TjY0KEdsb2JhbC5yb3VuZCksCiAgICBnbG9iYWwgUm91bmQKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NTMxLTU0OQogICAgLy8gY29uc3QgbmV3VmFsdWUgPSBuZXcgR2FtZVN0cnVjdCh7CiAgICAvLyAgIGJhbGFuY2U6IG5ldyBVaW50TjI1NihkZXBvc2l0KSwKICAgIC8vICAgYXNzZXRJZDogYXNzZXRJZCwKICAgIC8vICAgaXNBcmMyMDBUb2tlbjogbmV3IEJvb2wodHJ1ZSksCiAgICAvLyAgIGlzTmF0aXZlVG9rZW46IG5ldyBCb29sKGZhbHNlKSwKICAgIC8vICAgaXNBU0FUb2tlbjogbmV3IEJvb2woZmFsc2UpLAogICAgLy8gCiAgICAvLyAgIGNyZWF0ZWRBdFRpbWU6IG5ldyBVaW50TjY0KEdsb2JhbC5sYXRlc3RUaW1lc3RhbXApLAogICAgLy8gICBjcmVhdGVkQXRSb3VuZDogbmV3IFVpbnRONjQoR2xvYmFsLnJvdW5kKSwKICAgIC8vIAogICAgLy8gICBsYXN0UGxheWVkVGltZTogbmV3IFVpbnRONjQoMCksCiAgICAvLyAgIGxhc3RXaW5UaW1lOiBuZXcgVWludE42NCgwKSwKICAgIC8vICAgbGFzdFdpbkFtb3VudDogbmV3IFVpbnROMjU2KDApLAogICAgLy8gICBiaWdnZXN0V2luQW1vdW50OiBuZXcgVWludE4yNTYoMCksCiAgICAvLyAgIGJpZ2dlc3RXaW5UaW1lOiBuZXcgVWludE42NCgwKSwKICAgIC8vIAogICAgLy8gICB3aW5SYXRpbzogd2luUmF0aW8sCiAgICAvLyAgIG93bmVyOiBzZW5kZXIsCiAgICAvLyB9KQogICAgdW5jb3ZlciAyCiAgICBmcmFtZV9kaWcgLTMKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo1MzUKICAgIC8vIGlzTmF0aXZlVG9rZW46IG5ldyBCb29sKGZhbHNlKSwKICAgIGJ5dGVjXzAgLy8gMHgwMAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo1MzEtNTQ5CiAgICAvLyBjb25zdCBuZXdWYWx1ZSA9IG5ldyBHYW1lU3RydWN0KHsKICAgIC8vICAgYmFsYW5jZTogbmV3IFVpbnROMjU2KGRlcG9zaXQpLAogICAgLy8gICBhc3NldElkOiBhc3NldElkLAogICAgLy8gICBpc0FyYzIwMFRva2VuOiBuZXcgQm9vbCh0cnVlKSwKICAgIC8vICAgaXNOYXRpdmVUb2tlbjogbmV3IEJvb2woZmFsc2UpLAogICAgLy8gICBpc0FTQVRva2VuOiBuZXcgQm9vbChmYWxzZSksCiAgICAvLyAKICAgIC8vICAgY3JlYXRlZEF0VGltZTogbmV3IFVpbnRONjQoR2xvYmFsLmxhdGVzdFRpbWVzdGFtcCksCiAgICAvLyAgIGNyZWF0ZWRBdFJvdW5kOiBuZXcgVWludE42NChHbG9iYWwucm91bmQpLAogICAgLy8gCiAgICAvLyAgIGxhc3RQbGF5ZWRUaW1lOiBuZXcgVWludE42NCgwKSwKICAgIC8vICAgbGFzdFdpblRpbWU6IG5ldyBVaW50TjY0KDApLAogICAgLy8gICBsYXN0V2luQW1vdW50OiBuZXcgVWludE4yNTYoMCksCiAgICAvLyAgIGJpZ2dlc3RXaW5BbW91bnQ6IG5ldyBVaW50TjI1NigwKSwKICAgIC8vICAgYmlnZ2VzdFdpblRpbWU6IG5ldyBVaW50TjY0KDApLAogICAgLy8gCiAgICAvLyAgIHdpblJhdGlvOiB3aW5SYXRpbywKICAgIC8vICAgb3duZXI6IHNlbmRlciwKICAgIC8vIH0pCiAgICBjb25jYXQKICAgIGludGMgNSAvLyAzMjEKICAgIGludGNfMCAvLyAwCiAgICBzZXRiaXQKICAgIGludGMgNiAvLyAzMjIKICAgIGludGNfMiAvLyAxCiAgICBzZXRiaXQKICAgIHVuY292ZXIgMgogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NTQxCiAgICAvLyBsYXN0UGxheWVkVGltZTogbmV3IFVpbnRONjQoMCksCiAgICBieXRlY18yIC8vIDB4MDAwMDAwMDAwMDAwMDAwMAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo1MzEtNTQ5CiAgICAvLyBjb25zdCBuZXdWYWx1ZSA9IG5ldyBHYW1lU3RydWN0KHsKICAgIC8vICAgYmFsYW5jZTogbmV3IFVpbnROMjU2KGRlcG9zaXQpLAogICAgLy8gICBhc3NldElkOiBhc3NldElkLAogICAgLy8gICBpc0FyYzIwMFRva2VuOiBuZXcgQm9vbCh0cnVlKSwKICAgIC8vICAgaXNOYXRpdmVUb2tlbjogbmV3IEJvb2woZmFsc2UpLAogICAgLy8gICBpc0FTQVRva2VuOiBuZXcgQm9vbChmYWxzZSksCiAgICAvLyAKICAgIC8vICAgY3JlYXRlZEF0VGltZTogbmV3IFVpbnRONjQoR2xvYmFsLmxhdGVzdFRpbWVzdGFtcCksCiAgICAvLyAgIGNyZWF0ZWRBdFJvdW5kOiBuZXcgVWludE42NChHbG9iYWwucm91bmQpLAogICAgLy8gCiAgICAvLyAgIGxhc3RQbGF5ZWRUaW1lOiBuZXcgVWludE42NCgwKSwKICAgIC8vICAgbGFzdFdpblRpbWU6IG5ldyBVaW50TjY0KDApLAogICAgLy8gICBsYXN0V2luQW1vdW50OiBuZXcgVWludE4yNTYoMCksCiAgICAvLyAgIGJpZ2dlc3RXaW5BbW91bnQ6IG5ldyBVaW50TjI1NigwKSwKICAgIC8vICAgYmlnZ2VzdFdpblRpbWU6IG5ldyBVaW50TjY0KDApLAogICAgLy8gCiAgICAvLyAgIHdpblJhdGlvOiB3aW5SYXRpbywKICAgIC8vICAgb3duZXI6IHNlbmRlciwKICAgIC8vIH0pCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NTQyCiAgICAvLyBsYXN0V2luVGltZTogbmV3IFVpbnRONjQoMCksCiAgICBieXRlY18yIC8vIDB4MDAwMDAwMDAwMDAwMDAwMAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo1MzEtNTQ5CiAgICAvLyBjb25zdCBuZXdWYWx1ZSA9IG5ldyBHYW1lU3RydWN0KHsKICAgIC8vICAgYmFsYW5jZTogbmV3IFVpbnROMjU2KGRlcG9zaXQpLAogICAgLy8gICBhc3NldElkOiBhc3NldElkLAogICAgLy8gICBpc0FyYzIwMFRva2VuOiBuZXcgQm9vbCh0cnVlKSwKICAgIC8vICAgaXNOYXRpdmVUb2tlbjogbmV3IEJvb2woZmFsc2UpLAogICAgLy8gICBpc0FTQVRva2VuOiBuZXcgQm9vbChmYWxzZSksCiAgICAvLyAKICAgIC8vICAgY3JlYXRlZEF0VGltZTogbmV3IFVpbnRONjQoR2xvYmFsLmxhdGVzdFRpbWVzdGFtcCksCiAgICAvLyAgIGNyZWF0ZWRBdFJvdW5kOiBuZXcgVWludE42NChHbG9iYWwucm91bmQpLAogICAgLy8gCiAgICAvLyAgIGxhc3RQbGF5ZWRUaW1lOiBuZXcgVWludE42NCgwKSwKICAgIC8vICAgbGFzdFdpblRpbWU6IG5ldyBVaW50TjY0KDApLAogICAgLy8gICBsYXN0V2luQW1vdW50OiBuZXcgVWludE4yNTYoMCksCiAgICAvLyAgIGJpZ2dlc3RXaW5BbW91bnQ6IG5ldyBVaW50TjI1NigwKSwKICAgIC8vICAgYmlnZ2VzdFdpblRpbWU6IG5ldyBVaW50TjY0KDApLAogICAgLy8gCiAgICAvLyAgIHdpblJhdGlvOiB3aW5SYXRpbywKICAgIC8vICAgb3duZXI6IHNlbmRlciwKICAgIC8vIH0pCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NTQzCiAgICAvLyBsYXN0V2luQW1vdW50OiBuZXcgVWludE4yNTYoMCksCiAgICBieXRlY18xIC8vIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo1MzEtNTQ5CiAgICAvLyBjb25zdCBuZXdWYWx1ZSA9IG5ldyBHYW1lU3RydWN0KHsKICAgIC8vICAgYmFsYW5jZTogbmV3IFVpbnROMjU2KGRlcG9zaXQpLAogICAgLy8gICBhc3NldElkOiBhc3NldElkLAogICAgLy8gICBpc0FyYzIwMFRva2VuOiBuZXcgQm9vbCh0cnVlKSwKICAgIC8vICAgaXNOYXRpdmVUb2tlbjogbmV3IEJvb2woZmFsc2UpLAogICAgLy8gICBpc0FTQVRva2VuOiBuZXcgQm9vbChmYWxzZSksCiAgICAvLyAKICAgIC8vICAgY3JlYXRlZEF0VGltZTogbmV3IFVpbnRONjQoR2xvYmFsLmxhdGVzdFRpbWVzdGFtcCksCiAgICAvLyAgIGNyZWF0ZWRBdFJvdW5kOiBuZXcgVWludE42NChHbG9iYWwucm91bmQpLAogICAgLy8gCiAgICAvLyAgIGxhc3RQbGF5ZWRUaW1lOiBuZXcgVWludE42NCgwKSwKICAgIC8vICAgbGFzdFdpblRpbWU6IG5ldyBVaW50TjY0KDApLAogICAgLy8gICBsYXN0V2luQW1vdW50OiBuZXcgVWludE4yNTYoMCksCiAgICAvLyAgIGJpZ2dlc3RXaW5BbW91bnQ6IG5ldyBVaW50TjI1NigwKSwKICAgIC8vICAgYmlnZ2VzdFdpblRpbWU6IG5ldyBVaW50TjY0KDApLAogICAgLy8gCiAgICAvLyAgIHdpblJhdGlvOiB3aW5SYXRpbywKICAgIC8vICAgb3duZXI6IHNlbmRlciwKICAgIC8vIH0pCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NTQ1CiAgICAvLyBiaWdnZXN0V2luVGltZTogbmV3IFVpbnRONjQoMCksCiAgICBieXRlY18yIC8vIDB4MDAwMDAwMDAwMDAwMDAwMAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo1MzEtNTQ5CiAgICAvLyBjb25zdCBuZXdWYWx1ZSA9IG5ldyBHYW1lU3RydWN0KHsKICAgIC8vICAgYmFsYW5jZTogbmV3IFVpbnROMjU2KGRlcG9zaXQpLAogICAgLy8gICBhc3NldElkOiBhc3NldElkLAogICAgLy8gICBpc0FyYzIwMFRva2VuOiBuZXcgQm9vbCh0cnVlKSwKICAgIC8vICAgaXNOYXRpdmVUb2tlbjogbmV3IEJvb2woZmFsc2UpLAogICAgLy8gICBpc0FTQVRva2VuOiBuZXcgQm9vbChmYWxzZSksCiAgICAvLyAKICAgIC8vICAgY3JlYXRlZEF0VGltZTogbmV3IFVpbnRONjQoR2xvYmFsLmxhdGVzdFRpbWVzdGFtcCksCiAgICAvLyAgIGNyZWF0ZWRBdFJvdW5kOiBuZXcgVWludE42NChHbG9iYWwucm91bmQpLAogICAgLy8gCiAgICAvLyAgIGxhc3RQbGF5ZWRUaW1lOiBuZXcgVWludE42NCgwKSwKICAgIC8vICAgbGFzdFdpblRpbWU6IG5ldyBVaW50TjY0KDApLAogICAgLy8gICBsYXN0V2luQW1vdW50OiBuZXcgVWludE4yNTYoMCksCiAgICAvLyAgIGJpZ2dlc3RXaW5BbW91bnQ6IG5ldyBVaW50TjI1NigwKSwKICAgIC8vICAgYmlnZ2VzdFdpblRpbWU6IG5ldyBVaW50TjY0KDApLAogICAgLy8gCiAgICAvLyAgIHdpblJhdGlvOiB3aW5SYXRpbywKICAgIC8vICAgb3duZXI6IHNlbmRlciwKICAgIC8vIH0pCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NTQ0CiAgICAvLyBiaWdnZXN0V2luQW1vdW50OiBuZXcgVWludE4yNTYoMCksCiAgICBieXRlY18xIC8vIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo1MzEtNTQ5CiAgICAvLyBjb25zdCBuZXdWYWx1ZSA9IG5ldyBHYW1lU3RydWN0KHsKICAgIC8vICAgYmFsYW5jZTogbmV3IFVpbnROMjU2KGRlcG9zaXQpLAogICAgLy8gICBhc3NldElkOiBhc3NldElkLAogICAgLy8gICBpc0FyYzIwMFRva2VuOiBuZXcgQm9vbCh0cnVlKSwKICAgIC8vICAgaXNOYXRpdmVUb2tlbjogbmV3IEJvb2woZmFsc2UpLAogICAgLy8gICBpc0FTQVRva2VuOiBuZXcgQm9vbChmYWxzZSksCiAgICAvLyAKICAgIC8vICAgY3JlYXRlZEF0VGltZTogbmV3IFVpbnRONjQoR2xvYmFsLmxhdGVzdFRpbWVzdGFtcCksCiAgICAvLyAgIGNyZWF0ZWRBdFJvdW5kOiBuZXcgVWludE42NChHbG9iYWwucm91bmQpLAogICAgLy8gCiAgICAvLyAgIGxhc3RQbGF5ZWRUaW1lOiBuZXcgVWludE42NCgwKSwKICAgIC8vICAgbGFzdFdpblRpbWU6IG5ldyBVaW50TjY0KDApLAogICAgLy8gICBsYXN0V2luQW1vdW50OiBuZXcgVWludE4yNTYoMCksCiAgICAvLyAgIGJpZ2dlc3RXaW5BbW91bnQ6IG5ldyBVaW50TjI1NigwKSwKICAgIC8vICAgYmlnZ2VzdFdpblRpbWU6IG5ldyBVaW50TjY0KDApLAogICAgLy8gCiAgICAvLyAgIHdpblJhdGlvOiB3aW5SYXRpbywKICAgIC8vICAgb3duZXI6IHNlbmRlciwKICAgIC8vIH0pCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgMgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjU1MAogICAgLy8gdGhpcy5nYW1lcyhrZXkpLnZhbHVlID0gbmV3VmFsdWUuY29weSgpCiAgICBmcmFtZV9kaWcgMQogICAgc3dhcAogICAgYm94X3B1dAogICAgYiBDcmVhdGVHYW1lV2l0aEFyYzIwMFRva2VuX2FmdGVyX2lmX2Vsc2VANgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6OkF2bVNhdG9zaGlEaWNlLlN0YXJ0R2FtZVdpdGhOYXRpdmVUb2tlbih0eG5EZXBvc2l0OiB1aW50NjQsIGdhbWU6IGJ5dGVzLCB3aW5Qcm9iYWJpbGl0eTogYnl0ZXMpIC0+IGJ5dGVzOgpTdGFydEdhbWVXaXRoTmF0aXZlVG9rZW46CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjU2My01NjgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBwdWJsaWMgU3RhcnRHYW1lV2l0aE5hdGl2ZVRva2VuKAogICAgLy8gICB0eG5EZXBvc2l0OiBndHhuLlBheW1lbnRUeG4sCiAgICAvLyAgIGdhbWU6IEFkZHJlc3NBc3NldFN0cnVjdCwKICAgIC8vICAgd2luUHJvYmFiaWxpdHk6IFVpbnRONjQsCiAgICAvLyApOiBQbGF5U3RydWN0IHsKICAgIHByb3RvIDMgMQogICAgaW50Y18wIC8vIDAKICAgIHB1c2hieXRlcyAiIgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo1NjkKICAgIC8vIGNvbnN0IHNlbmRlciA9IG5ldyBhcmM0LkFkZHJlc3ModHhuRGVwb3NpdC5zZW5kZXIpCiAgICBmcmFtZV9kaWcgLTMKICAgIGd0eG5zIFNlbmRlcgogICAgZHVwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjU3MQogICAgLy8gYXNzZXJ0KFR4bi5zZW5kZXIgPT09IHR4bkRlcG9zaXQuc2VuZGVyLCAnU2VuZGVyIG9mIHRoZSBhcHAgY2FsbCBtdXN0IGJlIHRoZSBzYW1lIGFzIHNlbmRlciBvZiB0aGUgZGVwb3NpdCcpCiAgICB0eG4gU2VuZGVyCiAgICBkaWcgMQogICAgPT0KICAgIGFzc2VydCAvLyBTZW5kZXIgb2YgdGhlIGFwcCBjYWxsIG11c3QgYmUgdGhlIHNhbWUgYXMgc2VuZGVyIG9mIHRoZSBkZXBvc2l0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjU3MgogICAgLy8gYXNzZXJ0KGdhbWUuYXNzZXRJZCA9PT0gYXNzZXRJZCwgJ0Fzc2V0IGlkIGluIHRoZSB0eCBkb2VzIG5vdCBtYXRjaCB0aGUgZ2FtZSBhc3NldCBpZCcpCiAgICBmcmFtZV9kaWcgLTIKICAgIGV4dHJhY3QgMCA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZHVwCiAgICBjb3ZlciAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjU3MAogICAgLy8gY29uc3QgYXNzZXRJZCA9IG5ldyBVaW50TjY0KDApCiAgICBieXRlY18yIC8vIDB4MDAwMDAwMDAwMDAwMDAwMAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo1NzIKICAgIC8vIGFzc2VydChnYW1lLmFzc2V0SWQgPT09IGFzc2V0SWQsICdBc3NldCBpZCBpbiB0aGUgdHggZG9lcyBub3QgbWF0Y2ggdGhlIGdhbWUgYXNzZXQgaWQnKQogICAgPT0KICAgIGFzc2VydCAvLyBBc3NldCBpZCBpbiB0aGUgdHggZG9lcyBub3QgbWF0Y2ggdGhlIGdhbWUgYXNzZXQgaWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MTQ5CiAgICAvLyBwdWJsaWMgZ2FtZXMgPSBCb3hNYXA8QWRkcmVzc0Fzc2V0U3RydWN0LCBHYW1lU3RydWN0Pih7IGtleVByZWZpeDogJ2cnIH0pCiAgICBieXRlYyA1IC8vICJnIgogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIGR1cAogICAgY292ZXIgMgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo1NzMKICAgIC8vIGFzc2VydCh0aGlzLmdhbWVzKGdhbWUpLmV4aXN0cywgJ1RoZSBnYW1lIGRvZXMgbm90IGV4aXN0JykKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gVGhlIGdhbWUgZG9lcyBub3QgZXhpc3QKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NTc0CiAgICAvLyBhc3NlcnQodGhpcy5nYW1lcyhnYW1lKS52YWx1ZS5hc3NldElkID09PSBhc3NldElkLCAnVGhpcyBnYW1lIG11c3QgYmUgcGxheWVkIHdpdGggbmF0aXZlIHRva2VuJykKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBleHRyYWN0IDMyIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjU3MAogICAgLy8gY29uc3QgYXNzZXRJZCA9IG5ldyBVaW50TjY0KDApCiAgICBieXRlY18yIC8vIDB4MDAwMDAwMDAwMDAwMDAwMAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo1NzQKICAgIC8vIGFzc2VydCh0aGlzLmdhbWVzKGdhbWUpLnZhbHVlLmFzc2V0SWQgPT09IGFzc2V0SWQsICdUaGlzIGdhbWUgbXVzdCBiZSBwbGF5ZWQgd2l0aCBuYXRpdmUgdG9rZW4nKQogICAgPT0KICAgIGFzc2VydCAvLyBUaGlzIGdhbWUgbXVzdCBiZSBwbGF5ZWQgd2l0aCBuYXRpdmUgdG9rZW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NTc1CiAgICAvLyBhc3NlcnQod2luUHJvYmFiaWxpdHkubmF0aXZlIDw9IDFfMDAwXzAwMCwgJ1dpbiBwcm9iYWJpbGl0eSBtdXN0IGJlIGJlbG93IDEgMDAwIDAwMCcpCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIGR1cAogICAgY292ZXIgMgogICAgaW50YyA0IC8vIDEwMDAwMDAKICAgIDw9CiAgICBhc3NlcnQgLy8gV2luIHByb2JhYmlsaXR5IG11c3QgYmUgYmVsb3cgMSAwMDAgMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjE1MAogICAgLy8gcHVibGljIHBsYXlzID0gQm94TWFwPEFkZHJlc3MsIFBsYXlTdHJ1Y3Q+KHsga2V5UHJlZml4OiAncCcgfSkKICAgIGJ5dGVjIDcgLy8gInAiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo1NzcKICAgIC8vIGlmICh0aGlzLnBsYXlzKHNlbmRlcikuZXhpc3RzKSB7CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGJ6IFN0YXJ0R2FtZVdpdGhOYXRpdmVUb2tlbl9hZnRlcl9pZl9lbHNlQDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NTc5CiAgICAvLyBhc3NlcnQodGhpcy5wbGF5cyhzZW5kZXIpLnZhbHVlLnN0YXRlLm5hdGl2ZSA+IDEsICdZb3VyIHByZXZpb3VzIGdhbWUgaGFzIG5vdCB5ZXQgYmVlbiBjbGFpbWVkJykKICAgIGZyYW1lX2RpZyA2CiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzIgLy8gMQogICAgPgogICAgYXNzZXJ0IC8vIFlvdXIgcHJldmlvdXMgZ2FtZSBoYXMgbm90IHlldCBiZWVuIGNsYWltZWQKClN0YXJ0R2FtZVdpdGhOYXRpdmVUb2tlbl9hZnRlcl9pZl9lbHNlQDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjU4NAogICAgLy8gdGhpcy5nYW1lcyhnYW1lKS52YWx1ZS5sYXN0UGxheWVkVGltZSA9IG5ldyBVaW50TjY0KEdsb2JhbC5sYXRlc3RUaW1lc3RhbXApCiAgICBnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCiAgICBpdG9iCiAgICBmcmFtZV9kaWcgNAogICAgZHVwCiAgICBjb3ZlciAyCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgc3dhcAogICAgcmVwbGFjZTIgNTcKICAgIGRpZyAxCiAgICBzd2FwCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjU4OQogICAgLy8gY29uc3Qgd2luQW1vdW50OiBiaWd1aW50ID0gQmlnVWludCgodHhuRGVwb3NpdC5hbW91bnQgKiAxXzAwMF8wMDApIC8gd2luUHJvYmFiaWxpdHkubmF0aXZlKQogICAgZnJhbWVfZGlnIC0zCiAgICBndHhucyBBbW91bnQKICAgIGR1cAogICAgZnJhbWVfYnVyeSAxCiAgICBpbnRjIDQgLy8gMTAwMDAwMAogICAgKgogICAgZnJhbWVfZGlnIDUKICAgIC8KICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NTkwCiAgICAvLyBjb25zdCBtYXhQb3RXaW5BbW91bnQ6IGJpZ3VpbnQgPSB0aGlzLmdhbWVzKGdhbWUpLnZhbHVlLmJhbGFuY2UubmF0aXZlIC8gQmlnVWludCgyKQogICAgc3dhcAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIGV4dHJhY3QgMCAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ5dGVjIDEzIC8vIDB4MDIKICAgIGIvCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjU5MgogICAgLy8gbWF4UG90V2luQW1vdW50ID49IHdpbkFtb3VudCwKICAgIGI8PQogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo1OTEtNTk0CiAgICAvLyBhc3NlcnQoCiAgICAvLyAgIG1heFBvdFdpbkFtb3VudCA+PSB3aW5BbW91bnQsCiAgICAvLyAgICdUaGUgZ2FtZSBkb2VzIG5vdCBoYXZlIGVub3VnaCBiYWxhbmNlIGZvciB5b3VyIHdpbiBzY2VuYXJpby4gWW91IGNhbiB3aW4gbWF4IDUwJSBvZiB0aGUgZ2FtZSBiYWxhbmNlJywKICAgIC8vICkKICAgIGFzc2VydCAvLyBUaGUgZ2FtZSBkb2VzIG5vdCBoYXZlIGVub3VnaCBiYWxhbmNlIGZvciB5b3VyIHdpbiBzY2VuYXJpby4gWW91IGNhbiB3aW4gbWF4IDUwJSBvZiB0aGUgZ2FtZSBiYWxhbmNlCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjU5NgogICAgLy8gbGV0IHByZXZEZXBvc2l0OiBVaW50TjI1NiA9IG5ldyBVaW50TjI1NigwKQogICAgYnl0ZWNfMSAvLyAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoxNTEKICAgIC8vIHB1YmxpYyBhbGxEZXBvc2l0cyA9IEJveE1hcDxVaW50TjY0LCBVaW50TjI1Nj4oeyBrZXlQcmVmaXg6ICdkJyB9KQogICAgYnl0ZWMgNiAvLyAweDY0MDAwMDAwMDAwMDAwMDAwMAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo1OTcKICAgIC8vIGlmICh0aGlzLmFsbERlcG9zaXRzKGFzc2V0SWQpLmV4aXN0cykgewogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBieiBTdGFydEdhbWVXaXRoTmF0aXZlVG9rZW5fYWZ0ZXJfaWZfZWxzZUA1CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjE1MQogICAgLy8gcHVibGljIGFsbERlcG9zaXRzID0gQm94TWFwPFVpbnRONjQsIFVpbnROMjU2Pih7IGtleVByZWZpeDogJ2QnIH0pCiAgICBieXRlYyA2IC8vIDB4NjQwMDAwMDAwMDAwMDAwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjU5OAogICAgLy8gcHJldkRlcG9zaXQgPSB0aGlzLmFsbERlcG9zaXRzKGFzc2V0SWQpLnZhbHVlCiAgICBib3hfZ2V0CiAgICBzd2FwCiAgICBmcmFtZV9idXJ5IDAKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCgpTdGFydEdhbWVXaXRoTmF0aXZlVG9rZW5fYWZ0ZXJfaWZfZWxzZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo2MDAKICAgIC8vIHRoaXMuYWxsRGVwb3NpdHMoYXNzZXRJZCkudmFsdWUgPSBuZXcgVWludE4yNTYocHJldkRlcG9zaXQubmF0aXZlICsgQmlnVWludCh0eG5EZXBvc2l0LmFtb3VudCkpCiAgICBmcmFtZV9kaWcgMQogICAgaXRvYgogICAgZnJhbWVfZGlnIDAKICAgIGRpZyAxCiAgICBiKwogICAgZHVwCiAgICBsZW4KICAgIGludGNfMSAvLyAzMgogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgaW50Y18xIC8vIDMyCiAgICBiemVybwogICAgc3dhcAogICAgZGlnIDEKICAgIGJ8CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjE1MQogICAgLy8gcHVibGljIGFsbERlcG9zaXRzID0gQm94TWFwPFVpbnRONjQsIFVpbnROMjU2Pih7IGtleVByZWZpeDogJ2QnIH0pCiAgICBieXRlYyA2IC8vIDB4NjQwMDAwMDAwMDAwMDAwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjYwMAogICAgLy8gdGhpcy5hbGxEZXBvc2l0cyhhc3NldElkKS52YWx1ZSA9IG5ldyBVaW50TjI1NihwcmV2RGVwb3NpdC5uYXRpdmUgKyBCaWdVaW50KHR4bkRlcG9zaXQuYW1vdW50KSkKICAgIHN3YXAKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NjAzCiAgICAvLyByb3VuZDogbmV3IFVpbnRONjQoR2xvYmFsLnJvdW5kKSwKICAgIGdsb2JhbCBSb3VuZAogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo2MDYKICAgIC8vIGRlcG9zaXQ6IG5ldyBVaW50TjI1NihCaWdVaW50KHR4bkRlcG9zaXQuYW1vdW50KSksCiAgICBkaWcgMgogICAgbGVuCiAgICBpbnRjXzEgLy8gMzIKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGNvdmVyIDIKICAgIGJ8CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjYwOAogICAgLy8gZ2FtZUNyZWF0b3I6IGdhbWUub3duZXIsCiAgICBmcmFtZV9kaWcgLTIKICAgIGV4dHJhY3QgOCAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NjA0CiAgICAvLyBzdGF0ZTogbmV3IFVpbnRONjQoMSksCiAgICBieXRlYyAxNCAvLyAweDAwMDAwMDAwMDAwMDAwMDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NjAyLTYxMAogICAgLy8gY29uc3QgbmV3VmFsdWUgPSBuZXcgUGxheVN0cnVjdCh7CiAgICAvLyAgIHJvdW5kOiBuZXcgVWludE42NChHbG9iYWwucm91bmQpLAogICAgLy8gICBzdGF0ZTogbmV3IFVpbnRONjQoMSksCiAgICAvLyAgIHdpblByb2JhYmlsaXR5OiB3aW5Qcm9iYWJpbGl0eSwKICAgIC8vICAgZGVwb3NpdDogbmV3IFVpbnROMjU2KEJpZ1VpbnQodHhuRGVwb3NpdC5hbW91bnQpKSwKICAgIC8vICAgb3duZXI6IHNlbmRlciwKICAgIC8vICAgZ2FtZUNyZWF0b3I6IGdhbWUub3duZXIsCiAgICAvLyAgIGFzc2V0SWQ6IGdhbWUuYXNzZXRJZCwKICAgIC8vIH0pCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgdW5jb3ZlciAzCiAgICBjb25jYXQKICAgIHVuY292ZXIgMgogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgMwogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAyCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NjEyCiAgICAvLyB0aGlzLnBsYXlzKHNlbmRlcikudmFsdWUgPSBuZXdWYWx1ZS5jb3B5KCkKICAgIGZyYW1lX2RpZyA2CiAgICBkaWcgMQogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo2MTMKICAgIC8vIHJldHVybiBuZXdWYWx1ZQogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjpBdm1TYXRvc2hpRGljZS5TdGFydEdhbWVXaXRoQVNBVG9rZW4odHhuRGVwb3NpdDogdWludDY0LCBnYW1lOiBieXRlcywgd2luUHJvYmFiaWxpdHk6IGJ5dGVzKSAtPiBieXRlczoKU3RhcnRHYW1lV2l0aEFTQVRva2VuOgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo2MjUtNjMwCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gcHVibGljIFN0YXJ0R2FtZVdpdGhBU0FUb2tlbigKICAgIC8vICAgdHhuRGVwb3NpdDogZ3R4bi5Bc3NldFRyYW5zZmVyVHhuLAogICAgLy8gICBnYW1lOiBBZGRyZXNzQXNzZXRTdHJ1Y3QsCiAgICAvLyAgIHdpblByb2JhYmlsaXR5OiBVaW50TjY0LAogICAgLy8gKTogUGxheVN0cnVjdCB7CiAgICBwcm90byAzIDEKICAgIGludGNfMCAvLyAwCiAgICBkdXAKICAgIHB1c2hieXRlcyAiIgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo2MzEKICAgIC8vIGNvbnN0IHNlbmRlciA9IG5ldyBhcmM0LkFkZHJlc3ModHhuRGVwb3NpdC5zZW5kZXIpCiAgICBmcmFtZV9kaWcgLTMKICAgIGd0eG5zIFNlbmRlcgogICAgZHVwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjYzMgogICAgLy8gY29uc3QgYXNzZXRJZCA9IG5ldyBVaW50TjY0KHR4bkRlcG9zaXQueGZlckFzc2V0LmlkKQogICAgZnJhbWVfZGlnIC0zCiAgICBndHhucyBYZmVyQXNzZXQKICAgIGl0b2IKICAgIGR1cAogICAgdW5jb3ZlciAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjYzMwogICAgLy8gYXNzZXJ0KFR4bi5zZW5kZXIgPT09IHR4bkRlcG9zaXQuc2VuZGVyLCAnU2VuZGVyIG9mIHRoZSBhcHAgY2FsbCBtdXN0IGJlIHRoZSBzYW1lIGFzIHNlbmRlciBvZiB0aGUgZGVwb3NpdCcpCiAgICB0eG4gU2VuZGVyCiAgICBkaWcgMQogICAgPT0KICAgIGFzc2VydCAvLyBTZW5kZXIgb2YgdGhlIGFwcCBjYWxsIG11c3QgYmUgdGhlIHNhbWUgYXMgc2VuZGVyIG9mIHRoZSBkZXBvc2l0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjYzNAogICAgLy8gYXNzZXJ0KGdhbWUuYXNzZXRJZC5uYXRpdmUgPT09IGFzc2V0SWQubmF0aXZlLCAnQXNzZXQgaWQgaW4gdGhlIHR4IGRvZXMgbm90IG1hdGNoIHRoZSBnYW1lIGFzc2V0IGlkJykKICAgIGZyYW1lX2RpZyAtMgogICAgZXh0cmFjdCAwIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBjb3ZlciAyCiAgICBmcmFtZV9kaWcgLTIKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgZGlnIDIKICAgIGJ0b2kKICAgID09CiAgICBhc3NlcnQgLy8gQXNzZXQgaWQgaW4gdGhlIHR4IGRvZXMgbm90IG1hdGNoIHRoZSBnYW1lIGFzc2V0IGlkCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjE0OQogICAgLy8gcHVibGljIGdhbWVzID0gQm94TWFwPEFkZHJlc3NBc3NldFN0cnVjdCwgR2FtZVN0cnVjdD4oeyBrZXlQcmVmaXg6ICdnJyB9KQogICAgYnl0ZWMgNSAvLyAiZyIKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICBkdXAKICAgIGNvdmVyIDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NjM1CiAgICAvLyBhc3NlcnQodGhpcy5nYW1lcyhnYW1lKS5leGlzdHMsICdUaGUgZ2FtZSBkb2VzIG5vdCBleGlzdCcpCiAgICBkdXAKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIFRoZSBnYW1lIGRvZXMgbm90IGV4aXN0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjYzNgogICAgLy8gYXNzZXJ0KHRoaXMuZ2FtZXMoZ2FtZSkudmFsdWUuYXNzZXRJZCA9PT0gYXNzZXRJZCwgJ1RoaXMgZ2FtZSBtdXN0IGJlIHBsYXllZCB3aXRoIG5hdGl2ZSB0b2tlbicpCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgZXh0cmFjdCAzMiA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgdW5jb3ZlciAyCiAgICA9PQogICAgYXNzZXJ0IC8vIFRoaXMgZ2FtZSBtdXN0IGJlIHBsYXllZCB3aXRoIG5hdGl2ZSB0b2tlbgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo2MzcKICAgIC8vIGFzc2VydCh3aW5Qcm9iYWJpbGl0eS5uYXRpdmUgPD0gMV8wMDBfMDAwLCAnV2luIHByb2JhYmlsaXR5IG11c3QgYmUgYmVsb3cgMSAwMDAgMDAwJykKICAgIGZyYW1lX2RpZyAtMQogICAgYnRvaQogICAgZHVwCiAgICBjb3ZlciAyCiAgICBpbnRjIDQgLy8gMTAwMDAwMAogICAgPD0KICAgIGFzc2VydCAvLyBXaW4gcHJvYmFiaWxpdHkgbXVzdCBiZSBiZWxvdyAxIDAwMCAwMDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MTUwCiAgICAvLyBwdWJsaWMgcGxheXMgPSBCb3hNYXA8QWRkcmVzcywgUGxheVN0cnVjdD4oeyBrZXlQcmVmaXg6ICdwJyB9KQogICAgYnl0ZWMgNyAvLyAicCIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZHVwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjYzOQogICAgLy8gaWYgKHRoaXMucGxheXMoc2VuZGVyKS5leGlzdHMpIHsKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYnogU3RhcnRHYW1lV2l0aEFTQVRva2VuX2FmdGVyX2lmX2Vsc2VAMwogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo2NDEKICAgIC8vIGFzc2VydCh0aGlzLnBsYXlzKHNlbmRlcikudmFsdWUuc3RhdGUubmF0aXZlID4gMSwgJ1lvdXIgcHJldmlvdXMgZ2FtZSBoYXMgbm90IHlldCBiZWVuIGNsYWltZWQnKQogICAgZnJhbWVfZGlnIDgKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMiAvLyAxCiAgICA+CiAgICBhc3NlcnQgLy8gWW91ciBwcmV2aW91cyBnYW1lIGhhcyBub3QgeWV0IGJlZW4gY2xhaW1lZAoKU3RhcnRHYW1lV2l0aEFTQVRva2VuX2FmdGVyX2lmX2Vsc2VAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NjQ2CiAgICAvLyB0aGlzLmdhbWVzKGdhbWUpLnZhbHVlLmxhc3RQbGF5ZWRUaW1lID0gbmV3IFVpbnRONjQoR2xvYmFsLmxhdGVzdFRpbWVzdGFtcCkKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIGl0b2IKICAgIGZyYW1lX2RpZyA2CiAgICBkdXAKICAgIGNvdmVyIDIKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBzd2FwCiAgICByZXBsYWNlMiA1NwogICAgZGlnIDEKICAgIHN3YXAKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NjUxCiAgICAvLyBjb25zdCB3aW5BbW91bnQ6IGJpZ3VpbnQgPSBCaWdVaW50KCh0eG5EZXBvc2l0LmFzc2V0QW1vdW50ICogMV8wMDBfMDAwKSAvIHdpblByb2JhYmlsaXR5Lm5hdGl2ZSkKICAgIGZyYW1lX2RpZyAtMwogICAgZ3R4bnMgQXNzZXRBbW91bnQKICAgIGR1cAogICAgZnJhbWVfYnVyeSAyCiAgICBpbnRjIDQgLy8gMTAwMDAwMAogICAgKgogICAgZnJhbWVfZGlnIDcKICAgIC8KICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NjUyCiAgICAvLyBjb25zdCBtYXhQb3RXaW5BbW91bnQ6IGJpZ3VpbnQgPSB0aGlzLmdhbWVzKGdhbWUpLnZhbHVlLmJhbGFuY2UubmF0aXZlIC8gQmlnVWludCgyKQogICAgc3dhcAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIGV4dHJhY3QgMCAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ5dGVjIDEzIC8vIDB4MDIKICAgIGIvCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjY1NAogICAgLy8gbWF4UG90V2luQW1vdW50ID49IHdpbkFtb3VudCwKICAgIGI8PQogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo2NTMtNjU2CiAgICAvLyBhc3NlcnQoCiAgICAvLyAgIG1heFBvdFdpbkFtb3VudCA+PSB3aW5BbW91bnQsCiAgICAvLyAgICdUaGUgZ2FtZSBkb2VzIG5vdCBoYXZlIGVub3VnaCBiYWxhbmNlIGZvciB5b3VyIHdpbiBzY2VuYXJpby4gWW91IGNhbiB3aW4gbWF4IDUwJSBvZiB0aGUgZ2FtZSBiYWxhbmNlJywKICAgIC8vICkKICAgIGFzc2VydCAvLyBUaGUgZ2FtZSBkb2VzIG5vdCBoYXZlIGVub3VnaCBiYWxhbmNlIGZvciB5b3VyIHdpbiBzY2VuYXJpby4gWW91IGNhbiB3aW4gbWF4IDUwJSBvZiB0aGUgZ2FtZSBiYWxhbmNlCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjY1OAogICAgLy8gbGV0IHByZXZEZXBvc2l0OiBVaW50TjI1NiA9IG5ldyBVaW50TjI1NigwKQogICAgYnl0ZWNfMSAvLyAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoxNTEKICAgIC8vIHB1YmxpYyBhbGxEZXBvc2l0cyA9IEJveE1hcDxVaW50TjY0LCBVaW50TjI1Nj4oeyBrZXlQcmVmaXg6ICdkJyB9KQogICAgYnl0ZWMgNCAvLyAiZCIKICAgIGZyYW1lX2RpZyA0CiAgICBjb25jYXQKICAgIGR1cAogICAgZnJhbWVfYnVyeSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjY1OQogICAgLy8gaWYgKHRoaXMuYWxsRGVwb3NpdHMoYXNzZXRJZCkuZXhpc3RzKSB7CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGJ6IFN0YXJ0R2FtZVdpdGhBU0FUb2tlbl9hZnRlcl9pZl9lbHNlQDUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NjYwCiAgICAvLyBwcmV2RGVwb3NpdCA9IHRoaXMuYWxsRGVwb3NpdHMoYXNzZXRJZCkudmFsdWUKICAgIGZyYW1lX2RpZyAxCiAgICBib3hfZ2V0CiAgICBzd2FwCiAgICBmcmFtZV9idXJ5IDAKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCgpTdGFydEdhbWVXaXRoQVNBVG9rZW5fYWZ0ZXJfaWZfZWxzZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo2NjIKICAgIC8vIHRoaXMuYWxsRGVwb3NpdHMoYXNzZXRJZCkudmFsdWUgPSBuZXcgVWludE4yNTYocHJldkRlcG9zaXQubmF0aXZlICsgQmlnVWludCh0eG5EZXBvc2l0LmFzc2V0QW1vdW50KSkKICAgIGZyYW1lX2RpZyAyCiAgICBpdG9iCiAgICBmcmFtZV9kaWcgMAogICAgZGlnIDEKICAgIGIrCiAgICBkdXAKICAgIGxlbgogICAgaW50Y18xIC8vIDMyCiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBpbnRjXzEgLy8gMzIKICAgIGJ6ZXJvCiAgICBzd2FwCiAgICBkaWcgMQogICAgYnwKICAgIGZyYW1lX2RpZyAxCiAgICBzd2FwCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjY2NQogICAgLy8gcm91bmQ6IG5ldyBVaW50TjY0KEdsb2JhbC5yb3VuZCksCiAgICBnbG9iYWwgUm91bmQKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NjY4CiAgICAvLyBkZXBvc2l0OiBuZXcgVWludE4yNTYoQmlnVWludCh0eG5EZXBvc2l0LmFzc2V0QW1vdW50KSksCiAgICBkaWcgMgogICAgbGVuCiAgICBpbnRjXzEgLy8gMzIKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGNvdmVyIDIKICAgIGJ8CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjY3MAogICAgLy8gZ2FtZUNyZWF0b3I6IGdhbWUub3duZXIsCiAgICBmcmFtZV9kaWcgLTIKICAgIGV4dHJhY3QgOCAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NjY2CiAgICAvLyBzdGF0ZTogbmV3IFVpbnRONjQoMSksCiAgICBieXRlYyAxNCAvLyAweDAwMDAwMDAwMDAwMDAwMDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NjY0LTY3MgogICAgLy8gY29uc3QgbmV3VmFsdWUgPSBuZXcgUGxheVN0cnVjdCh7CiAgICAvLyAgIHJvdW5kOiBuZXcgVWludE42NChHbG9iYWwucm91bmQpLAogICAgLy8gICBzdGF0ZTogbmV3IFVpbnRONjQoMSksCiAgICAvLyAgIHdpblByb2JhYmlsaXR5OiB3aW5Qcm9iYWJpbGl0eSwKICAgIC8vICAgZGVwb3NpdDogbmV3IFVpbnROMjU2KEJpZ1VpbnQodHhuRGVwb3NpdC5hc3NldEFtb3VudCkpLAogICAgLy8gICBvd25lcjogc2VuZGVyLAogICAgLy8gICBnYW1lQ3JlYXRvcjogZ2FtZS5vd25lciwKICAgIC8vICAgYXNzZXRJZDogZ2FtZS5hc3NldElkLAogICAgLy8gfSkKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICB1bmNvdmVyIDMKICAgIGNvbmNhdAogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyA1CiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIDMKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo2NzQKICAgIC8vIHRoaXMucGxheXMoc2VuZGVyKS52YWx1ZSA9IG5ld1ZhbHVlLmNvcHkoKQogICAgZnJhbWVfZGlnIDgKICAgIGRpZyAxCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjY3NQogICAgLy8gcmV0dXJuIG5ld1ZhbHVlCiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6OkF2bVNhdG9zaGlEaWNlLlN0YXJ0R2FtZVdpdGhBcmMyMDBUb2tlbihhbW91bnQ6IGJ5dGVzLCBhc3NldElkOiBieXRlcywgZ2FtZTogYnl0ZXMsIHdpblByb2JhYmlsaXR5OiBieXRlcykgLT4gYnl0ZXM6ClN0YXJ0R2FtZVdpdGhBcmMyMDBUb2tlbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6Njg3LTY5MwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIHB1YmxpYyBTdGFydEdhbWVXaXRoQXJjMjAwVG9rZW4oCiAgICAvLyAgIGFtb3VudDogVWludE4yNTYsCiAgICAvLyAgIGFzc2V0SWQ6IFVpbnRONjQsCiAgICAvLyAgIGdhbWU6IEFkZHJlc3NBc3NldFN0cnVjdCwKICAgIC8vICAgd2luUHJvYmFiaWxpdHk6IFVpbnRONjQsCiAgICAvLyApOiBQbGF5U3RydWN0IHsKICAgIHByb3RvIDQgMQogICAgaW50Y18wIC8vIDAKICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo2OTQKICAgIC8vIGNvbnN0IHNlbmRlciA9IG5ldyBhcmM0LkFkZHJlc3MoVHhuLnNlbmRlcikKICAgIHR4biBTZW5kZXIKICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo2OTUKICAgIC8vIGFzc2VydChnYW1lLmFzc2V0SWQgPT09IGFzc2V0SWQsICdBc3NldCBpZCBpbiB0aGUgdHggZG9lcyBub3QgbWF0Y2ggdGhlIGdhbWUgYXNzZXQgaWQnKQogICAgZnJhbWVfZGlnIC0yCiAgICBleHRyYWN0IDAgOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGR1cAogICAgY292ZXIgMgogICAgZnJhbWVfZGlnIC0zCiAgICA9PQogICAgYXNzZXJ0IC8vIEFzc2V0IGlkIGluIHRoZSB0eCBkb2VzIG5vdCBtYXRjaCB0aGUgZ2FtZSBhc3NldCBpZAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoxNDkKICAgIC8vIHB1YmxpYyBnYW1lcyA9IEJveE1hcDxBZGRyZXNzQXNzZXRTdHJ1Y3QsIEdhbWVTdHJ1Y3Q+KHsga2V5UHJlZml4OiAnZycgfSkKICAgIGJ5dGVjIDUgLy8gImciCiAgICBmcmFtZV9kaWcgLTIKICAgIGNvbmNhdAogICAgZHVwCiAgICBjb3ZlciAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjY5NgogICAgLy8gYXNzZXJ0KHRoaXMuZ2FtZXMoZ2FtZSkuZXhpc3RzLCAnVGhlIGdhbWUgZG9lcyBub3QgZXhpc3QnKQogICAgZHVwCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGFzc2VydCAvLyBUaGUgZ2FtZSBkb2VzIG5vdCBleGlzdAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo2OTcKICAgIC8vIGFzc2VydCh0aGlzLmdhbWVzKGdhbWUpLnZhbHVlLmFzc2V0SWQgPT09IGFzc2V0SWQsICdUaGlzIGdhbWUgbXVzdCBiZSBwbGF5ZWQgd2l0aCBuYXRpdmUgdG9rZW4nKQogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIGV4dHJhY3QgMzIgOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGZyYW1lX2RpZyAtMwogICAgPT0KICAgIGFzc2VydCAvLyBUaGlzIGdhbWUgbXVzdCBiZSBwbGF5ZWQgd2l0aCBuYXRpdmUgdG9rZW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6Njk4CiAgICAvLyBhc3NlcnQod2luUHJvYmFiaWxpdHkubmF0aXZlIDw9IDFfMDAwXzAwMCwgJ1dpbiBwcm9iYWJpbGl0eSBtdXN0IGJlIGJlbG93IDEgMDAwIDAwMCcpCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIGR1cAogICAgY292ZXIgMgogICAgaW50YyA0IC8vIDEwMDAwMDAKICAgIDw9CiAgICBhc3NlcnQgLy8gV2luIHByb2JhYmlsaXR5IG11c3QgYmUgYmVsb3cgMSAwMDAgMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjE1MAogICAgLy8gcHVibGljIHBsYXlzID0gQm94TWFwPEFkZHJlc3MsIFBsYXlTdHJ1Y3Q+KHsga2V5UHJlZml4OiAncCcgfSkKICAgIGJ5dGVjIDcgLy8gInAiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo3MDAKICAgIC8vIGlmICh0aGlzLnBsYXlzKHNlbmRlcikuZXhpc3RzKSB7CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGJ6IFN0YXJ0R2FtZVdpdGhBcmMyMDBUb2tlbl9hZnRlcl9pZl9lbHNlQDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NzAyCiAgICAvLyBhc3NlcnQodGhpcy5wbGF5cyhzZW5kZXIpLnZhbHVlLnN0YXRlLm5hdGl2ZSA+IDEsICdZb3VyIHByZXZpb3VzIGdhbWUgaGFzIG5vdCB5ZXQgYmVlbiBjbGFpbWVkJykKICAgIGZyYW1lX2RpZyA2CiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzIgLy8gMQogICAgPgogICAgYXNzZXJ0IC8vIFlvdXIgcHJldmlvdXMgZ2FtZSBoYXMgbm90IHlldCBiZWVuIGNsYWltZWQKClN0YXJ0R2FtZVdpdGhBcmMyMDBUb2tlbl9hZnRlcl9pZl9lbHNlQDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjcwOAogICAgLy8gdGhpcy5nYW1lcyhnYW1lKS52YWx1ZS5sYXN0UGxheWVkVGltZSA9IG5ldyBVaW50TjY0KEdsb2JhbC5sYXRlc3RUaW1lc3RhbXApCiAgICBnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCiAgICBpdG9iCiAgICBmcmFtZV9kaWcgNAogICAgZHVwCiAgICBjb3ZlciAyCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgc3dhcAogICAgcmVwbGFjZTIgNTcKICAgIGRpZyAxCiAgICBzd2FwCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjcxMy03MjMKICAgIC8vIGl0eG4KICAgIC8vICAgLmFwcGxpY2F0aW9uQ2FsbCh7CiAgICAvLyAgICAgYXBwSWQ6IGdhbWUuYXNzZXRJZC5uYXRpdmUsCiAgICAvLyAgICAgYXBwQXJnczogWwogICAgLy8gICAgICAgbWV0aG9kU2VsZWN0b3IoJ2FyYzIwMF90cmFuc2ZlckZyb20oYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpYm9vbCcpLAogICAgLy8gICAgICAgbmV3IEFkZHJlc3MoVHhuLnNlbmRlciksCiAgICAvLyAgICAgICBuZXcgQWRkcmVzcyhHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcyksCiAgICAvLyAgICAgICBhbW91bnQsCiAgICAvLyAgICAgXSwKICAgIC8vICAgfSkKICAgIC8vICAgLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjcxNQogICAgLy8gYXBwSWQ6IGdhbWUuYXNzZXRJZC5uYXRpdmUsCiAgICBmcmFtZV9kaWcgLTIKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo3MTgKICAgIC8vIG5ldyBBZGRyZXNzKFR4bi5zZW5kZXIpLAogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo3MTkKICAgIC8vIG5ldyBBZGRyZXNzKEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzKSwKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjcxNwogICAgLy8gbWV0aG9kU2VsZWN0b3IoJ2FyYzIwMF90cmFuc2ZlckZyb20oYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpYm9vbCcpLAogICAgYnl0ZWMgMTYgLy8gbWV0aG9kICJhcmMyMDBfdHJhbnNmZXJGcm9tKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KWJvb2wiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgc3dhcAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBmcmFtZV9kaWcgLTQKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NzEzLTcyMgogICAgLy8gaXR4bgogICAgLy8gICAuYXBwbGljYXRpb25DYWxsKHsKICAgIC8vICAgICBhcHBJZDogZ2FtZS5hc3NldElkLm5hdGl2ZSwKICAgIC8vICAgICBhcHBBcmdzOiBbCiAgICAvLyAgICAgICBtZXRob2RTZWxlY3RvcignYXJjMjAwX3RyYW5zZmVyRnJvbShhZGRyZXNzLGFkZHJlc3MsdWludDI1Nilib29sJyksCiAgICAvLyAgICAgICBuZXcgQWRkcmVzcyhUeG4uc2VuZGVyKSwKICAgIC8vICAgICAgIG5ldyBBZGRyZXNzKEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzKSwKICAgIC8vICAgICAgIGFtb3VudCwKICAgIC8vICAgICBdLAogICAgLy8gICB9KQogICAgcHVzaGludCA2IC8vIDYKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo3MTMtNzIzCiAgICAvLyBpdHhuCiAgICAvLyAgIC5hcHBsaWNhdGlvbkNhbGwoewogICAgLy8gICAgIGFwcElkOiBnYW1lLmFzc2V0SWQubmF0aXZlLAogICAgLy8gICAgIGFwcEFyZ3M6IFsKICAgIC8vICAgICAgIG1ldGhvZFNlbGVjdG9yKCdhcmMyMDBfdHJhbnNmZXJGcm9tKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KWJvb2wnKSwKICAgIC8vICAgICAgIG5ldyBBZGRyZXNzKFR4bi5zZW5kZXIpLAogICAgLy8gICAgICAgbmV3IEFkZHJlc3MoR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MpLAogICAgLy8gICAgICAgYW1vdW50LAogICAgLy8gICAgIF0sCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NzI1CiAgICAvLyBjb25zdCB3aW5BbW91bnQ6IGJpZ3VpbnQgPSAoYW1vdW50Lm5hdGl2ZSAqIEJpZ1VpbnQoMV8wMDBfMDAwKSkgLyBCaWdVaW50KHdpblByb2JhYmlsaXR5Lm5hdGl2ZSkKICAgIGZyYW1lX2RpZyAtNAogICAgYnl0ZWMgOSAvLyAweDBmNDI0MAogICAgYioKICAgIGZyYW1lX2RpZyA1CiAgICBpdG9iCiAgICBiLwogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo3MjYKICAgIC8vIGNvbnN0IG1heFBvdFdpbkFtb3VudDogYmlndWludCA9IHRoaXMuZ2FtZXMoZ2FtZSkudmFsdWUuYmFsYW5jZS5uYXRpdmUgLyBCaWdVaW50KDIpCiAgICBzd2FwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgZXh0cmFjdCAwIDMyIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnl0ZWMgMTMgLy8gMHgwMgogICAgYi8KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NzI4CiAgICAvLyBtYXhQb3RXaW5BbW91bnQgPj0gd2luQW1vdW50LAogICAgYjw9CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjcyNy03MzAKICAgIC8vIGFzc2VydCgKICAgIC8vICAgbWF4UG90V2luQW1vdW50ID49IHdpbkFtb3VudCwKICAgIC8vICAgJ1RoZSBnYW1lIGRvZXMgbm90IGhhdmUgZW5vdWdoIGJhbGFuY2UgZm9yIHlvdXIgd2luIHNjZW5hcmlvLiBZb3UgY2FuIHdpbiBtYXggNTAlIG9mIHRoZSBnYW1lIGJhbGFuY2UnLAogICAgLy8gKQogICAgYXNzZXJ0IC8vIFRoZSBnYW1lIGRvZXMgbm90IGhhdmUgZW5vdWdoIGJhbGFuY2UgZm9yIHlvdXIgd2luIHNjZW5hcmlvLiBZb3UgY2FuIHdpbiBtYXggNTAlIG9mIHRoZSBnYW1lIGJhbGFuY2UKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NzMyCiAgICAvLyBsZXQgcHJldkRlcG9zaXQ6IFVpbnROMjU2ID0gbmV3IFVpbnROMjU2KDApCiAgICBieXRlY18xIC8vIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAogICAgZnJhbWVfYnVyeSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjE1MQogICAgLy8gcHVibGljIGFsbERlcG9zaXRzID0gQm94TWFwPFVpbnRONjQsIFVpbnROMjU2Pih7IGtleVByZWZpeDogJ2QnIH0pCiAgICBieXRlYyA0IC8vICJkIgogICAgZnJhbWVfZGlnIC0zCiAgICBjb25jYXQKICAgIGR1cAogICAgZnJhbWVfYnVyeSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjczMwogICAgLy8gaWYgKHRoaXMuYWxsRGVwb3NpdHMoYXNzZXRJZCkuZXhpc3RzKSB7CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGJ6IFN0YXJ0R2FtZVdpdGhBcmMyMDBUb2tlbl9hZnRlcl9pZl9lbHNlQDYKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NzM0CiAgICAvLyBwcmV2RGVwb3NpdCA9IHRoaXMuYWxsRGVwb3NpdHMoYXNzZXRJZCkudmFsdWUKICAgIGZyYW1lX2RpZyAxCiAgICBib3hfZ2V0CiAgICBzd2FwCiAgICBmcmFtZV9idXJ5IDAKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCgpTdGFydEdhbWVXaXRoQXJjMjAwVG9rZW5fYWZ0ZXJfaWZfZWxzZUA2OgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo3MzYKICAgIC8vIHRoaXMuYWxsRGVwb3NpdHMoYXNzZXRJZCkudmFsdWUgPSBuZXcgVWludE4yNTYocHJldkRlcG9zaXQubmF0aXZlICsgYW1vdW50Lm5hdGl2ZSkKICAgIGZyYW1lX2RpZyAwCiAgICBmcmFtZV9kaWcgLTQKICAgIGIrCiAgICBkdXAKICAgIGxlbgogICAgaW50Y18xIC8vIDMyCiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBpbnRjXzEgLy8gMzIKICAgIGJ6ZXJvCiAgICBzd2FwCiAgICBkaWcgMQogICAgYnwKICAgIGZyYW1lX2RpZyAxCiAgICBzd2FwCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjczOQogICAgLy8gcm91bmQ6IG5ldyBVaW50TjY0KEdsb2JhbC5yb3VuZCksCiAgICBnbG9iYWwgUm91bmQKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NzQyCiAgICAvLyBkZXBvc2l0OiBuZXcgVWludE4yNTYoYW1vdW50Lm5hdGl2ZSksCiAgICBmcmFtZV9kaWcgLTQKICAgIHVuY292ZXIgMgogICAgYnwKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NzQ0CiAgICAvLyBnYW1lQ3JlYXRvcjogZ2FtZS5vd25lciwKICAgIGZyYW1lX2RpZyAtMgogICAgZXh0cmFjdCA4IDMyIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo3NDAKICAgIC8vIHN0YXRlOiBuZXcgVWludE42NCgxKSwKICAgIGJ5dGVjIDE0IC8vIDB4MDAwMDAwMDAwMDAwMDAwMQogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo3MzgtNzQ2CiAgICAvLyBjb25zdCBuZXdWYWx1ZSA9IG5ldyBQbGF5U3RydWN0KHsKICAgIC8vICAgcm91bmQ6IG5ldyBVaW50TjY0KEdsb2JhbC5yb3VuZCksCiAgICAvLyAgIHN0YXRlOiBuZXcgVWludE42NCgxKSwKICAgIC8vICAgd2luUHJvYmFiaWxpdHk6IHdpblByb2JhYmlsaXR5LAogICAgLy8gICBkZXBvc2l0OiBuZXcgVWludE4yNTYoYW1vdW50Lm5hdGl2ZSksCiAgICAvLyAgIG93bmVyOiBzZW5kZXIsCiAgICAvLyAgIGdhbWVDcmVhdG9yOiBnYW1lLm93bmVyLAogICAgLy8gICBhc3NldElkOiBnYW1lLmFzc2V0SWQsCiAgICAvLyB9KQogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIHVuY292ZXIgMwogICAgY29uY2F0CiAgICB1bmNvdmVyIDIKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIDMKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgMgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjc0OAogICAgLy8gdGhpcy5wbGF5cyhzZW5kZXIpLnZhbHVlID0gbmV3VmFsdWUuY29weSgpCiAgICBmcmFtZV9kaWcgNgogICAgZGlnIDEKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NzQ5CiAgICAvLyByZXR1cm4gbmV3VmFsdWUKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo6QXZtU2F0b3NoaURpY2UuR2FtZShjcmVhdG9yOiBieXRlcywgYXNzZXRJZDogYnl0ZXMpIC0+IGJ5dGVzOgpHYW1lOgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo3NTctNzU4CiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgLy8gcHVibGljIEdhbWUoY3JlYXRvcjogQWRkcmVzcywgYXNzZXRJZDogVWludE42NCk6IEdhbWVTdHJ1Y3QgewogICAgcHJvdG8gMiAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjc1OS03NjIKICAgIC8vIGNvbnN0IGtleSA9IG5ldyBBZGRyZXNzQXNzZXRTdHJ1Y3QoewogICAgLy8gICBhc3NldElkOiBhc3NldElkLAogICAgLy8gICBvd25lcjogY3JlYXRvciwKICAgIC8vIH0pCiAgICBmcmFtZV9kaWcgLTEKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjE0OQogICAgLy8gcHVibGljIGdhbWVzID0gQm94TWFwPEFkZHJlc3NBc3NldFN0cnVjdCwgR2FtZVN0cnVjdD4oeyBrZXlQcmVmaXg6ICdnJyB9KQogICAgYnl0ZWMgNSAvLyAiZyIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo3NjMKICAgIC8vIGFzc2VydCh0aGlzLmdhbWVzKGtleSkuZXhpc3RzLCAnRGlkIG5vdCBmb3VuZCB0aGUgZ2FtZScpCiAgICBkdXAKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIERpZCBub3QgZm91bmQgdGhlIGdhbWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NzY0CiAgICAvLyByZXR1cm4gdGhpcy5nYW1lcyhrZXkpLnZhbHVlCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo6QXZtU2F0b3NoaURpY2UuTXlHYW1lKCkgLT4gYnl0ZXM6Ck15R2FtZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MTUwCiAgICAvLyBwdWJsaWMgcGxheXMgPSBCb3hNYXA8QWRkcmVzcywgUGxheVN0cnVjdD4oeyBrZXlQcmVmaXg6ICdwJyB9KQogICAgYnl0ZWMgNyAvLyAicCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NzczCiAgICAvLyBjb25zdCBzZW5kZXIgPSBuZXcgYXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjE1MAogICAgLy8gcHVibGljIHBsYXlzID0gQm94TWFwPEFkZHJlc3MsIFBsYXlTdHJ1Y3Q+KHsga2V5UHJlZml4OiAncCcgfSkKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo3NzQKICAgIC8vIGFzc2VydCh0aGlzLnBsYXlzKHNlbmRlcikuZXhpc3RzLCAnRGlkIG5vdCBmb3VuZCB0aGUgZ2FtZSB5b3UgYXJlIHBsYXlpbmcnKQogICAgZHVwCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGFzc2VydCAvLyBEaWQgbm90IGZvdW5kIHRoZSBnYW1lIHlvdSBhcmUgcGxheWluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo3NzUKICAgIC8vIHJldHVybiB0aGlzLnBsYXlzKHNlbmRlcikudmFsdWUKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjpBdm1TYXRvc2hpRGljZS5DbGFpbUdhbWUoKSAtPiBieXRlczoKQ2xhaW1HYW1lOgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo3ODUtNzg2CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gcHVibGljIENsYWltR2FtZSgpOiBQbGF5U3RydWN0IHsKICAgIHByb3RvIDAgMQogICAgaW50Y18wIC8vIDAKICAgIGR1cG4gOAogICAgcHVzaGJ5dGVzICIiCiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6Nzg3CiAgICAvLyBjb25zdCBzZW5kZXIgPSBuZXcgYXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjE1MAogICAgLy8gcHVibGljIHBsYXlzID0gQm94TWFwPEFkZHJlc3MsIFBsYXlTdHJ1Y3Q+KHsga2V5UHJlZml4OiAncCcgfSkKICAgIGJ5dGVjIDcgLy8gInAiCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjc4NwogICAgLy8gY29uc3Qgc2VuZGVyID0gbmV3IGFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKQogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoxNTAKICAgIC8vIHB1YmxpYyBwbGF5cyA9IEJveE1hcDxBZGRyZXNzLCBQbGF5U3RydWN0Pih7IGtleVByZWZpeDogJ3AnIH0pCiAgICBjb25jYXQKICAgIGR1cG4gMgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo3ODgKICAgIC8vIGFzc2VydCh0aGlzLnBsYXlzKHNlbmRlcikuZXhpc3RzLCAnRGlkIG5vdCBmb3VuZCB0aGUgZ2FtZSB5b3UgYXJlIHBsYXlpbmcnKQogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gRGlkIG5vdCBmb3VuZCB0aGUgZ2FtZSB5b3UgYXJlIHBsYXlpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6Nzg5CiAgICAvLyBjb25zdCBwbGF5ID0gdGhpcy5wbGF5cyhzZW5kZXIpLnZhbHVlLmNvcHkoKQogICAgYm94X2dldAogICAgc3dhcAogICAgZHVwCiAgICB1bmNvdmVyIDIKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjc5MgogICAgLy8gYXNzZXRJZDogcGxheS5hc3NldElkLAogICAgZHVwCiAgICBleHRyYWN0IDU2IDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjc5MwogICAgLy8gb3duZXI6IHBsYXkuZ2FtZUNyZWF0b3IsCiAgICBkaWcgMQogICAgZXh0cmFjdCA2NCAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6NzkxLTc5NAogICAgLy8gY29uc3Qga2V5ID0gbmV3IEFkZHJlc3NBc3NldFN0cnVjdCh7CiAgICAvLyAgIGFzc2V0SWQ6IHBsYXkuYXNzZXRJZCwKICAgIC8vICAgb3duZXI6IHBsYXkuZ2FtZUNyZWF0b3IsCiAgICAvLyB9KQogICAgY29uY2F0CiAgICBkdXAKICAgIGNvdmVyIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MTQ5CiAgICAvLyBwdWJsaWMgZ2FtZXMgPSBCb3hNYXA8QWRkcmVzc0Fzc2V0U3RydWN0LCBHYW1lU3RydWN0Pih7IGtleVByZWZpeDogJ2cnIH0pCiAgICBieXRlYyA1IC8vICJnIgogICAgc3dhcAogICAgY29uY2F0CiAgICBkdXAKICAgIGNvdmVyIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6Nzk1CiAgICAvLyBhc3NlcnQodGhpcy5nYW1lcyhrZXkpLmV4aXN0cywgJ0RpZCBub3QgZm91bmQgdGhlIGdhbWUnKQogICAgZHVwCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGFzc2VydCAvLyBEaWQgbm90IGZvdW5kIHRoZSBnYW1lCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjc5NgogICAgLy8gY29uc3QgZ2FtZSA9IHRoaXMuZ2FtZXMoa2V5KS52YWx1ZS5jb3B5KCkKICAgIGJveF9nZXQKICAgIHN3YXAKICAgIGNvdmVyIDIKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjgwMAogICAgLy8gaWYgKHBsYXkucm91bmQubmF0aXZlIDwgR2xvYmFsLnJvdW5kIC0gMTAwKSB7CiAgICBwdXNoaW50IDE2IC8vIDE2CiAgICBleHRyYWN0X3VpbnQ2NAogICAgZHVwCiAgICBnbG9iYWwgUm91bmQKICAgIHB1c2hpbnQgMTAwIC8vIDEwMAogICAgLQogICAgPAogICAgYnogQ2xhaW1HYW1lX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo4MDEKICAgIC8vIHRoaXMuTG9vc2VHYW1lKGtleSwgZ2FtZSwgcGxheSwgc2VuZGVyKQogICAgZnJhbWVfZGlnIDE0CiAgICBmcmFtZV9kaWcgMTYKICAgIGZyYW1lX2RpZyAxMwogICAgZnJhbWVfZGlnIDExCiAgICBjYWxsc3ViIExvb3NlR2FtZQogICAgcG9wbiAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjgwMgogICAgLy8gcmV0dXJuIHRoaXMucGxheXMoc2VuZGVyKS52YWx1ZQogICAgZnJhbWVfZGlnIDEyCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCkNsYWltR2FtZV9hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjgwOAogICAgLy8gY29uc3Qgc2VlZCA9IEJpZ1VpbnQob3AuQmxvY2suYmxrU2VlZChwbGF5LnJvdW5kLm5hdGl2ZSArIDIpKQogICAgZnJhbWVfZGlnIDE3CiAgICBwdXNoaW50IDIgLy8gMgogICAgKwogICAgYmxvY2sgQmxrU2VlZAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo4MTAKICAgIC8vIGNvbnN0IHJhbmQwXzE6IGJpZ3VpbnQgPSBzZWVkICUgQmlnVWludCgxXzAwMF8wMDApCiAgICBieXRlYyA5IC8vIDB4MGY0MjQwCiAgICBiJQogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo4MTMKICAgIC8vIGNvbnN0IHdpblRocmVzaG9sZDogdWludDY0ID0gKHBsYXkud2luUHJvYmFiaWxpdHkubmF0aXZlICogZ2FtZS53aW5SYXRpby5uYXRpdmUpIC8gMV8wMDBfMDAwCiAgICBmcmFtZV9kaWcgMTMKICAgIGludGNfMyAvLyA4CiAgICBleHRyYWN0X3VpbnQ2NAogICAgZHVwCiAgICBmcmFtZV9idXJ5IDkKICAgIGZyYW1lX2RpZyAxNgogICAgcHVzaGludCAxNDUgLy8gMTQ1CiAgICBleHRyYWN0X3VpbnQ2NAogICAgKgogICAgaW50YyA0IC8vIDEwMDAwMDAKICAgIC8KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6ODE0CiAgICAvLyBpZiAocmFuZDBfMSA8IEJpZ1VpbnQod2luVGhyZXNob2xkKSkgewogICAgaXRvYgogICAgYjwKICAgIGJ6IENsYWltR2FtZV9lbHNlX2JvZHlAMjEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6ODE4CiAgICAvLyAocGxheS5kZXBvc2l0Lm5hdGl2ZSAqIEJpZ1VpbnQoMV8wMDBfMDAwKSkgLyBCaWdVaW50KHBsYXkud2luUHJvYmFiaWxpdHkubmF0aXZlKSwKICAgIGZyYW1lX2RpZyAxMwogICAgZXh0cmFjdCAyNCAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ5dGVjIDkgLy8gMHgwZjQyNDAKICAgIGIqCiAgICBmcmFtZV9kaWcgOQogICAgaXRvYgogICAgYi8KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6ODE3LTgxOQogICAgLy8gY29uc3Qgd2luQW1vdW50OiBiaWd1aW50ID0gQmlnVWludCgKICAgIC8vICAgKHBsYXkuZGVwb3NpdC5uYXRpdmUgKiBCaWdVaW50KDFfMDAwXzAwMCkpIC8gQmlnVWludChwbGF5LndpblByb2JhYmlsaXR5Lm5hdGl2ZSksCiAgICAvLyApCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgOAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo4MjEKICAgIC8vIHRoaXMuZ2FtZXMoa2V5KS52YWx1ZS5sYXN0V2luQW1vdW50ID0gbmV3IFVpbnROMjU2KHdpbkFtb3VudCkKICAgIGR1cAogICAgbGVuCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMTAKICAgIGludGNfMSAvLyAzMgogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgaW50Y18xIC8vIDMyCiAgICBiemVybwogICAgZHVwCiAgICBmcmFtZV9idXJ5IDEKICAgIGRpZyAxCiAgICBifAogICAgZHVwCiAgICBmcmFtZV9idXJ5IDAKICAgIGZyYW1lX2RpZyAxNQogICAgZHVwCiAgICBjb3ZlciAyCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgc3dhcAogICAgcmVwbGFjZTIgNzMKICAgIGRpZyAxCiAgICBzd2FwCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjgyMgogICAgLy8gdGhpcy5nYW1lcyhrZXkpLnZhbHVlLmxhc3RXaW5UaW1lID0gbmV3IFVpbnRONjQoR2xvYmFsLmxhdGVzdFRpbWVzdGFtcCkKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIGl0b2IKICAgIGRpZyAxCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgc3dhcAogICAgcmVwbGFjZTIgNjUKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6ODIzCiAgICAvLyBpZiAod2luQW1vdW50ID4gZ2FtZS5iaWdnZXN0V2luQW1vdW50Lm5hdGl2ZSkgewogICAgZnJhbWVfZGlnIDE2CiAgICBleHRyYWN0IDExMyAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGI+CiAgICBieiBDbGFpbUdhbWVfYWZ0ZXJfaWZfZWxzZUA1CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjgyNAogICAgLy8gdGhpcy5nYW1lcyhrZXkpLnZhbHVlLmJpZ2dlc3RXaW5BbW91bnQgPSBuZXcgVWludE4yNTYod2luQW1vdW50KQogICAgZnJhbWVfZGlnIDE1CiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBmcmFtZV9kaWcgMAogICAgcmVwbGFjZTIgMTEzCiAgICBkaWcgMQogICAgc3dhcAogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo4MjUKICAgIC8vIHRoaXMuZ2FtZXMoa2V5KS52YWx1ZS5iaWdnZXN0V2luVGltZSA9IG5ldyBVaW50TjY0KEdsb2JhbC5sYXRlc3RUaW1lc3RhbXApCiAgICBnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCiAgICBpdG9iCiAgICBkaWcgMQogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIHN3YXAKICAgIHJlcGxhY2UyIDEwNQogICAgYm94X3B1dAoKQ2xhaW1HYW1lX2FmdGVyX2lmX2Vsc2VANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6ODI4CiAgICAvLyBpZiAoZ2FtZS5pc05hdGl2ZVRva2VuLm5hdGl2ZSkgewogICAgZnJhbWVfZGlnIDE2CiAgICBpbnRjIDcgLy8gMzIwCiAgICBnZXRiaXQKICAgIGJ5dGVjXzAgLy8gMHgwMAogICAgaW50Y18wIC8vIDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBpbnRjXzAgLy8gMAogICAgZ2V0Yml0CiAgICBieiBDbGFpbUdhbWVfYWZ0ZXJfaWZfZWxzZUAxMAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo4MzEKICAgIC8vIGxldCBwcmV2RGVwb3NpdDogVWludE4yNTYgPSBuZXcgVWludE4yNTYoMCkKICAgIGJ5dGVjXzEgLy8gMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCiAgICBmcmFtZV9idXJ5IDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6ODMyCiAgICAvLyBpZiAodGhpcy5hbGxEZXBvc2l0cyhrZXkuYXNzZXRJZCkuZXhpc3RzKSB7CiAgICBmcmFtZV9kaWcgMTQKICAgIGV4dHJhY3QgMCA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoxNTEKICAgIC8vIHB1YmxpYyBhbGxEZXBvc2l0cyA9IEJveE1hcDxVaW50TjY0LCBVaW50TjI1Nj4oeyBrZXlQcmVmaXg6ICdkJyB9KQogICAgYnl0ZWMgNCAvLyAiZCIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZHVwCiAgICBmcmFtZV9idXJ5IDUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6ODMyCiAgICAvLyBpZiAodGhpcy5hbGxEZXBvc2l0cyhrZXkuYXNzZXRJZCkuZXhpc3RzKSB7CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGJ6IENsYWltR2FtZV9hZnRlcl9pZl9lbHNlQDgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6ODMzCiAgICAvLyBwcmV2RGVwb3NpdCA9IHRoaXMuYWxsRGVwb3NpdHMoa2V5LmFzc2V0SWQpLnZhbHVlCiAgICBmcmFtZV9kaWcgNQogICAgYm94X2dldAogICAgc3dhcAogICAgZnJhbWVfYnVyeSAyCiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQoKQ2xhaW1HYW1lX2FmdGVyX2lmX2Vsc2VAODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6ODM1CiAgICAvLyBhc3NlcnQocHJldkRlcG9zaXQubmF0aXZlID49IHdpbkFtb3VudCwgJ1RoZXJlIGlzIG5vdCBlbm91Z2ggbW9uZXkgaW4gdGhlIHNjIHRvIGNvdmVyIHRoaXMgd2luIHR4JykKICAgIGZyYW1lX2RpZyAyCiAgICBkdXAKICAgIGZyYW1lX2RpZyA4CiAgICBkdXAKICAgIGNvdmVyIDMKICAgIGI+PQogICAgYXNzZXJ0IC8vIFRoZXJlIGlzIG5vdCBlbm91Z2ggbW9uZXkgaW4gdGhlIHNjIHRvIGNvdmVyIHRoaXMgd2luIHR4CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjgzNgogICAgLy8gdGhpcy5hbGxEZXBvc2l0cyhrZXkuYXNzZXRJZCkudmFsdWUgPSBuZXcgVWludE4yNTYocHJldkRlcG9zaXQubmF0aXZlIC0gd2luQW1vdW50KQogICAgZGlnIDEKICAgIGItCiAgICBkdXAKICAgIGxlbgogICAgaW50Y18xIC8vIDMyCiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBmcmFtZV9kaWcgMQogICAgZHVwCiAgICBjb3ZlciAzCiAgICBifAogICAgZnJhbWVfZGlnIDUKICAgIHN3YXAKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6ODM4CiAgICAvLyBhc3NlcnQoZ2FtZS5iYWxhbmNlLm5hdGl2ZSA+PSB3aW5BbW91bnQsICdUaGVyZSBpcyBub3QgZW5vdWdoIG1vbmV5IGluIHRoZSBzYyB0byBjb3ZlciB0aGlzIHdpbiB0eCcpCiAgICBmcmFtZV9kaWcgMTYKICAgIGV4dHJhY3QgMCAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGR1cAogICAgZGlnIDIKICAgIGI+PQogICAgYXNzZXJ0IC8vIFRoZXJlIGlzIG5vdCBlbm91Z2ggbW9uZXkgaW4gdGhlIHNjIHRvIGNvdmVyIHRoaXMgd2luIHR4CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjgzOQogICAgLy8gdGhpcy5nYW1lcyhrZXkpLnZhbHVlLmJhbGFuY2UgPSBuZXcgVWludE4yNTYoZ2FtZS5iYWxhbmNlLm5hdGl2ZSAtIHdpbkFtb3VudCkKICAgIGRpZyAxCiAgICBiLQogICAgZHVwCiAgICBsZW4KICAgIGludGNfMSAvLyAzMgogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgdW5jb3ZlciAyCiAgICBifAogICAgZnJhbWVfZGlnIDE1CiAgICBkdXAKICAgIGNvdmVyIDIKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBzd2FwCiAgICByZXBsYWNlMiAwCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjg0MQogICAgLy8gdGhpcy5wbGF5cyhzZW5kZXIpLnZhbHVlLnN0YXRlID0gbmV3IFVpbnRONjQoMikgLy8gbWFyayB0aGUgc3RhdGUgb2YgdGhlIGdhbWUgMiAtIHdpbgogICAgZnJhbWVfZGlnIDEyCiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBieXRlYyAxNSAvLyAweDAwMDAwMDAwMDAwMDAwMDIKICAgIHJlcGxhY2UyIDAKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6ODQzLTg1MAogICAgLy8gaXR4bgogICAgLy8gICAucGF5bWVudCh7CiAgICAvLyAgICAgc2VuZGVyOiBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcywKICAgIC8vICAgICByZWNlaXZlcjogcGxheS5vd25lci5uYXRpdmUsCiAgICAvLyAgICAgYW1vdW50OiBuZXcgVWludE42NCh3aW5BbW91bnQpLm5hdGl2ZSwKICAgIC8vICAgICBmZWU6IDAsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo4NDUKICAgIC8vIHNlbmRlcjogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MsCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo4NDYKICAgIC8vIHJlY2VpdmVyOiBwbGF5Lm93bmVyLm5hdGl2ZSwKICAgIGZyYW1lX2RpZyAxMwogICAgZXh0cmFjdCA5NiAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6ODQ3CiAgICAvLyBhbW91bnQ6IG5ldyBVaW50TjY0KHdpbkFtb3VudCkubmF0aXZlLAogICAgZnJhbWVfZGlnIDEwCiAgICBpbnRjXzMgLy8gOAogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgaW50Y18zIC8vIDgKICAgIGJ6ZXJvCiAgICB1bmNvdmVyIDMKICAgIGJ8CiAgICBidG9pCiAgICBpdHhuX2ZpZWxkIEFtb3VudAogICAgaXR4bl9maWVsZCBSZWNlaXZlcgogICAgaXR4bl9maWVsZCBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6ODQzLTg0OQogICAgLy8gaXR4bgogICAgLy8gICAucGF5bWVudCh7CiAgICAvLyAgICAgc2VuZGVyOiBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcywKICAgIC8vICAgICByZWNlaXZlcjogcGxheS5vd25lci5uYXRpdmUsCiAgICAvLyAgICAgYW1vdW50OiBuZXcgVWludE42NCh3aW5BbW91bnQpLm5hdGl2ZSwKICAgIC8vICAgICBmZWU6IDAsCiAgICAvLyAgIH0pCiAgICBpbnRjXzIgLy8gMQogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo4NDgKICAgIC8vIGZlZTogMCwKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo4NDMtODUwCiAgICAvLyBpdHhuCiAgICAvLyAgIC5wYXltZW50KHsKICAgIC8vICAgICBzZW5kZXI6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLAogICAgLy8gICAgIHJlY2VpdmVyOiBwbGF5Lm93bmVyLm5hdGl2ZSwKICAgIC8vICAgICBhbW91bnQ6IG5ldyBVaW50TjY0KHdpbkFtb3VudCkubmF0aXZlLAogICAgLy8gICAgIGZlZTogMCwKICAgIC8vICAgfSkKICAgIC8vICAgLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAoKQ2xhaW1HYW1lX2FmdGVyX2lmX2Vsc2VAMTA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjg1MwogICAgLy8gaWYgKGdhbWUuaXNBU0FUb2tlbi5uYXRpdmUpIHsKICAgIGZyYW1lX2RpZyAxNgogICAgaW50YyA1IC8vIDMyMQogICAgZ2V0Yml0CiAgICBieXRlY18wIC8vIDB4MDAKICAgIGludGNfMCAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgaW50Y18wIC8vIDAKICAgIGdldGJpdAogICAgYnogQ2xhaW1HYW1lX2FmdGVyX2lmX2Vsc2VAMTUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6ODU2CiAgICAvLyBsZXQgcHJldkRlcG9zaXQ6IFVpbnROMjU2ID0gbmV3IFVpbnROMjU2KDApCiAgICBieXRlY18xIC8vIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAogICAgZnJhbWVfYnVyeSAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjg1NwogICAgLy8gaWYgKHRoaXMuYWxsRGVwb3NpdHMoa2V5LmFzc2V0SWQpLmV4aXN0cykgewogICAgZnJhbWVfZGlnIDE0CiAgICBleHRyYWN0IDAgOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MTUxCiAgICAvLyBwdWJsaWMgYWxsRGVwb3NpdHMgPSBCb3hNYXA8VWludE42NCwgVWludE4yNTY+KHsga2V5UHJlZml4OiAnZCcgfSkKICAgIGJ5dGVjIDQgLy8gImQiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgZnJhbWVfYnVyeSA2CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjg1NwogICAgLy8gaWYgKHRoaXMuYWxsRGVwb3NpdHMoa2V5LmFzc2V0SWQpLmV4aXN0cykgewogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBieiBDbGFpbUdhbWVfYWZ0ZXJfaWZfZWxzZUAxMwogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo4NTgKICAgIC8vIHByZXZEZXBvc2l0ID0gdGhpcy5hbGxEZXBvc2l0cyhrZXkuYXNzZXRJZCkudmFsdWUKICAgIGZyYW1lX2RpZyA2CiAgICBib3hfZ2V0CiAgICBzd2FwCiAgICBmcmFtZV9idXJ5IDMKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCgpDbGFpbUdhbWVfYWZ0ZXJfaWZfZWxzZUAxMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6ODYwCiAgICAvLyBhc3NlcnQocHJldkRlcG9zaXQubmF0aXZlID49IHdpbkFtb3VudCwgJ1RoZXJlIGlzIG5vdCBlbm91Z2ggbW9uZXkgaW4gdGhlIHNjIHRvIGNvdmVyIHRoaXMgd2luIHR4JykKICAgIGZyYW1lX2RpZyAzCiAgICBkdXAKICAgIGZyYW1lX2RpZyA4CiAgICBkdXAKICAgIGNvdmVyIDMKICAgIGI+PQogICAgYXNzZXJ0IC8vIFRoZXJlIGlzIG5vdCBlbm91Z2ggbW9uZXkgaW4gdGhlIHNjIHRvIGNvdmVyIHRoaXMgd2luIHR4CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjg2MQogICAgLy8gdGhpcy5hbGxEZXBvc2l0cyhrZXkuYXNzZXRJZCkudmFsdWUgPSBuZXcgVWludE4yNTYocHJldkRlcG9zaXQubmF0aXZlIC0gd2luQW1vdW50KQogICAgZGlnIDEKICAgIGItCiAgICBkdXAKICAgIGxlbgogICAgaW50Y18xIC8vIDMyCiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBmcmFtZV9kaWcgMQogICAgZHVwCiAgICBjb3ZlciAzCiAgICBifAogICAgZnJhbWVfZGlnIDYKICAgIHN3YXAKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6ODYzCiAgICAvLyBhc3NlcnQoZ2FtZS5iYWxhbmNlLm5hdGl2ZSA+PSB3aW5BbW91bnQsICdUaGVyZSBpcyBub3QgZW5vdWdoIG1vbmV5IGluIHRoZSBzYyB0byBjb3ZlciB0aGlzIHdpbiB0eCcpCiAgICBmcmFtZV9kaWcgMTYKICAgIGR1cAogICAgY292ZXIgMwogICAgZXh0cmFjdCAwIDMyIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZHVwCiAgICBkaWcgMgogICAgYj49CiAgICBhc3NlcnQgLy8gVGhlcmUgaXMgbm90IGVub3VnaCBtb25leSBpbiB0aGUgc2MgdG8gY292ZXIgdGhpcyB3aW4gdHgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6ODY0CiAgICAvLyB0aGlzLmdhbWVzKGtleSkudmFsdWUuYmFsYW5jZSA9IG5ldyBVaW50TjI1NihnYW1lLmJhbGFuY2UubmF0aXZlIC0gd2luQW1vdW50KQogICAgZGlnIDEKICAgIGItCiAgICBkdXAKICAgIGxlbgogICAgaW50Y18xIC8vIDMyCiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICB1bmNvdmVyIDIKICAgIGJ8CiAgICBmcmFtZV9kaWcgMTUKICAgIGR1cAogICAgY292ZXIgMgogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIHN3YXAKICAgIHJlcGxhY2UyIDAKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6ODY2CiAgICAvLyB0aGlzLnBsYXlzKHNlbmRlcikudmFsdWUuc3RhdGUgPSBuZXcgVWludE42NCgyKSAvLyBtYXJrIHRoZSBzdGF0ZSBvZiB0aGUgZ2FtZSAyIC0gd2luCiAgICBmcmFtZV9kaWcgMTIKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIGJ5dGVjIDE1IC8vIDB4MDAwMDAwMDAwMDAwMDAwMgogICAgcmVwbGFjZTIgMAogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo4NjgtODc2CiAgICAvLyBpdHhuCiAgICAvLyAgIC5hc3NldFRyYW5zZmVyKHsKICAgIC8vICAgICBzZW5kZXI6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLAogICAgLy8gICAgIGFzc2V0UmVjZWl2ZXI6IHBsYXkub3duZXIubmF0aXZlLAogICAgLy8gICAgIGFzc2V0QW1vdW50OiBuZXcgVWludE42NCh3aW5BbW91bnQpLm5hdGl2ZSwKICAgIC8vICAgICB4ZmVyQXNzZXQ6IGdhbWUuYXNzZXRJZC5uYXRpdmUsCiAgICAvLyAgICAgZmVlOiAwLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6ODcwCiAgICAvLyBzZW5kZXI6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLAogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6ODcxCiAgICAvLyBhc3NldFJlY2VpdmVyOiBwbGF5Lm93bmVyLm5hdGl2ZSwKICAgIGZyYW1lX2RpZyAxMwogICAgZXh0cmFjdCA5NiAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6ODcyCiAgICAvLyBhc3NldEFtb3VudDogbmV3IFVpbnRONjQod2luQW1vdW50KS5uYXRpdmUsCiAgICBmcmFtZV9kaWcgMTAKICAgIGludGNfMyAvLyA4CiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBpbnRjXzMgLy8gOAogICAgYnplcm8KICAgIHVuY292ZXIgMwogICAgYnwKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6ODczCiAgICAvLyB4ZmVyQXNzZXQ6IGdhbWUuYXNzZXRJZC5uYXRpdmUsCiAgICB1bmNvdmVyIDMKICAgIGludGNfMSAvLyAzMgogICAgZXh0cmFjdF91aW50NjQKICAgIGl0eG5fZmllbGQgWGZlckFzc2V0CiAgICBpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CiAgICBpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKICAgIGl0eG5fZmllbGQgU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjg2OC04NzUKICAgIC8vIGl0eG4KICAgIC8vICAgLmFzc2V0VHJhbnNmZXIoewogICAgLy8gICAgIHNlbmRlcjogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MsCiAgICAvLyAgICAgYXNzZXRSZWNlaXZlcjogcGxheS5vd25lci5uYXRpdmUsCiAgICAvLyAgICAgYXNzZXRBbW91bnQ6IG5ldyBVaW50TjY0KHdpbkFtb3VudCkubmF0aXZlLAogICAgLy8gICAgIHhmZXJBc3NldDogZ2FtZS5hc3NldElkLm5hdGl2ZSwKICAgIC8vICAgICBmZWU6IDAsCiAgICAvLyAgIH0pCiAgICBwdXNoaW50IDQgLy8gNAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo4NzQKICAgIC8vIGZlZTogMCwKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo4NjgtODc2CiAgICAvLyBpdHhuCiAgICAvLyAgIC5hc3NldFRyYW5zZmVyKHsKICAgIC8vICAgICBzZW5kZXI6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLAogICAgLy8gICAgIGFzc2V0UmVjZWl2ZXI6IHBsYXkub3duZXIubmF0aXZlLAogICAgLy8gICAgIGFzc2V0QW1vdW50OiBuZXcgVWludE42NCh3aW5BbW91bnQpLm5hdGl2ZSwKICAgIC8vICAgICB4ZmVyQXNzZXQ6IGdhbWUuYXNzZXRJZC5uYXRpdmUsCiAgICAvLyAgICAgZmVlOiAwLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CgpDbGFpbUdhbWVfYWZ0ZXJfaWZfZWxzZUAxNToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6ODc4CiAgICAvLyBpZiAoZ2FtZS5pc0FyYzIwMFRva2VuLm5hdGl2ZSkgewogICAgZnJhbWVfZGlnIDE2CiAgICBpbnRjIDYgLy8gMzIyCiAgICBnZXRiaXQKICAgIGJ5dGVjXzAgLy8gMHgwMAogICAgaW50Y18wIC8vIDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBpbnRjXzAgLy8gMAogICAgZ2V0Yml0CiAgICBieiBDbGFpbUdhbWVfYWZ0ZXJfaWZfZWxzZUAyMgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo4NzkKICAgIC8vIGxldCBwcmV2RGVwb3NpdDogVWludE4yNTYgPSBuZXcgVWludE4yNTYoMCkKICAgIGJ5dGVjXzEgLy8gMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCiAgICBmcmFtZV9idXJ5IDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6ODgwCiAgICAvLyBpZiAodGhpcy5hbGxEZXBvc2l0cyhrZXkuYXNzZXRJZCkuZXhpc3RzKSB7CiAgICBmcmFtZV9kaWcgMTQKICAgIGV4dHJhY3QgMCA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czoxNTEKICAgIC8vIHB1YmxpYyBhbGxEZXBvc2l0cyA9IEJveE1hcDxVaW50TjY0LCBVaW50TjI1Nj4oeyBrZXlQcmVmaXg6ICdkJyB9KQogICAgYnl0ZWMgNCAvLyAiZCIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZHVwCiAgICBmcmFtZV9idXJ5IDcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6ODgwCiAgICAvLyBpZiAodGhpcy5hbGxEZXBvc2l0cyhrZXkuYXNzZXRJZCkuZXhpc3RzKSB7CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGJ6IENsYWltR2FtZV9hZnRlcl9pZl9lbHNlQDE4CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjg4MQogICAgLy8gcHJldkRlcG9zaXQgPSB0aGlzLmFsbERlcG9zaXRzKGtleS5hc3NldElkKS52YWx1ZQogICAgZnJhbWVfZGlnIDcKICAgIGJveF9nZXQKICAgIHN3YXAKICAgIGZyYW1lX2J1cnkgNAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKCkNsYWltR2FtZV9hZnRlcl9pZl9lbHNlQDE4OgogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo4ODMKICAgIC8vIGFzc2VydChwcmV2RGVwb3NpdC5uYXRpdmUgPj0gd2luQW1vdW50LCAnVGhlcmUgaXMgbm90IGVub3VnaCBtb25leSBpbiB0aGUgc2MgdG8gY292ZXIgdGhpcyB3aW4gdHgnKQogICAgZnJhbWVfZGlnIDQKICAgIGR1cAogICAgZnJhbWVfZGlnIDgKICAgIGR1cAogICAgY292ZXIgMwogICAgYj49CiAgICBhc3NlcnQgLy8gVGhlcmUgaXMgbm90IGVub3VnaCBtb25leSBpbiB0aGUgc2MgdG8gY292ZXIgdGhpcyB3aW4gdHgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6ODg0CiAgICAvLyB0aGlzLmFsbERlcG9zaXRzKGtleS5hc3NldElkKS52YWx1ZSA9IG5ldyBVaW50TjI1NihwcmV2RGVwb3NpdC5uYXRpdmUgLSB3aW5BbW91bnQpCiAgICBkaWcgMQogICAgYi0KICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzEgLy8gMzIKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGZyYW1lX2RpZyAxCiAgICBkdXAKICAgIGNvdmVyIDMKICAgIGJ8CiAgICBmcmFtZV9kaWcgNwogICAgc3dhcAogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo4ODYKICAgIC8vIGFzc2VydChnYW1lLmJhbGFuY2UubmF0aXZlID49IHdpbkFtb3VudCwgJ1RoZXJlIGlzIG5vdCBlbm91Z2ggbW9uZXkgaW4gdGhlIHNjIHRvIGNvdmVyIHRoaXMgd2luIHR4JykKICAgIGZyYW1lX2RpZyAxNgogICAgZHVwCiAgICBjb3ZlciAzCiAgICBleHRyYWN0IDAgMzIgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBkdXAKICAgIGRpZyAyCiAgICBiPj0KICAgIGFzc2VydCAvLyBUaGVyZSBpcyBub3QgZW5vdWdoIG1vbmV5IGluIHRoZSBzYyB0byBjb3ZlciB0aGlzIHdpbiB0eAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo4ODcKICAgIC8vIHRoaXMuZ2FtZXMoa2V5KS52YWx1ZS5iYWxhbmNlID0gbmV3IFVpbnROMjU2KGdhbWUuYmFsYW5jZS5uYXRpdmUgLSB3aW5BbW91bnQpCiAgICBzd2FwCiAgICBiLQogICAgZHVwCiAgICBsZW4KICAgIGludGNfMSAvLyAzMgogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgYnwKICAgIGZyYW1lX2RpZyAxNQogICAgZHVwCiAgICBjb3ZlciAyCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgc3dhcAogICAgcmVwbGFjZTIgMAogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo4ODkKICAgIC8vIHRoaXMucGxheXMoc2VuZGVyKS52YWx1ZS5zdGF0ZSA9IG5ldyBVaW50TjY0KDIpIC8vIG1hcmsgdGhlIHN0YXRlIG9mIHRoZSBnYW1lIDIgLSB3aW4KICAgIGZyYW1lX2RpZyAxMgogICAgZHVwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgYnl0ZWMgMTUgLy8gMHgwMDAwMDAwMDAwMDAwMDAyCiAgICByZXBsYWNlMiAwCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjg5Mi04OTgKICAgIC8vIGl0eG4KICAgIC8vICAgLmFwcGxpY2F0aW9uQ2FsbCh7CiAgICAvLyAgICAgYXBwSWQ6IGdhbWUuYXNzZXRJZC5uYXRpdmUsCiAgICAvLyAgICAgYXBwQXJnczogW21ldGhvZFNlbGVjdG9yKCdhcmMyMDBfdHJhbnNmZXIoYWRkcmVzcyx1aW50MjU2KWJvb2wnKSwgcGxheS5vd25lciwgbmV3IFVpbnROMjU2KHdpbkFtb3VudCldLAogICAgLy8gICAgIGZlZTogMCwKICAgIC8vICAgfSkKICAgIC8vICAgLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjg5NAogICAgLy8gYXBwSWQ6IGdhbWUuYXNzZXRJZC5uYXRpdmUsCiAgICBpbnRjXzEgLy8gMzIKICAgIGV4dHJhY3RfdWludDY0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjg5NQogICAgLy8gYXBwQXJnczogW21ldGhvZFNlbGVjdG9yKCdhcmMyMDBfdHJhbnNmZXIoYWRkcmVzcyx1aW50MjU2KWJvb2wnKSwgcGxheS5vd25lciwgbmV3IFVpbnROMjU2KHdpbkFtb3VudCldLAogICAgZnJhbWVfZGlnIDEzCiAgICBleHRyYWN0IDk2IDMyIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnl0ZWMgMTEgLy8gbWV0aG9kICJhcmMyMDBfdHJhbnNmZXIoYWRkcmVzcyx1aW50MjU2KWJvb2wiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGZyYW1lX2RpZyAwCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjg5Mi04OTcKICAgIC8vIGl0eG4KICAgIC8vICAgLmFwcGxpY2F0aW9uQ2FsbCh7CiAgICAvLyAgICAgYXBwSWQ6IGdhbWUuYXNzZXRJZC5uYXRpdmUsCiAgICAvLyAgICAgYXBwQXJnczogW21ldGhvZFNlbGVjdG9yKCdhcmMyMDBfdHJhbnNmZXIoYWRkcmVzcyx1aW50MjU2KWJvb2wnKSwgcGxheS5vd25lciwgbmV3IFVpbnROMjU2KHdpbkFtb3VudCldLAogICAgLy8gICAgIGZlZTogMCwKICAgIC8vICAgfSkKICAgIHB1c2hpbnQgNiAvLyA2CiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjg5NgogICAgLy8gZmVlOiAwLAogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjg5Mi04OTgKICAgIC8vIGl0eG4KICAgIC8vICAgLmFwcGxpY2F0aW9uQ2FsbCh7CiAgICAvLyAgICAgYXBwSWQ6IGdhbWUuYXNzZXRJZC5uYXRpdmUsCiAgICAvLyAgICAgYXBwQXJnczogW21ldGhvZFNlbGVjdG9yKCdhcmMyMDBfdHJhbnNmZXIoYWRkcmVzcyx1aW50MjU2KWJvb2wnKSwgcGxheS5vd25lciwgbmV3IFVpbnROMjU2KHdpbkFtb3VudCldLAogICAgLy8gICAgIGZlZTogMCwKICAgIC8vICAgfSkKICAgIC8vICAgLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAoKQ2xhaW1HYW1lX2FmdGVyX2lmX2Vsc2VAMjI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjkwNAogICAgLy8gcmV0dXJuIHRoaXMucGxheXMoc2VuZGVyKS52YWx1ZQogICAgZnJhbWVfZGlnIDEyCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCkNsYWltR2FtZV9lbHNlX2JvZHlAMjE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjkwMgogICAgLy8gdGhpcy5Mb29zZUdhbWUoa2V5LCBnYW1lLCBwbGF5LCBzZW5kZXIpCiAgICBmcmFtZV9kaWcgMTQKICAgIGZyYW1lX2RpZyAxNgogICAgZnJhbWVfZGlnIDEzCiAgICBmcmFtZV9kaWcgMTEKICAgIGNhbGxzdWIgTG9vc2VHYW1lCiAgICBwb3BuIDMKICAgIGIgQ2xhaW1HYW1lX2FmdGVyX2lmX2Vsc2VAMjIKCgovLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjpBdm1TYXRvc2hpRGljZS5Mb29zZUdhbWUoa2V5OiBieXRlcywgZ2FtZTogYnl0ZXMsIHBsYXk6IGJ5dGVzLCBzZW5kZXI6IGJ5dGVzKSAtPiBieXRlcywgYnl0ZXMsIGJ5dGVzOgpMb29zZUdhbWU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjkwNwogICAgLy8gcHJpdmF0ZSBMb29zZUdhbWUoa2V5OiBBZGRyZXNzQXNzZXRTdHJ1Y3QsIGdhbWU6IEdhbWVTdHJ1Y3QsIHBsYXk6IFBsYXlTdHJ1Y3QsIHNlbmRlcjogQWRkcmVzcykgewogICAgcHJvdG8gNCAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjE0OQogICAgLy8gcHVibGljIGdhbWVzID0gQm94TWFwPEFkZHJlc3NBc3NldFN0cnVjdCwgR2FtZVN0cnVjdD4oeyBrZXlQcmVmaXg6ICdnJyB9KQogICAgYnl0ZWMgNSAvLyAiZyIKICAgIGZyYW1lX2RpZyAtNAogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjkxMgogICAgLy8gY29uc3QgZ2FtZVByb2ZpdFJhdGlvOiB1aW50NjQgPSAxXzAwMF8wMDAgLSB0aGlzLmdhbWVzKGtleSkudmFsdWUud2luUmF0aW8ubmF0aXZlCiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBwdXNoaW50IDE0NSAvLyAxNDUKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjIDQgLy8gMTAwMDAwMAogICAgc3dhcAogICAgLQogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo5MTMKICAgIC8vIGNvbnN0IGZlZVJhdGlvOiB1aW50NjQgPSBnYW1lUHJvZml0UmF0aW8gLyA1CiAgICBwdXNoaW50IDUgLy8gNQogICAgLwogICAgLy8gc21hcnRfY29udHJhY3RzL2F2bV9zYXRvc2hpX2RpY2UvY29udHJhY3QuYWxnby50czo5MTQKICAgIC8vIGNvbnN0IGZlZTogYmlndWludCA9IChwbGF5LmRlcG9zaXQubmF0aXZlICogQmlnVWludChmZWVSYXRpbykpIC8gQmlnVWludCgxXzAwMF8wMDApCiAgICBmcmFtZV9kaWcgLTIKICAgIGV4dHJhY3QgMjQgMzIgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBzd2FwCiAgICBpdG9iCiAgICBkaWcgMQogICAgYioKICAgIGJ5dGVjIDkgLy8gMHgwZjQyNDAKICAgIGIvCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjkxNgogICAgLy8gdGhpcy5hbGxEZXBvc2l0cyhrZXkuYXNzZXRJZCkudmFsdWUgPSBuZXcgVWludE4yNTYodGhpcy5hbGxEZXBvc2l0cyhrZXkuYXNzZXRJZCkudmFsdWUubmF0aXZlIC0gZmVlKQogICAgZnJhbWVfZGlnIC00CiAgICBleHRyYWN0IDAgOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MTUxCiAgICAvLyBwdWJsaWMgYWxsRGVwb3NpdHMgPSBCb3hNYXA8VWludE42NCwgVWludE4yNTY+KHsga2V5UHJlZml4OiAnZCcgfSkKICAgIGJ5dGVjIDQgLy8gImQiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6OTE2CiAgICAvLyB0aGlzLmFsbERlcG9zaXRzKGtleS5hc3NldElkKS52YWx1ZSA9IG5ldyBVaW50TjI1Nih0aGlzLmFsbERlcG9zaXRzKGtleS5hc3NldElkKS52YWx1ZS5uYXRpdmUgLSBmZWUpCiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBkaWcgMgogICAgYi0KICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzEgLy8gMzIKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGludGNfMSAvLyAzMgogICAgYnplcm8KICAgIHN3YXAKICAgIGRpZyAxCiAgICBifAogICAgdW5jb3ZlciAyCiAgICBzd2FwCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjkxNwogICAgLy8gdGhpcy5nYW1lcyhrZXkpLnZhbHVlLmJhbGFuY2UgPSBuZXcgVWludE4yNTYoZ2FtZS5iYWxhbmNlLm5hdGl2ZSArIHBsYXkuZGVwb3NpdC5uYXRpdmUgLSBmZWUpCiAgICBmcmFtZV9kaWcgLTMKICAgIGV4dHJhY3QgMCAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIHVuY292ZXIgMwogICAgYisKICAgIHVuY292ZXIgMgogICAgYi0KICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzEgLy8gMzIKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGJ8CiAgICBkaWcgMQogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIHN3YXAKICAgIHJlcGxhY2UyIDAKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hdm1fc2F0b3NoaV9kaWNlL2NvbnRyYWN0LmFsZ28udHM6MTUwCiAgICAvLyBwdWJsaWMgcGxheXMgPSBCb3hNYXA8QWRkcmVzcywgUGxheVN0cnVjdD4oeyBrZXlQcmVmaXg6ICdwJyB9KQogICAgYnl0ZWMgNyAvLyAicCIKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXZtX3NhdG9zaGlfZGljZS9jb250cmFjdC5hbGdvLnRzOjkxOAogICAgLy8gdGhpcy5wbGF5cyhzZW5kZXIpLnZhbHVlLnN0YXRlID0gbmV3IFVpbnRONjQoMykgLy8gbWFyayB0aGUgc3RhdGUgb2YgdGhlIGdhbWUgMyAtIGxvb3NlCiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBwdXNoYnl0ZXMgMHgwMDAwMDAwMDAwMDAwMDAzCiAgICByZXBsYWNlMiAwCiAgICBib3hfcHV0CiAgICBmcmFtZV9kaWcgLTQKICAgIGZyYW1lX2RpZyAtMwogICAgZnJhbWVfZGlnIC0yCiAgICByZXRzdWIK",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAIACABCMCEPcECwgLAAiYRAQAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAEFR98dQFkAWcJZAAAAAAAAAAAAXABgAMPQkAPdXNlciB3aXRoZHJhd2FsBNpwJbkQYWRtaW4gd2l0aGRyYXdhbAECCAAAAAAAAAABCAAAAAAAAAACBEqWj48xG0EB04INBHCmXokExh1W9QRUzGlvBIN6B2oE425XvwT3o2AFBH1/uM8EJZIgtQS3NTntBJyYOVUERX59HAQqI24YBAvFcdI2GgCODQFUARoBAgDlAMwArgCVAHUAVAA4ACIAEgACIkMxGRREMRhEiAl8K0xQsCRDMRkURDEYRIgJXytMULAkQzEZFEQxGEQ2GgE2GgKICTUrTFCwJEMxGRREMRhENhoBNhoCNhoDNhoEiAg4K0xQsCRDMRkURDEYRDEWJAlJOBCBBBJENhoBNhoCiAc0K0xQsCRDMRkURDEYRDEWJAlJOBAkEkQ2GgE2GgKIBkYrTFCwJEMxGRREMRhENhoBNhoCNhoDiAUfK0xQsCRDMRkURDEYRDEWJAlJOBCBBBJENhoBiAP9K0xQsCRDMRkURDEYRDEWJAlJOBAkEkQ2GgGIA6YkQzEZFEQxGEQxFiQJSTgQJBJENhoBiAKkK0xQsCRDMRkURDEYRDYaATYaAjYaAzYaBIgApyRDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCADYaBBc2GgUXNhoGFzYaBxeIAEtJFRZXBgJMUCtMULAkQzEZgQQSRDEYRDYaAVcCAIgAFigiTwJUK0xQsCRDMRlA/ooxGBREJEOKAQEyCTEAEkSABXNjdmVyi/9nJImKBwEyCTEAEkSxi/myCov9sg2L/rIOi/yyDIv7sj+L+rILgQKyEIv/sgGztBeJigQAIkcDgABHBIv+MQBQJwVMUEm9RQFBAPqLCb5MjAFEi/2AAKiL/YwCQQAHiwFXACCMAosCSYABKKJLAUyhSU4CjAOLAUlOA1cAIElLAqdETKFJFSMORCOvSYwATEsBq4sJSU4CvkRMXAC/JwSL/lBJvkRPA6FJFSMORE8Cq78hB1MoIk8CVCJTQQAdsYsDSRUlDkQlr6sXJwqyBYv8sgeyCCSyECKyAbOLASEFUygiTwJUIlNBACSxiwEjW4sDSRUlDkQlr6sXJwqyBYv8shSyErIRgQSyECKyAbOLASEGUygiTwJUIlNBACexiwEjW4sDSRUjDkSLAKsnCrIFJwuyGov8shqyGrIYgQayECKyAbOJMgkxABJEi/4XSYwGQABMMgpzAEQyCnMBRAknBIv+UL5EIkQlr0xLAasXTwJMCUmMBBaL/adEi/2rF0mMB0AABIsEjAeLB7EWFycMsgWL/LIHsggkshAisgGziYv/IlNBAB6xJwyyBScLshqL/LIai/2yGosGshiBBrIQIrIBs4kyCosGcABEJwSL/lC+RCJEJa9MSwGrF08CTAlJjAUWi/2nRIv9qxdJjAhAAASLBYwIiwixFhcnDLIFi/yyFLISiwayEYEEshAisgGziYoCASJHAov+OACL/xchBA5Ei/44CEmBKAoJKScGvUUBQQAHJwa+TIwFRIsEFkmMAYsFoEkVIw5EI69JjACrJwZMv4v+OAcyChJEKosDUCcFTFBJjAK9RQFBAFOLAkm+RCEHUygiTwJUJwgSREm+RCEFUygiTwJUKBJESb5EVyAIKhJESb5EVwAgiwGgSRUjDkSLAKtLAb5ETFwASwFMv0m+RIv/XJG/iwK+RIwAiYsBSRUjDkSLAKsyBxYyBhZPAipQJwhQIQUiVCEGIlRPAlBMUCpQKlApUCpQKVCL/1CLA1CLAky/Qv++igIAi/44BzIKEkSL/jgIgYCt4gQSRDIKi/8XSU4CcABFAUAAFLEyCrIUIrISiwCyEYEEshAisgGziYoCASJHAov+OACL/xchBA5Ei/44ERZJi/44EkmBKAoJTClMJwRMUEm9RQFBAAeLB75MjAZEiwUWSYwBiwagSRUjDkQjr0mMAKuLB0y/i/44FDIKEkSLBIsDUCcFTFBJjAK9RQFBAGKLAkm+RCEHUygiTwJUKBJESb5EIQZTKCJPAlQoEkRJvkQhBVMoIk8CVCcIEkRJvkRXIAiLBBJESb5EVwAgiwGgSRUjDkSLAKtLAb5ETFwASwFMv0m+RIv/XJG/iwK+RIwAiYsBSRUjDkSLAKsyBxYyBhZPAosEUChQIQUkVCEGIlRPAlBMUCpQKlApUCpQKVCL/1CLA1CLAky/Qv++igMBIkkxAIv/FyEEDkSL/oABKKKL/kyhKScEi/1QSb1FAUEAB4sFvkyMBESLBIsDoEkVIw5EI69JjACriwVMv7GL/RcxADIKJxCyGkyyGrIai/6yGrIYgQayECKyAbOL/YsCUCcFTFBJjAG9RQFBAGKLAUm+RCEHUygiTwJUKBJESb5EIQZTKCJPAlQnCBJESb5EIQVTKCJPAlQoEkRJvkRXIAiL/RJESb5EVwAgiwOgSRUjDkSLAKtLAb5ETFwASwFMv0m+RIv/XJG/iwG+RIwAiYsDSRUjDkSLAKsyBxYyBhZPAov9UChQIQUiVCEGJFRPAlBMUCpQKlApUCpQKVCL/1CLAlCLAUy/Qv++igMBIoAAi/04AEkxAEsBEkSL/lcACElOAioSRCcFi/5QSU4CSb1FAUS+RFcgCCoSRIv/F0lOAiEEDkQnB0xQSb1FAUEACYsGvkQiWyQNRDIHFosESU4CvkRMXDlLAUy/i/04CEmMASEEC4sFChZMvkRXACAnDaKmRCmMACcGvUUBQQAHJwa+TIwARIsBFosASwGgSRUjDkQjr0xLAasnBky/MgYWSwIVIw5ETgKri/5XCCAnDov/UE8DUE8CUIsDUExQiwJQiwZLAb+MAImKAwEiSYAAi/04AEmL/TgRFklPAjEASwESRIv+VwAITgKL/iJbSwIXEkQnBYv+UElOA0m9RQFEvkRXIAhPAhJEi/8XSU4CIQQORCcHTFBJvUUBQQAJiwi+RCJbJA1EMgcWiwZJTgK+RExcOUsBTL+L/TgSSYwCIQQLiwcKFky+RFcAICcNoqZEKYwAJwSLBFBJjAG9RQFBAAeLAb5MjABEiwIWiwBLAaBJFSMORCOvTEsBq4sBTL8yBhZLAhUjDkROAquL/lcIICcOi/9QTwNQTwJQiwVQTFCLA1CLCEsBv4wAiYoEASJJMQBJi/5XAAhJTgKL/RJEJwWL/lBJTgJJvUUBRL5EVyAIi/0SRIv/F0lOAiEEDkQnB0xQSb1FAUEACYsGvkQiWyQNRDIHFosESU4CvkRMXDlLAUy/sYv+IlsxADIKJxCyGkyyGrIai/yyGrIYgQayECKyAbOL/CcJo4sFFqJMvkRXACAnDaKmRCmMACcEi/1QSYwBvUUBQQAHiwG+TIwARIsAi/ygSRUjDkQjr0xLAauLAUy/MgYWi/xPAquL/lcIICcOi/9QTwNQTwJQiwNQTFCLAlCLBksBv4wAiYoCAYv/i/5QJwVMUEm9RQFEvkSJJwcxAFBJvUUBRL5EiYoAASJHCIAASTEAJwcxAFBHAr1FAUS+TElPAkRJVzgISwFXQCBQSU4CJwVMUElOAkm9RQFEvkxOAkSBEFtJMgaBZAkMQQAUiw6LEIsNiwuIAlVGA4sMvkSMAImLEYECCNEAJwmqiw0lW0mMCYsQgZEBWwshBAoWpEECHIsNVxggJwmjiwkWokmMCEkVSYwKIw5EI69JjAFLAatJjACLD0lOAr5ETFxJSwFMvzIHFksBvkRMXEG/ixBXcSClQQAYiw9JvkSLAFxxSwFMvzIHFksBvkRMXGm/ixAhB1MoIk8CVCJTQQCCKYwCiw5XAAgnBExQSYwFvUUBQQAHiwW+TIwCRIsCSYsISU4Dp0RLAaFJFSMORIsBSU4Dq4sFTL+LEFcAIElLAqdESwGhSRUjDkRPAquLD0lOAr5ETFwAv4sMSb5EJw9cAL+xMgqLDVdgIIsKJQ5EJa9PA6sXsgiyB7IAJLIQIrIBs4sQIQVTKCJPAlQiU0EAjCmMA4sOVwAIJwRMUEmMBr1FAUEAB4sGvkyMA0SLA0mLCElOA6dESwGhSRUjDkSLAUlOA6uLBky/ixBJTgNXACBJSwKnREsBoUkVIw5ETwKriw9JTgK+RExcAL+LDEm+RCcPXAC/sTIKiw1XYCCLCiUORCWvTwOrF08DI1uyEbISshSyAIEEshAisgGzixAhBlMoIk8CVCJTQQB+KYwEiw5XAAgnBExQSYwHvUUBQQAHiwe+TIwERIsESYsISU4Dp0RLAaFJFSMORIsBSU4Dq4sHTL+LEElOA1cAIElLAqdETKFJFSMORKuLD0lOAr5ETFwAv4sMSb5EJw9cAL+xI1uLDVdgICcLshqyGosAshqyGIEGshAisgGziwy+RIwAiYsOixCLDYsLiAAFRgNC/+mKBAMnBYv8UEm+RIGRAVshBEwJgQUKi/5XGCBMFksBoycJoov8VwAIJwRMUEm+REsCoUkVIw5EI69MSwGrTwJMv4v9VwAgTwOgTwKhSRUjDkSrSwG+RExcAL8nB4v/UEm+RIAIAAAAAAAAAANcAL+L/Iv9i/6J",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}