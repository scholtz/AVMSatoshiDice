{
    "name": "AvmSatoshiDice",
    "structs": {
        "AddressAssetStruct": [
            {
                "name": "assetId",
                "type": "uint64"
            },
            {
                "name": "owner",
                "type": "address"
            }
        ],
        "GameStruct": [
            {
                "name": "balance",
                "type": "uint256"
            },
            {
                "name": "assetId",
                "type": "uint64"
            },
            {
                "name": "isNativeToken",
                "type": "bool"
            },
            {
                "name": "isASAToken",
                "type": "bool"
            },
            {
                "name": "isArc200Token",
                "type": "bool"
            },
            {
                "name": "createdAtTime",
                "type": "uint64"
            },
            {
                "name": "lastPlayedTime",
                "type": "uint64"
            },
            {
                "name": "lastWinTime",
                "type": "uint64"
            },
            {
                "name": "lastWinAmount",
                "type": "uint256"
            },
            {
                "name": "biggestWinTime",
                "type": "uint64"
            },
            {
                "name": "biggestWinAmount",
                "type": "uint256"
            },
            {
                "name": "winRatio",
                "type": "uint64"
            },
            {
                "name": "owner",
                "type": "address"
            }
        ],
        "PlayStruct": [
            {
                "name": "state",
                "type": "uint64"
            },
            {
                "name": "winProbability",
                "type": "uint64"
            },
            {
                "name": "round",
                "type": "uint64"
            },
            {
                "name": "deposit",
                "type": "uint256"
            },
            {
                "name": "assetId",
                "type": "uint64"
            },
            {
                "name": "gameCreator",
                "type": "address"
            },
            {
                "name": "owner",
                "type": "address"
            }
        ]
    },
    "methods": [
        {
            "name": "updateApplication",
            "args": [
                {
                    "type": "string",
                    "name": "newVersion"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "UpdateApplication"
                ]
            },
            "readonly": false,
            "desc": "addressUdpater from global biatec configuration is allowed to update application",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sendOnlineKeyRegistration",
            "args": [
                {
                    "type": "byte[]",
                    "name": "voteKey"
                },
                {
                    "type": "byte[]",
                    "name": "selectionKey"
                },
                {
                    "type": "byte[]",
                    "name": "stateProofKey"
                },
                {
                    "type": "uint64",
                    "name": "voteFirst"
                },
                {
                    "type": "uint64",
                    "name": "voteLast"
                },
                {
                    "type": "uint64",
                    "name": "voteKeyDilution"
                },
                {
                    "type": "uint64",
                    "name": "fee"
                }
            ],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Creator can perfom key registration for this LP pool",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw",
            "args": [
                {
                    "type": "address",
                    "name": "receiver",
                    "desc": "Receiver"
                },
                {
                    "type": "uint256",
                    "name": "amount",
                    "desc": "Amout to send"
                },
                {
                    "type": "uint64",
                    "name": "assetId"
                },
                {
                    "type": "bool",
                    "name": "isArc200Token"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Biatec can withdraw service fees. The current balance",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "CreateGameWithNativeToken",
            "args": [
                {
                    "type": "pay",
                    "name": "txnDeposit",
                    "desc": "Deposit transaction"
                },
                {
                    "type": "uint64",
                    "name": "winRatio",
                    "desc": "Win ratio.. 1_000_000 for user probability, 200_000 for 0.2 factor of the user probability, 0 for no win"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create new game or deposit by the owner more assets to the game.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "OptInToASA",
            "args": [
                {
                    "type": "pay",
                    "name": "txnDeposit",
                    "desc": "Deposit tx"
                },
                {
                    "type": "uint64",
                    "name": "assetId",
                    "desc": "Assset id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Anyone can optin this contract to his ASA if he deposits 10 native tokens",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "CreateGameWithASAToken",
            "args": [
                {
                    "type": "axfer",
                    "name": "txnDeposit",
                    "desc": "Deposit transaction"
                },
                {
                    "type": "uint64",
                    "name": "winRatio",
                    "desc": "Win ratio.. 1_000_000 for user probability, 200_000 for 0.2 factor of the user probability, 0 for no win"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create new game or deposit by the owner more assets to the game.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "CreateGameWithArc200Token",
            "args": [
                {
                    "type": "uint64",
                    "name": "assetId"
                },
                {
                    "type": "uint256",
                    "name": "amount"
                },
                {
                    "type": "uint64",
                    "name": "winRatio",
                    "desc": "Win ratio.. 1_000_000 for user probability, 200_000 for 0.2 factor of the user probability, 0 for no win"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create new game or deposit by the owner more assets to the game.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "StartGameWithNativeToken",
            "args": [
                {
                    "type": "pay",
                    "name": "txnDeposit",
                    "desc": "Deposit"
                },
                {
                    "type": "(uint64,address)",
                    "struct": "AddressAssetStruct",
                    "name": "game",
                    "desc": "The"
                },
                {
                    "type": "uint64",
                    "name": "winProbability",
                    "desc": ""
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Starts new game play\n\nPlayer selects win probability and the data is stored to the player's box storage.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "StartGameWithASAToken",
            "args": [
                {
                    "type": "axfer",
                    "name": "txnDeposit",
                    "desc": "Deposit"
                },
                {
                    "type": "(uint64,address)",
                    "struct": "AddressAssetStruct",
                    "name": "game",
                    "desc": "The"
                },
                {
                    "type": "uint64",
                    "name": "winProbability",
                    "desc": ""
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Starts new game play\n\nPlayer selects win probability and the data is stored to the player's box storage.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "StartGameWithArc200Token",
            "args": [
                {
                    "type": "uint256",
                    "name": "amount"
                },
                {
                    "type": "uint64",
                    "name": "assetId"
                },
                {
                    "type": "(uint64,address)",
                    "struct": "AddressAssetStruct",
                    "name": "game",
                    "desc": "The"
                },
                {
                    "type": "uint64",
                    "name": "winProbability",
                    "desc": ""
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Starts new game play\n\nPlayer selects win probability and the data is stored to the player's box storage.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "Game",
            "args": [
                {
                    "type": "address",
                    "name": "creator"
                },
                {
                    "type": "uint64",
                    "name": "assetId"
                }
            ],
            "returns": {
                "type": "(uint256,uint64,bool,bool,bool,uint64,uint64,uint64,uint256,uint64,uint256,uint64,address)",
                "struct": "GameStruct",
                "desc": "the current game"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the current state of the game",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "MyGame",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64,uint256,uint64,address,address)",
                "struct": "PlayStruct",
                "desc": "the current player game"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the active user box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "ClaimGame",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Claim the game.\n\nIf user won, he receives the assets\n\nIf user lost, the game is funded with more balance",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "version": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "c2N2ZXI=",
                    "desc": "Version of the smart contract"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "games": {
                    "keyType": "AddressAssetStruct",
                    "valueType": "GameStruct",
                    "prefix": "Zw=="
                },
                "plays": {
                    "keyType": "address",
                    "valueType": "PlayStruct",
                    "prefix": "cA=="
                },
                "allDeposits": {
                    "keyType": "uint64",
                    "valueType": "uint256",
                    "prefix": "ZA=="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1933,
                        2158,
                        2368
                    ],
                    "errorMessage": "Asset id in the tx does not match the game asset id"
                },
                {
                    "pc": [
                        707,
                        778,
                        790,
                        983,
                        1092,
                        1196,
                        1245,
                        1260,
                        1274,
                        1283,
                        1301,
                        1311,
                        1474,
                        1524,
                        1538,
                        1552,
                        1567,
                        1577,
                        1595,
                        1605,
                        1701,
                        1770,
                        1784,
                        1799,
                        1813,
                        1823,
                        1841,
                        1851,
                        1947,
                        1978,
                        1993,
                        2028,
                        2051,
                        2172,
                        2204,
                        2219,
                        2254,
                        2283,
                        2382,
                        2414,
                        2429,
                        2491,
                        2520,
                        2595,
                        2608,
                        2637,
                        2666,
                        2843,
                        2899,
                        2908,
                        2988,
                        3047,
                        3056,
                        3143,
                        3199,
                        3208,
                        3285,
                        3298
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        2593,
                        2661
                    ],
                    "errorMessage": "Did not found the game"
                },
                {
                    "pc": [
                        2606,
                        2631
                    ],
                    "errorMessage": "Did not found the game you are playing"
                },
                {
                    "pc": [
                        755
                    ],
                    "errorMessage": "Game creator can withdraw from the game only the game deposit"
                },
                {
                    "pc": [
                        722,
                        748,
                        1275,
                        1284,
                        1568,
                        1578,
                        1814,
                        1824,
                        1925,
                        1948,
                        2029,
                        2089,
                        2145,
                        2173,
                        2255,
                        2321,
                        2359,
                        2383,
                        2492,
                        2551,
                        2639,
                        2644,
                        2727,
                        2773,
                        2821,
                        2874,
                        2919,
                        2966,
                        3022,
                        3067,
                        3121,
                        3177,
                        3219,
                        3262,
                        3267
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        258,
                        270,
                        287,
                        310,
                        334,
                        363,
                        391,
                        412,
                        438,
                        463,
                        488,
                        512
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        573
                    ],
                    "errorMessage": "OnCompletion is not UpdateApplication"
                },
                {
                    "pc": [
                        617
                    ],
                    "errorMessage": "Only creator can update application"
                },
                {
                    "pc": [
                        638
                    ],
                    "errorMessage": "Only creator can use this method"
                },
                {
                    "pc": [
                        1386
                    ],
                    "errorMessage": "Opt in fee for new asset is 10 native tokens"
                },
                {
                    "pc": [
                        1228,
                        1506
                    ],
                    "errorMessage": "Receiver must be the gas station app"
                },
                {
                    "pc": [
                        1375
                    ],
                    "errorMessage": "Receiver of the optin fee must be the current smart contract"
                },
                {
                    "pc": [
                        1922,
                        2142
                    ],
                    "errorMessage": "Sender of the app call must be the same as sender of the deposit"
                },
                {
                    "pc": [
                        1945,
                        2170,
                        2380
                    ],
                    "errorMessage": "The game does not exist"
                },
                {
                    "pc": [
                        2033,
                        2259,
                        2496
                    ],
                    "errorMessage": "The game does not have enough balance for your win scenario"
                },
                {
                    "pc": [
                        956
                    ],
                    "errorMessage": "The game for this asset does not exists"
                },
                {
                    "pc": [
                        1271
                    ],
                    "errorMessage": "The previous game was ASA token"
                },
                {
                    "pc": [
                        1796
                    ],
                    "errorMessage": "The previous game was NOT for the arc200 token"
                },
                {
                    "pc": [
                        1810
                    ],
                    "errorMessage": "The previous game was for the ASA token"
                },
                {
                    "pc": [
                        1549
                    ],
                    "errorMessage": "The previous game was for the arc200 token"
                },
                {
                    "pc": [
                        1535,
                        1781
                    ],
                    "errorMessage": "The previous game was for the native token"
                },
                {
                    "pc": [
                        1564
                    ],
                    "errorMessage": "The previous game was not for the ASA token"
                },
                {
                    "pc": [
                        1257,
                        1280
                    ],
                    "errorMessage": "The previous game was not for the native token"
                },
                {
                    "pc": [
                        1574,
                        1820
                    ],
                    "errorMessage": "The previous game was not for the same token"
                },
                {
                    "pc": [
                        2853,
                        2881,
                        2998,
                        3029,
                        3153,
                        3184
                    ],
                    "errorMessage": "There is not enough money in the sc to cover this win tx"
                },
                {
                    "pc": [
                        1953,
                        2179,
                        2389
                    ],
                    "errorMessage": "This game must be played with native token"
                },
                {
                    "pc": [
                        1171,
                        1438,
                        1671,
                        1963,
                        2189,
                        2399
                    ],
                    "errorMessage": "Win probability must be below 1 000 000"
                },
                {
                    "pc": [
                        1983,
                        2209,
                        2419
                    ],
                    "errorMessage": "Your previous game has not yet been claimed"
                },
                {
                    "pc": [
                        970,
                        975
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        1085
                    ],
                    "errorMessage": "account opted into asset"
                },
                {
                    "pc": [
                        606
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        261,
                        273,
                        290,
                        313,
                        337,
                        366,
                        394,
                        415,
                        441,
                        466,
                        491,
                        515,
                        576
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1004,
                        1113
                    ],
                    "errorMessage": "maxWithdrawableBalance is less then requested"
                },
                {
                    "pc": [
                        762,
                        798,
                        823,
                        871,
                        922,
                        985,
                        1094,
                        1210,
                        1294,
                        1324,
                        1488,
                        1588,
                        1618,
                        1711,
                        1834,
                        1864,
                        2019,
                        2064,
                        2083,
                        2245,
                        2296,
                        2315,
                        2482,
                        2530,
                        2747,
                        2861,
                        2889,
                        2926,
                        3006,
                        3037,
                        3074,
                        3161,
                        3191,
                        3275
                    ],
                    "errorMessage": "overflow"
                },
                {
                    "pc": [
                        348,
                        426
                    ],
                    "errorMessage": "transaction type is axfer"
                },
                {
                    "pc": [
                        376,
                        451,
                        476
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}